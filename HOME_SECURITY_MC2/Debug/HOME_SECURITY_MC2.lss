
HOME_SECURITY_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00002ed4  00002f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800192  00800192  0000309a  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ec  00000000  00000000  00005c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000071f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00007350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00007506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00009413  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000a4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000b97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__vector_3>
      10:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__vector_4>
      14:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_5>
      18:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__vector_6>
      1c:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__vector_7>
      20:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__vector_8>
      24:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 0c 	call	0x183e	; 0x183e <main>
      8a:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 58       	subi	r30, 0x88	; 136
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <BUZZER_init>:
/*
 * Initialize Buzzer
 * ( Set The Direction Of Pi Is Output )
 */
void BUZZER_init(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	62 e0       	ldi	r22, 0x02	; 2
     d7a:	41 e0       	ldi	r20, 0x01	; 1
     d7c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_setupPinDirection>
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <BUZZER_on>:

/*
 * Turn On Buzzer
 */
void BUZZER_on(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	62 e0       	ldi	r22, 0x02	; 2
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <BUZZER_off>:

/*
 * Turn Off Buzzer
 */
void BUZZER_off(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	62 e0       	ldi	r22, 0x02	; 2
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <DCMOTOR_init>:
/*
 * Configure Motor Pins As Output
 * And Make Dc Motor Stop At Begin
 */
void DCMOTOR_init(void)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * IN1 = OUTPUT
	 * IN2 = OUTPUT
	 * E = OUTPUT
	 */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN_1,PIN_OUTPUT);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN_2,PIN_OUTPUT);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_E_PORT_ID, DC_MOTOR_E,PIN_OUTPUT);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	67 e0       	ldi	r22, 0x07	; 7
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_setupPinDirection>

	/*
	 * Stop Motor
	 */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_1, LOGIC_LOW);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_2, LOGIC_LOW);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>

}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <DCMOTOR_rotate>:
/*
 *  Select The Direction Of Rotation
 *  Select Speed Of Rotation
 */
void DCMOTOR_rotate(uint8 speed ,DCMOTOR_state state)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <DCMOTOR_rotate+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	8a 83       	std	Y+2, r24	; 0x02
     e04:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle = 0 ;
     e06:	19 82       	std	Y+1, r1	; 0x01

	if (state == CW_MOTOR)
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	59 f4       	brne	.+22     	; 0xe24 <DCMOTOR_rotate+0x2e>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_1, LOGIC_LOW);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_2, LOGIC_HIGH);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
     e22:	18 c0       	rjmp	.+48     	; 0xe54 <DCMOTOR_rotate+0x5e>

	}
	else if (state == CCW_MOTOR)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	59 f4       	brne	.+22     	; 0xe40 <DCMOTOR_rotate+0x4a>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_1, LOGIC_HIGH);
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_2, LOGIC_LOW);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <DCMOTOR_rotate+0x5e>

	}
	else
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_1, LOGIC_LOW);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN_2, LOGIC_LOW);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_writePin>
	}

	duty_cycle = (((float) speed /100) * TIMER2_MAX_VALUE);
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 e0       	ldi	r26, 0x00	; 0
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	48 ec       	ldi	r20, 0xC8	; 200
     e74:	52 e4       	ldi	r21, 0x42	; 66
     e76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4f e7       	ldi	r20, 0x7F	; 127
     e88:	53 e4       	ldi	r21, 0x43	; 67
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_generatePWM(duty_cycle, PWM_NON_INVERTING);
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	0e 94 df 14 	call	0x29be	; 0x29be <TIMER2_generatePWM>

}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <EEPROM_writeByte>:
 * Note
 * Adress Of EEPROM is 11 Bit So We Take Last 3 Bits And Add Them To 0101 And R/W Bit At First
 * Then Send 8 Bit Of Adress
 */
uint8 EEPROM_writeByte(uint16 u16_address , uint8 u8_data)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <EEPROM_writeByte+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <EEPROM_writeByte+0x8>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6b 83       	std	Y+3, r22	; 0x03
	/* Start Bit To Bus */
	TWI_start();
     ec6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_start>
	if (TWI_getStatus() != TWI_START)
     eca:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     ece:	88 30       	cpi	r24, 0x08	; 8
     ed0:	11 f0       	breq	.+4      	; 0xed6 <EEPROM_writeByte+0x22>
	return ERROR ;
     ed2:	1c 82       	std	Y+4, r1	; 0x04
     ed4:	28 c0       	rjmp	.+80     	; 0xf26 <EEPROM_writeByte+0x72>

	/* Sending Device Adress */
	/*
	 * Take First 3 Bits Of 11 Bit  and | With 1010 Then Castong As uint8 + write
	 */
	TWI_writeByte((uint8)(0xA0 | ((u16_address & 0x0700)>>7)));
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	80 70       	andi	r24, 0x00	; 0
     edc:	97 70       	andi	r25, 0x07	; 7
     ede:	88 0f       	add	r24, r24
     ee0:	89 2f       	mov	r24, r25
     ee2:	88 1f       	adc	r24, r24
     ee4:	99 0b       	sbc	r25, r25
     ee6:	91 95       	neg	r25
     ee8:	80 6a       	ori	r24, 0xA0	; 160
     eea:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
     eee:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     ef2:	88 31       	cpi	r24, 0x18	; 24
     ef4:	11 f0       	breq	.+4      	; 0xefa <EEPROM_writeByte+0x46>
		return ERROR ;
     ef6:	1c 82       	std	Y+4, r1	; 0x04
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <EEPROM_writeByte+0x72>

	/* Sending Remaing 8 Bits Of Adress */
	TWI_writeByte((uint8)(u16_address));
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f00:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     f04:	88 32       	cpi	r24, 0x28	; 40
     f06:	11 f0       	breq	.+4      	; 0xf0c <EEPROM_writeByte+0x58>
		return ERROR ;
     f08:	1c 82       	std	Y+4, r1	; 0x04
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <EEPROM_writeByte+0x72>

	/* Sending Data */
	TWI_writeByte(u8_data);
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f12:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     f16:	88 32       	cpi	r24, 0x28	; 40
     f18:	11 f0       	breq	.+4      	; 0xf1e <EEPROM_writeByte+0x6a>
		return ERROR ;
     f1a:	1c 82       	std	Y+4, r1	; 0x04
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <EEPROM_writeByte+0x72>

	/* Sending Stop Bit */
	TWI_stop();
     f1e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <TWI_stop>

	return SUCCESS ;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8c 83       	std	Y+4, r24	; 0x04
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <EEPROM_readByte>:
 * 4- Send Last 3 Bit Of Adress + ( Read )
 * 5- Read Byte With ACK
 */

uint8 EEPROM_readByte(uint16 u16_address ,  uint8 *u8_data)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <EEPROM_readByte+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <EEPROM_readByte+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9a 83       	std	Y+2, r25	; 0x02
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	7c 83       	std	Y+4, r23	; 0x04
     f4a:	6b 83       	std	Y+3, r22	; 0x03
	/* Start Bit */
	TWI_start();
     f4c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_start>
	if(TWI_getStatus() != TWI_START)
     f50:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	11 f0       	breq	.+4      	; 0xf5c <EEPROM_readByte+0x26>
		return ERROR ;
     f58:	1d 82       	std	Y+5, r1	; 0x05
     f5a:	44 c0       	rjmp	.+136    	; 0xfe4 <EEPROM_readByte+0xae>

	/* Sending Device Adress */
	/*
	 * Take First 3 Bits Of 11 Bit  and | With 1010 Then Castong As uint8 + write
	*/
	TWI_writeByte((uint8)((0xA0) | ((u16_address & 0x0700)>>7)));
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	80 70       	andi	r24, 0x00	; 0
     f62:	97 70       	andi	r25, 0x07	; 7
     f64:	88 0f       	add	r24, r24
     f66:	89 2f       	mov	r24, r25
     f68:	88 1f       	adc	r24, r24
     f6a:	99 0b       	sbc	r25, r25
     f6c:	91 95       	neg	r25
     f6e:	80 6a       	ori	r24, 0xA0	; 160
     f70:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f74:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     f78:	88 31       	cpi	r24, 0x18	; 24
     f7a:	11 f0       	breq	.+4      	; 0xf80 <EEPROM_readByte+0x4a>
		return ERROR ;
     f7c:	1d 82       	std	Y+5, r1	; 0x05
     f7e:	32 c0       	rjmp	.+100    	; 0xfe4 <EEPROM_readByte+0xae>

	/* Sending Remaining Adress */
	TWI_writeByte((uint8)(u16_address));
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
     f86:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     f8a:	88 32       	cpi	r24, 0x28	; 40
     f8c:	11 f0       	breq	.+4      	; 0xf92 <EEPROM_readByte+0x5c>
		return ERROR ;
     f8e:	1d 82       	std	Y+5, r1	; 0x05
     f90:	29 c0       	rjmp	.+82     	; 0xfe4 <EEPROM_readByte+0xae>

	/* Sending Repeat Start Again */
	TWI_start();
     f92:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_start>
	if(TWI_getStatus() != TWI_REP_START)
     f96:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     f9a:	80 31       	cpi	r24, 0x10	; 16
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <EEPROM_readByte+0x6c>
		return ERROR ;
     f9e:	1d 82       	std	Y+5, r1	; 0x05
     fa0:	21 c0       	rjmp	.+66     	; 0xfe4 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	     * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16_address & 0x0700)>>7) | 1));
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	80 70       	andi	r24, 0x00	; 0
     fa8:	97 70       	andi	r25, 0x07	; 7
     faa:	88 0f       	add	r24, r24
     fac:	89 2f       	mov	r24, r25
     fae:	88 1f       	adc	r24, r24
     fb0:	99 0b       	sbc	r25, r25
     fb2:	91 95       	neg	r25
     fb4:	81 6a       	ori	r24, 0xA1	; 161
     fb6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	 if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     fba:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     fbe:	80 34       	cpi	r24, 0x40	; 64
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <EEPROM_readByte+0x90>
	        return ERROR;
     fc2:	1d 82       	std	Y+5, r1	; 0x05
     fc4:	0f c0       	rjmp	.+30     	; 0xfe4 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8_data = TWI_readByteWithNoACK();
     fc6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <TWI_readByteWithNoACK>
     fca:	eb 81       	ldd	r30, Y+3	; 0x03
     fcc:	fc 81       	ldd	r31, Y+4	; 0x04
     fce:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
     fd0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
     fd4:	88 35       	cpi	r24, 0x58	; 88
     fd6:	11 f0       	breq	.+4      	; 0xfdc <EEPROM_readByte+0xa6>
		return ERROR;
     fd8:	1d 82       	std	Y+5, r1	; 0x05
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
     fdc:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <TWI_stop>

	return SUCCESS;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <EEPROM_writeCombinedMSG>:
 * Adress Of EEPROM is 11 Bit So We Take Last 3 Bits And Add Them To 0101 And R/W Bit At First
 * Then Send 8 Bit Of Adress
 */

uint8 EEPROM_writeCombinedMSG(uint16 u16_address , uint8 arr[] , uint8 data_size)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	27 97       	sbiw	r28, 0x07	; 7
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	7d 83       	std	Y+5, r23	; 0x05
    1010:	6c 83       	std	Y+4, r22	; 0x04
    1012:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i = 0 ;
    1014:	19 82       	std	Y+1, r1	; 0x01
	/* Start Bit To Bus */
	TWI_start();
    1016:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_start>
	if (TWI_getStatus() != TWI_START)
    101a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	11 f0       	breq	.+4      	; 0x1026 <EEPROM_writeCombinedMSG+0x30>
		return ERROR;
    1022:	1f 82       	std	Y+7, r1	; 0x07
    1024:	39 c0       	rjmp	.+114    	; 0x1098 <EEPROM_writeCombinedMSG+0xa2>

	/* Sending Device Adress */
	/*
	 * Take First 3 Bits Of 11 Bit  and | With 1010 Then Castong As uint8 + write
	 */
	TWI_writeByte((uint8)(0xA0 | ((u16_address & 0x0700)>>7)));
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	80 70       	andi	r24, 0x00	; 0
    102c:	97 70       	andi	r25, 0x07	; 7
    102e:	88 0f       	add	r24, r24
    1030:	89 2f       	mov	r24, r25
    1032:	88 1f       	adc	r24, r24
    1034:	99 0b       	sbc	r25, r25
    1036:	91 95       	neg	r25
    1038:	80 6a       	ori	r24, 0xA0	; 160
    103a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    103e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    1042:	88 31       	cpi	r24, 0x18	; 24
    1044:	11 f0       	breq	.+4      	; 0x104a <EEPROM_writeCombinedMSG+0x54>
		return ERROR;
    1046:	1f 82       	std	Y+7, r1	; 0x07
    1048:	27 c0       	rjmp	.+78     	; 0x1098 <EEPROM_writeCombinedMSG+0xa2>

	/* Sending Remaing 8 Bits Of Adress */
	TWI_writeByte((uint8) (u16_address));
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1050:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    1054:	88 32       	cpi	r24, 0x28	; 40
    1056:	11 f0       	breq	.+4      	; 0x105c <EEPROM_writeCombinedMSG+0x66>
		return ERROR;
    1058:	1f 82       	std	Y+7, r1	; 0x07
    105a:	1e c0       	rjmp	.+60     	; 0x1098 <EEPROM_writeCombinedMSG+0xa2>

	/* Sending All The Array */
	for (i = 0 ; i < data_size ; i++)
    105c:	19 82       	std	Y+1, r1	; 0x01
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <EEPROM_writeCombinedMSG+0x92>
	{
		/* Sending Data */
		TWI_writeByte(arr[i]);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	80 81       	ld	r24, Z
    1072:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1076:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    107a:	88 32       	cpi	r24, 0x28	; 40
    107c:	11 f0       	breq	.+4      	; 0x1082 <EEPROM_writeCombinedMSG+0x8c>
			return ERROR;
    107e:	1f 82       	std	Y+7, r1	; 0x07
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <EEPROM_writeCombinedMSG+0xa2>
	TWI_writeByte((uint8) (u16_address));
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
		return ERROR;

	/* Sending All The Array */
	for (i = 0 ; i < data_size ; i++)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	8e 81       	ldd	r24, Y+6	; 0x06
    108c:	98 17       	cp	r25, r24
    108e:	40 f3       	brcs	.-48     	; 0x1060 <EEPROM_writeCombinedMSG+0x6a>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
			return ERROR;
	}

	/* Sending Stop Bit */
	TWI_stop();
    1090:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <TWI_stop>

	return SUCCESS;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	8f 83       	std	Y+7, r24	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
}
    109a:	27 96       	adiw	r28, 0x07	; 7
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <EEPROM_readCombinedMSG>:
 * 4- Send Last 3 Bit Of Adress + ( Read )
 * 5- Read Byte With ACK until last  Byte
 * 6- Read Last Byte With NACK
 */
uint8 EEPROM_readCombinedMSG(uint16 u16_address , uint8 *ptr , uint8 data_size)
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	27 97       	sbiw	r28, 0x07	; 7
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	9b 83       	std	Y+3, r25	; 0x03
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	7d 83       	std	Y+5, r23	; 0x05
    10ca:	6c 83       	std	Y+4, r22	; 0x04
    10cc:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i = 0 ;
    10ce:	19 82       	std	Y+1, r1	; 0x01
	/* Start Bit */
	TWI_start();
    10d0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_start>
	if (TWI_getStatus() != TWI_START)
    10d4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    10d8:	88 30       	cpi	r24, 0x08	; 8
    10da:	11 f0       	breq	.+4      	; 0x10e0 <EEPROM_readCombinedMSG+0x34>
		return ERROR;
    10dc:	1f 82       	std	Y+7, r1	; 0x07
    10de:	6f c0       	rjmp	.+222    	; 0x11be <EEPROM_readCombinedMSG+0x112>

	/* Sending Device Adress */
	/*
	 * Take First 3 Bits Of 11 Bit  and | With 1010 Then Castong As uint8 + write
	 */
	TWI_writeByte((uint8)((0xA0) | ((u16_address & 0x0700)>>7)));
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	80 70       	andi	r24, 0x00	; 0
    10e6:	97 70       	andi	r25, 0x07	; 7
    10e8:	88 0f       	add	r24, r24
    10ea:	89 2f       	mov	r24, r25
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 0b       	sbc	r25, r25
    10f0:	91 95       	neg	r25
    10f2:	80 6a       	ori	r24, 0xA0	; 160
    10f4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10f8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    10fc:	88 31       	cpi	r24, 0x18	; 24
    10fe:	11 f0       	breq	.+4      	; 0x1104 <EEPROM_readCombinedMSG+0x58>
		return ERROR;
    1100:	1f 82       	std	Y+7, r1	; 0x07
    1102:	5d c0       	rjmp	.+186    	; 0x11be <EEPROM_readCombinedMSG+0x112>

	/* Sending Remaining Adress */
	TWI_writeByte((uint8) (u16_address));
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    110a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    110e:	88 32       	cpi	r24, 0x28	; 40
    1110:	11 f0       	breq	.+4      	; 0x1116 <EEPROM_readCombinedMSG+0x6a>
		return ERROR;
    1112:	1f 82       	std	Y+7, r1	; 0x07
    1114:	54 c0       	rjmp	.+168    	; 0x11be <EEPROM_readCombinedMSG+0x112>

	/* Sending Repeat Start Again */
	TWI_start();
    1116:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    111a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    111e:	80 31       	cpi	r24, 0x10	; 16
    1120:	11 f0       	breq	.+4      	; 0x1126 <EEPROM_readCombinedMSG+0x7a>
		return ERROR;
    1122:	1f 82       	std	Y+7, r1	; 0x07
    1124:	4c c0       	rjmp	.+152    	; 0x11be <EEPROM_readCombinedMSG+0x112>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16_address & 0x0700)>>7) | 1));
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	9b 81       	ldd	r25, Y+3	; 0x03
    112a:	80 70       	andi	r24, 0x00	; 0
    112c:	97 70       	andi	r25, 0x07	; 7
    112e:	88 0f       	add	r24, r24
    1130:	89 2f       	mov	r24, r25
    1132:	88 1f       	adc	r24, r24
    1134:	99 0b       	sbc	r25, r25
    1136:	91 95       	neg	r25
    1138:	81 6a       	ori	r24, 0xA1	; 161
    113a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    113e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    1142:	80 34       	cpi	r24, 0x40	; 64
    1144:	11 f0       	breq	.+4      	; 0x114a <EEPROM_readCombinedMSG+0x9e>
		return ERROR;
    1146:	1f 82       	std	Y+7, r1	; 0x07
    1148:	3a c0       	rjmp	.+116    	; 0x11be <EEPROM_readCombinedMSG+0x112>

	for (i=0 ; i < data_size -1 ; i++)
    114a:	19 82       	std	Y+1, r1	; 0x01
    114c:	15 c0       	rjmp	.+42     	; 0x1178 <EEPROM_readCombinedMSG+0xcc>
	{
		/* Read Byte from Memory with send ACK */
		ptr[i] = TWI_readByteWithACK();
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	8c 01       	movw	r16, r24
    115a:	02 0f       	add	r16, r18
    115c:	13 1f       	adc	r17, r19
    115e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <TWI_readByteWithACK>
    1162:	f8 01       	movw	r30, r16
    1164:	80 83       	st	Z, r24
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
    1166:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    116a:	80 35       	cpi	r24, 0x50	; 80
    116c:	11 f0       	breq	.+4      	; 0x1172 <EEPROM_readCombinedMSG+0xc6>
			return ERROR;
    116e:	1f 82       	std	Y+7, r1	; 0x07
    1170:	26 c0       	rjmp	.+76     	; 0x11be <EEPROM_readCombinedMSG+0x112>
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16_address & 0x0700)>>7) | 1));
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
		return ERROR;

	for (i=0 ; i < data_size -1 ; i++)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	8f 5f       	subi	r24, 0xFF	; 255
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	28 17       	cp	r18, r24
    1188:	39 07       	cpc	r19, r25
    118a:	0c f3       	brlt	.-62     	; 0x114e <EEPROM_readCombinedMSG+0xa2>
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
			return ERROR;
	}

	/* Read Byte from Memory without send ACK */
	ptr[data_size-1] = TWI_readByteWithNoACK();
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 01       	movw	r18, r24
    1194:	21 50       	subi	r18, 0x01	; 1
    1196:	30 40       	sbci	r19, 0x00	; 0
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	8c 01       	movw	r16, r24
    119e:	02 0f       	add	r16, r18
    11a0:	13 1f       	adc	r17, r19
    11a2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <TWI_readByteWithNoACK>
    11a6:	f8 01       	movw	r30, r16
    11a8:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    11aa:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <TWI_getStatus>
    11ae:	88 35       	cpi	r24, 0x58	; 88
    11b0:	11 f0       	breq	.+4      	; 0x11b6 <EEPROM_readCombinedMSG+0x10a>
		return ERROR;
    11b2:	1f 82       	std	Y+7, r1	; 0x07
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <EEPROM_readCombinedMSG+0x112>

	/* Sending Stop Bit */
	TWI_stop();
    11b6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <TWI_stop>

	return SUCCESS;
    11ba:	f1 e0       	ldi	r31, 0x01	; 1
    11bc:	ff 83       	std	Y+7, r31	; 0x07
    11be:	8f 81       	ldd	r24, Y+7	; 0x07

}
    11c0:	27 96       	adiw	r28, 0x07	; 7
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <GPIO_setupPinDirection>:
 * input : (port_number - pint_number - Direction Of Pin (PIN_INPUT/PIN_OUTPUT))
 * output : non
 * Note : If Input Pin Or Port Number Isnot Invalide It Does Nothing
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_setupPinDirection+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_setupPinDirection+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <GPIO_setupPinDirection+0x1c>
    11f0:	d5 c0       	rjmp	.+426    	; 0x139c <GPIO_setupPinDirection+0x1c6>
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <GPIO_setupPinDirection+0x24>
    11f8:	d1 c0       	rjmp	.+418    	; 0x139c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		switch (port_num) {
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_setupPinDirection+0x3a>
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <GPIO_setupPinDirection+0xc0>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <GPIO_setupPinDirection+0x4e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <GPIO_setupPinDirection+0x68>
    1222:	bc c0       	rjmp	.+376    	; 0x139c <GPIO_setupPinDirection+0x1c6>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_setupPinDirection+0x5a>
    122e:	5f c0       	rjmp	.+190    	; 0x12ee <GPIO_setupPinDirection+0x118>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_setupPinDirection+0x66>
    123a:	85 c0       	rjmp	.+266    	; 0x1346 <GPIO_setupPinDirection+0x170>
    123c:	af c0       	rjmp	.+350    	; 0x139c <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    1244:	aa e3       	ldi	r26, 0x3A	; 58
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ea e3       	ldi	r30, 0x3A	; 58
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_setupPinDirection+0x8c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_setupPinDirection+0x88>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	98 c0       	rjmp	.+304    	; 0x139c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    126c:	aa e3       	ldi	r26, 0x3A	; 58
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_setupPinDirection+0xb4>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_setupPinDirection+0xb0>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	83 c0       	rjmp	.+262    	; 0x139c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    129c:	a7 e3       	ldi	r26, 0x37	; 55
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e7 e3       	ldi	r30, 0x37	; 55
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_setupPinDirection+0xe4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_setupPinDirection+0xe0>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	6c c0       	rjmp	.+216    	; 0x139c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    12c4:	a7 e3       	ldi	r26, 0x37	; 55
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_setupPinDirection+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_setupPinDirection+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	57 c0       	rjmp	.+174    	; 0x139c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    12f4:	a4 e3       	ldi	r26, 0x34	; 52
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e4 e3       	ldi	r30, 0x34	; 52
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_setupPinDirection+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_setupPinDirection+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	40 c0       	rjmp	.+128    	; 0x139c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    131c:	a4 e3       	ldi	r26, 0x34	; 52
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_setupPinDirection+0x164>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_setupPinDirection+0x160>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	2b c0       	rjmp	.+86     	; 0x139c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	a1 f4       	brne	.+40     	; 0x1374 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    134c:	a1 e3       	ldi	r26, 0x31	; 49
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e1 e3       	ldi	r30, 0x31	; 49
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_setupPinDirection+0x194>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_setupPinDirection+0x190>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	14 c0       	rjmp	.+40     	; 0x139c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    1374:	a1 e3       	ldi	r26, 0x31	; 49
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_setupPinDirection+0x1bc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_setupPinDirection+0x1b8>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GPIO_writePin>:
 * output :None
 * Note : If The Input Pin Or Port Isnot invalde it Does Nothing
 * note : The Function Will Enable/Disable Pull up Resistor depends on direction
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <GPIO_writePin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_writePin+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	6a 83       	std	Y+2, r22	; 0x02
    13be:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <GPIO_writePin+0x1c>
    13c6:	d5 c0       	rjmp	.+426    	; 0x1572 <GPIO_writePin+0x1c6>
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_writePin+0x24>
    13ce:	d1 c0       	rjmp	.+418    	; 0x1572 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		switch (port_num) {
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <GPIO_writePin+0x3a>
    13e4:	43 c0       	rjmp	.+134    	; 0x146c <GPIO_writePin+0xc0>
    13e6:	2c 81       	ldd	r18, Y+4	; 0x04
    13e8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	2c f4       	brge	.+10     	; 0x13fa <GPIO_writePin+0x4e>
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	9d 81       	ldd	r25, Y+5	; 0x05
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	71 f0       	breq	.+28     	; 0x1414 <GPIO_writePin+0x68>
    13f8:	bc c0       	rjmp	.+376    	; 0x1572 <GPIO_writePin+0x1c6>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <GPIO_writePin+0x5a>
    1404:	5f c0       	rjmp	.+190    	; 0x14c4 <GPIO_writePin+0x118>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <GPIO_writePin+0x66>
    1410:	85 c0       	rjmp	.+266    	; 0x151c <GPIO_writePin+0x170>
    1412:	af c0       	rjmp	.+350    	; 0x1572 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	a1 f4       	brne	.+40     	; 0x1442 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    141a:	ab e3       	ldi	r26, 0x3B	; 59
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	eb e3       	ldi	r30, 0x3B	; 59
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_writePin+0x8c>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_writePin+0x88>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	98 c0       	rjmp	.+304    	; 0x1572 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_writePin+0xb4>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_writePin+0xb0>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	83 c0       	rjmp	.+262    	; 0x1572 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	a1 f4       	brne	.+40     	; 0x149a <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1472:	a8 e3       	ldi	r26, 0x38	; 56
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e8 e3       	ldi	r30, 0x38	; 56
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_writePin+0xe4>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_writePin+0xe0>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	6c c0       	rjmp	.+216    	; 0x1572 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    149a:	a8 e3       	ldi	r26, 0x38	; 56
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e8 e3       	ldi	r30, 0x38	; 56
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_writePin+0x10c>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_writePin+0x108>
    14bc:	80 95       	com	r24
    14be:	84 23       	and	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	57 c0       	rjmp	.+174    	; 0x1572 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	a1 f4       	brne	.+40     	; 0x14f2 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    14ca:	a5 e3       	ldi	r26, 0x35	; 53
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e3       	ldi	r30, 0x35	; 53
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_writePin+0x13c>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <GPIO_writePin+0x138>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	40 c0       	rjmp	.+128    	; 0x1572 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    14f2:	a5 e3       	ldi	r26, 0x35	; 53
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_writePin+0x164>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_writePin+0x160>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	2b c0       	rjmp	.+86     	; 0x1572 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	a1 f4       	brne	.+40     	; 0x154a <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    1522:	a2 e3       	ldi	r26, 0x32	; 50
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <GPIO_writePin+0x194>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <GPIO_writePin+0x190>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    154a:	a2 e3       	ldi	r26, 0x32	; 50
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <GPIO_writePin+0x1bc>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <GPIO_writePin+0x1b8>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <GPIO_readPin>:
 * Read The Value Of Corresponding Pi
 * input :(port_number - pin_number )
 * output: Value Of Pin (LOGIC_HIGH/LOGIC_LOW )
 * note : If The Input Port Or Pin Isnot Invalde It Returns (LOGIC_LOW)
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <GPIO_readPin+0x6>
    1588:	00 d0       	rcall	.+0      	; 0x158a <GPIO_readPin+0x8>
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_readPin+0xa>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	18 f4       	brcc	.+6      	; 0x15a0 <GPIO_readPin+0x1e>
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	10 f0       	brcs	.+4      	; 0x15a4 <GPIO_readPin+0x22>
		return LOGIC_LOW;
    15a0:	1d 82       	std	Y+5, r1	; 0x05
    15a2:	6d c0       	rjmp	.+218    	; 0x167e <GPIO_readPin+0xfc>
	} else {
		switch (port_num) {
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	4b 81       	ldd	r20, Y+3	; 0x03
    15b0:	5c 81       	ldd	r21, Y+4	; 0x04
    15b2:	41 30       	cpi	r20, 0x01	; 1
    15b4:	51 05       	cpc	r21, r1
    15b6:	49 f1       	breq	.+82     	; 0x160a <GPIO_readPin+0x88>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	91 05       	cpc	r25, r1
    15c0:	34 f4       	brge	.+12     	; 0x15ce <GPIO_readPin+0x4c>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	21 15       	cp	r18, r1
    15c8:	31 05       	cpc	r19, r1
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <GPIO_readPin+0x62>
    15cc:	57 c0       	rjmp	.+174    	; 0x167c <GPIO_readPin+0xfa>
    15ce:	4b 81       	ldd	r20, Y+3	; 0x03
    15d0:	5c 81       	ldd	r21, Y+4	; 0x04
    15d2:	42 30       	cpi	r20, 0x02	; 2
    15d4:	51 05       	cpc	r21, r1
    15d6:	61 f1       	breq	.+88     	; 0x1630 <GPIO_readPin+0xae>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	d1 f1       	breq	.+116    	; 0x1656 <GPIO_readPin+0xd4>
    15e2:	4c c0       	rjmp	.+152    	; 0x167c <GPIO_readPin+0xfa>
		case PORTA_ID:
			return GET_BIT(PINA, pin_num);
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a9 01       	movw	r20, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_readPin+0x7a>
    15f8:	55 95       	asr	r21
    15fa:	47 95       	ror	r20
    15fc:	8a 95       	dec	r24
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_readPin+0x76>
    1600:	ca 01       	movw	r24, r20
    1602:	58 2f       	mov	r21, r24
    1604:	51 70       	andi	r21, 0x01	; 1
    1606:	5d 83       	std	Y+5, r21	; 0x05
    1608:	3a c0       	rjmp	.+116    	; 0x167e <GPIO_readPin+0xfc>
		case PORTB_ID:
			return GET_BIT(PINB, pin_num);
    160a:	e6 e3       	ldi	r30, 0x36	; 54
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_readPin+0xa0>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_readPin+0x9c>
    1626:	ca 01       	movw	r24, r20
    1628:	58 2f       	mov	r21, r24
    162a:	51 70       	andi	r21, 0x01	; 1
    162c:	5d 83       	std	Y+5, r21	; 0x05
    162e:	27 c0       	rjmp	.+78     	; 0x167e <GPIO_readPin+0xfc>
		case PORTC_ID:
			return GET_BIT(PINC, pin_num);
    1630:	e3 e3       	ldi	r30, 0x33	; 51
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a9 01       	movw	r20, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_readPin+0xc6>
    1644:	55 95       	asr	r21
    1646:	47 95       	ror	r20
    1648:	8a 95       	dec	r24
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_readPin+0xc2>
    164c:	ca 01       	movw	r24, r20
    164e:	58 2f       	mov	r21, r24
    1650:	51 70       	andi	r21, 0x01	; 1
    1652:	5d 83       	std	Y+5, r21	; 0x05
    1654:	14 c0       	rjmp	.+40     	; 0x167e <GPIO_readPin+0xfc>
		case PORTD_ID:
			return GET_BIT(PIND, pin_num);
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_readPin+0xec>
    166a:	55 95       	asr	r21
    166c:	47 95       	ror	r20
    166e:	8a 95       	dec	r24
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_readPin+0xe8>
    1672:	ca 01       	movw	r24, r20
    1674:	58 2f       	mov	r21, r24
    1676:	51 70       	andi	r21, 0x01	; 1
    1678:	5d 83       	std	Y+5, r21	; 0x05
    167a:	01 c0       	rjmp	.+2      	; 0x167e <GPIO_readPin+0xfc>
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_readPin+0x100>
		}
	}
}
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	8e 83       	std	Y+6, r24	; 0x06
    1682:	8e 81       	ldd	r24, Y+6	; 0x06
    1684:	26 96       	adiw	r28, 0x06	; 6
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <GPIO_setupPortDirection>:
 * input :(port_num,The Direction Of Port (PORT_INPUT/PORT_OUTPUT))
 * output: None
 * Note : If The Input Port Isnot Correct It Handle Nothing
 */

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_setupPortDirection+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <GPIO_setupPortDirection+0x8>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS) {
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	90 f5       	brcc	.+100    	; 0x1710 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		switch (port_num) {
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3c 83       	std	Y+4, r19	; 0x04
    16b4:	2b 83       	std	Y+3, r18	; 0x03
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	d1 f0       	breq	.+52     	; 0x16f4 <GPIO_setupPortDirection+0x5e>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <GPIO_setupPortDirection+0x3e>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <GPIO_setupPortDirection+0x54>
    16d2:	1e c0       	rjmp	.+60     	; 0x1710 <GPIO_setupPortDirection+0x7a>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	81 f0       	breq	.+32     	; 0x16fe <GPIO_setupPortDirection+0x68>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <GPIO_setupPortDirection+0x72>
    16e8:	13 c0       	rjmp	.+38     	; 0x1710 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    16ea:	ea e3       	ldi	r30, 0x3A	; 58
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	80 83       	st	Z, r24
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16f4:	e7 e3       	ldi	r30, 0x37	; 55
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 83       	st	Z, r24
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16fe:	e4 e3       	ldi	r30, 0x34	; 52
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 83       	st	Z, r24
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1708:	e1 e3       	ldi	r30, 0x31	; 49
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
			break;

		}
	}
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <GPIO_writePort>:
 * Write The Corresponding Value At Port
 * input : (port_number,value Of Port )
 * output : None
 * Note : If The PortNumber Is Invalide The Function Handle Nothing
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <GPIO_writePort+0x6>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <GPIO_writePort+0x8>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS) {
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	90 f5       	brcc	.+100    	; 0x1798 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		switch (port_num) {
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3c 83       	std	Y+4, r19	; 0x04
    173c:	2b 83       	std	Y+3, r18	; 0x03
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	d1 f0       	breq	.+52     	; 0x177c <GPIO_writePort+0x5e>
    1748:	2b 81       	ldd	r18, Y+3	; 0x03
    174a:	3c 81       	ldd	r19, Y+4	; 0x04
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <GPIO_writePort+0x3e>
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f0       	breq	.+24     	; 0x1772 <GPIO_writePort+0x54>
    175a:	1e c0       	rjmp	.+60     	; 0x1798 <GPIO_writePort+0x7a>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	81 f0       	breq	.+32     	; 0x1786 <GPIO_writePort+0x68>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	81 f0       	breq	.+32     	; 0x1790 <GPIO_writePort+0x72>
    1770:	13 c0       	rjmp	.+38     	; 0x1798 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1772:	eb e3       	ldi	r30, 0x3B	; 59
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	80 83       	st	Z, r24
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    177c:	e8 e3       	ldi	r30, 0x38	; 56
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	80 83       	st	Z, r24
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1786:	e5 e3       	ldi	r30, 0x35	; 53
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	80 83       	st	Z, r24
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1790:	e2 e3       	ldi	r30, 0x32	; 50
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	80 83       	st	Z, r24
			break;
		}
	}
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <GPIO_readPort>:
 * Read The Corresponding Value From Port
 * input : (port_number )
 * output: The Value Of Port
 * Note : If The Port Number Is Invalide  It Return (Zero )
 */
uint8 GPIO_readPort(uint8 port_num) {
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <GPIO_readPort+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <GPIO_readPort+0x8>
    17ae:	0f 92       	push	r0
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01
	if (port_num >= NUM_OF_PORTS) {
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	10 f0       	brcs	.+4      	; 0x17c0 <GPIO_readPort+0x1a>
		return 0;
    17bc:	1c 82       	std	Y+4, r1	; 0x04
    17be:	34 c0       	rjmp	.+104    	; 0x1828 <GPIO_readPort+0x82>
	} else {
		switch (port_num) {
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3b 83       	std	Y+3, r19	; 0x03
    17c8:	2a 83       	std	Y+2, r18	; 0x02
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	9b 81       	ldd	r25, Y+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	91 05       	cpc	r25, r1
    17d2:	d1 f0       	breq	.+52     	; 0x1808 <GPIO_readPort+0x62>
    17d4:	2a 81       	ldd	r18, Y+2	; 0x02
    17d6:	3b 81       	ldd	r19, Y+3	; 0x03
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <GPIO_readPort+0x42>
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	61 f0       	breq	.+24     	; 0x17fe <GPIO_readPort+0x58>
    17e6:	1f c0       	rjmp	.+62     	; 0x1826 <GPIO_readPort+0x80>
    17e8:	2a 81       	ldd	r18, Y+2	; 0x02
    17ea:	3b 81       	ldd	r19, Y+3	; 0x03
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	81 f0       	breq	.+32     	; 0x1812 <GPIO_readPort+0x6c>
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	91 05       	cpc	r25, r1
    17fa:	81 f0       	breq	.+32     	; 0x181c <GPIO_readPort+0x76>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <GPIO_readPort+0x80>
		case PORTA_ID:
			return PINA;
    17fe:	e9 e3       	ldi	r30, 0x39	; 57
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	90 81       	ld	r25, Z
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	10 c0       	rjmp	.+32     	; 0x1828 <GPIO_readPort+0x82>
		case PORTB_ID:
			return PINB;
    1808:	e6 e3       	ldi	r30, 0x36	; 54
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	20 81       	ld	r18, Z
    180e:	2c 83       	std	Y+4, r18	; 0x04
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <GPIO_readPort+0x82>
		case PORTC_ID:
			return PINC;
    1812:	e3 e3       	ldi	r30, 0x33	; 51
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	30 81       	ld	r19, Z
    1818:	3c 83       	std	Y+4, r19	; 0x04
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <GPIO_readPort+0x82>
		case PORTD_ID:
			return PIND;
    181c:	e0 e3       	ldi	r30, 0x30	; 48
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8c 83       	std	Y+4, r24	; 0x04
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <GPIO_readPort+0x82>
    1826:	02 c0       	rjmp	.+4      	; 0x182c <GPIO_readPort+0x86>
		}
	}
}
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	9d 83       	std	Y+5, r25	; 0x05
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <main>:
uint8 g_firsttimepasswrod = 0 ;
uint8 g_faulttimes = 0 ;


int main(void)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	e6 97       	sbiw	r28, 0x36	; 54
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[PASS_SIZE] = {0};
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	fe 01       	movw	r30, r28
    1856:	32 96       	adiw	r30, 0x02	; 2
    1858:	df 01       	movw	r26, r30
    185a:	98 2f       	mov	r25, r24
    185c:	1d 92       	st	X+, r1
    185e:	9a 95       	dec	r25
    1860:	e9 f7       	brne	.-6      	; 0x185c <main+0x1e>
	uint8 pass2[PASS_SIZE] = {0};
    1862:	85 e0       	ldi	r24, 0x05	; 5
    1864:	fe 01       	movw	r30, r28
    1866:	37 96       	adiw	r30, 0x07	; 7
    1868:	df 01       	movw	r26, r30
    186a:	98 2f       	mov	r25, r24
    186c:	1d 92       	st	X+, r1
    186e:	9a 95       	dec	r25
    1870:	e9 f7       	brne	.-6      	; 0x186c <main+0x2e>
	uint8 mainoption = 0 ;
    1872:	19 82       	std	Y+1, r1	; 0x01
	/*  ( Initilization Of Timer To Use It As Delay To Our Functions )
	 * (TIMER0 ) - (CTC_MODE) - (CTC_NORMAL OC0 Disconnected )
	 * (No Pwm) - (No ICU) - (FCPU_64)- Initial val = 0 - comapre val = 0
	 */
	TIMER_configType timer0_config = { TIMER0, CTC, CTC_NORMAL, PWM_NORMAL,
			TIMER1_FALLING_EDGE, FCPU_64, 0, 0 };
    1874:	de 01       	movw	r26, r28
    1876:	1c 96       	adiw	r26, 0x0c	; 12
    1878:	b9 a7       	std	Y+41, r27	; 0x29
    187a:	a8 a7       	std	Y+40, r26	; 0x28
    187c:	e8 e8       	ldi	r30, 0x88	; 136
    187e:	f1 e0       	ldi	r31, 0x01	; 1
    1880:	fb a7       	std	Y+43, r31	; 0x2b
    1882:	ea a7       	std	Y+42, r30	; 0x2a
    1884:	fa e0       	ldi	r31, 0x0A	; 10
    1886:	fc a7       	std	Y+44, r31	; 0x2c
    1888:	aa a5       	ldd	r26, Y+42	; 0x2a
    188a:	bb a5       	ldd	r27, Y+43	; 0x2b
    188c:	0c 90       	ld	r0, X
    188e:	ea a5       	ldd	r30, Y+42	; 0x2a
    1890:	fb a5       	ldd	r31, Y+43	; 0x2b
    1892:	31 96       	adiw	r30, 0x01	; 1
    1894:	fb a7       	std	Y+43, r31	; 0x2b
    1896:	ea a7       	std	Y+42, r30	; 0x2a
    1898:	a8 a5       	ldd	r26, Y+40	; 0x28
    189a:	b9 a5       	ldd	r27, Y+41	; 0x29
    189c:	0c 92       	st	X, r0
    189e:	e8 a5       	ldd	r30, Y+40	; 0x28
    18a0:	f9 a5       	ldd	r31, Y+41	; 0x29
    18a2:	31 96       	adiw	r30, 0x01	; 1
    18a4:	f9 a7       	std	Y+41, r31	; 0x29
    18a6:	e8 a7       	std	Y+40, r30	; 0x28
    18a8:	fc a5       	ldd	r31, Y+44	; 0x2c
    18aa:	f1 50       	subi	r31, 0x01	; 1
    18ac:	fc a7       	std	Y+44, r31	; 0x2c
    18ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    18b0:	88 23       	and	r24, r24
    18b2:	51 f7       	brne	.-44     	; 0x1888 <main+0x4a>
	/*
	 * Timer2 Of Pwm Signal Of Motor
	 */
	TIMER_configType timer2_config = { TIMER2, FAST_PWM, CTC_NORMAL, PWM_NON_INVERTING,
				TIMER1_FALLING_EDGE, FCPU_64, 0, 0 };
    18b4:	de 01       	movw	r26, r28
    18b6:	56 96       	adiw	r26, 0x16	; 22
    18b8:	be a7       	std	Y+46, r27	; 0x2e
    18ba:	ad a7       	std	Y+45, r26	; 0x2d
    18bc:	ee e7       	ldi	r30, 0x7E	; 126
    18be:	f1 e0       	ldi	r31, 0x01	; 1
    18c0:	f8 ab       	std	Y+48, r31	; 0x30
    18c2:	ef a7       	std	Y+47, r30	; 0x2f
    18c4:	fa e0       	ldi	r31, 0x0A	; 10
    18c6:	f9 ab       	std	Y+49, r31	; 0x31
    18c8:	af a5       	ldd	r26, Y+47	; 0x2f
    18ca:	b8 a9       	ldd	r27, Y+48	; 0x30
    18cc:	0c 90       	ld	r0, X
    18ce:	ef a5       	ldd	r30, Y+47	; 0x2f
    18d0:	f8 a9       	ldd	r31, Y+48	; 0x30
    18d2:	31 96       	adiw	r30, 0x01	; 1
    18d4:	f8 ab       	std	Y+48, r31	; 0x30
    18d6:	ef a7       	std	Y+47, r30	; 0x2f
    18d8:	ad a5       	ldd	r26, Y+45	; 0x2d
    18da:	be a5       	ldd	r27, Y+46	; 0x2e
    18dc:	0c 92       	st	X, r0
    18de:	ed a5       	ldd	r30, Y+45	; 0x2d
    18e0:	fe a5       	ldd	r31, Y+46	; 0x2e
    18e2:	31 96       	adiw	r30, 0x01	; 1
    18e4:	fe a7       	std	Y+46, r31	; 0x2e
    18e6:	ed a7       	std	Y+45, r30	; 0x2d
    18e8:	f9 a9       	ldd	r31, Y+49	; 0x31
    18ea:	f1 50       	subi	r31, 0x01	; 1
    18ec:	f9 ab       	std	Y+49, r31	; 0x31
    18ee:	89 a9       	ldd	r24, Y+49	; 0x31
    18f0:	88 23       	and	r24, r24
    18f2:	51 f7       	brne	.-44     	; 0x18c8 <main+0x8a>
	/*(Initialization Of USART )
	 * Baudrate - Synchrounization - parity - stopbit - size of data
	 */
	USART_configType usart_config = { 9600, ASYNCHRONOUS, OFF, BIT_1, BIT_8 };
    18f4:	de 01       	movw	r26, r28
    18f6:	90 96       	adiw	r26, 0x20	; 32
    18f8:	bb ab       	std	Y+51, r27	; 0x33
    18fa:	aa ab       	std	Y+50, r26	; 0x32
    18fc:	e8 e7       	ldi	r30, 0x78	; 120
    18fe:	f1 e0       	ldi	r31, 0x01	; 1
    1900:	fd ab       	std	Y+53, r31	; 0x35
    1902:	ec ab       	std	Y+52, r30	; 0x34
    1904:	f6 e0       	ldi	r31, 0x06	; 6
    1906:	fe ab       	std	Y+54, r31	; 0x36
    1908:	ac a9       	ldd	r26, Y+52	; 0x34
    190a:	bd a9       	ldd	r27, Y+53	; 0x35
    190c:	0c 90       	ld	r0, X
    190e:	ec a9       	ldd	r30, Y+52	; 0x34
    1910:	fd a9       	ldd	r31, Y+53	; 0x35
    1912:	31 96       	adiw	r30, 0x01	; 1
    1914:	fd ab       	std	Y+53, r31	; 0x35
    1916:	ec ab       	std	Y+52, r30	; 0x34
    1918:	aa a9       	ldd	r26, Y+50	; 0x32
    191a:	bb a9       	ldd	r27, Y+51	; 0x33
    191c:	0c 92       	st	X, r0
    191e:	ea a9       	ldd	r30, Y+50	; 0x32
    1920:	fb a9       	ldd	r31, Y+51	; 0x33
    1922:	31 96       	adiw	r30, 0x01	; 1
    1924:	fb ab       	std	Y+51, r31	; 0x33
    1926:	ea ab       	std	Y+50, r30	; 0x32
    1928:	fe a9       	ldd	r31, Y+54	; 0x36
    192a:	f1 50       	subi	r31, 0x01	; 1
    192c:	fe ab       	std	Y+54, r31	; 0x36
    192e:	8e a9       	ldd	r24, Y+54	; 0x36
    1930:	88 23       	and	r24, r24
    1932:	51 f7       	brne	.-44     	; 0x1908 <main+0xca>
	/*
	 * Initilization Of TWI
	 * Speed 400K & Adress 0x02
	 */

	TWI_configType twi_config = {0x02,K_400};
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	8e a3       	std	Y+38, r24	; 0x26
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8f a3       	std	Y+39, r24	; 0x27

	/*
	 * Initilizations Functions
	 */
	BUZZER_init();
    193c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <BUZZER_init>
	DCMOTOR_init();
    1940:	0e 94 db 06 	call	0xdb6	; 0xdb6 <DCMOTOR_init>
	TWI_init(&twi_config);
    1944:	ce 01       	movw	r24, r28
    1946:	86 96       	adiw	r24, 0x26	; 38
    1948:	0e 94 01 15 	call	0x2a02	; 0x2a02 <TWI_init>
	TIMER_init(&timer0_config);
    194c:	ce 01       	movw	r24, r28
    194e:	0c 96       	adiw	r24, 0x0c	; 12
    1950:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <TIMER_init>
	USART_init(&usart_config);
    1954:	ce 01       	movw	r24, r28
    1956:	80 96       	adiw	r24, 0x20	; 32
    1958:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <USART_init>
	TIMER_init(&timer2_config);
    195c:	ce 01       	movw	r24, r28
    195e:	46 96       	adiw	r24, 0x16	; 22
    1960:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <TIMER_init>

	while(1)
	{
		if (g_firsttimepasswrod == 0)
    1964:	80 91 92 01 	lds	r24, 0x0192
    1968:	88 23       	and	r24, r24
    196a:	71 f5       	brne	.+92     	; 0x19c8 <main+0x18a>
		{
			/* Get 1st Password Until ' = ' */
			get_password(pass1);
    196c:	ce 01       	movw	r24, r28
    196e:	02 96       	adiw	r24, 0x02	; 2
    1970:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <get_password>
			/* Get 2nd Password Until ' = ' */
			get_password(pass2);
    1974:	ce 01       	movw	r24, r28
    1976:	07 96       	adiw	r24, 0x07	; 7
    1978:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <get_password>
			/* Check If Password Is Equal */
			/* Wait Until MC1 Be Ready To Get Result */
			while (USART_recieveByte() != MC1_READY);
    197c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    1980:	80 31       	cpi	r24, 0x10	; 16
    1982:	e1 f7       	brne	.-8      	; 0x197c <main+0x13e>


			if (password_check(pass1, pass2))
    1984:	ce 01       	movw	r24, r28
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	9e 01       	movw	r18, r28
    198a:	29 5f       	subi	r18, 0xF9	; 249
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
    198e:	b9 01       	movw	r22, r18
    1990:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <password_check>
    1994:	88 23       	and	r24, r24
    1996:	89 f0       	breq	.+34     	; 0x19ba <main+0x17c>
			{
				USART_sendString("MATCH#");
    1998:	80 e6       	ldi	r24, 0x60	; 96
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <USART_sendString>
				g_firsttimepasswrod = 1 ;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	80 93 92 01 	sts	0x0192, r24

				/*Save Password At EEPROM */
				EEPROM_writeCombinedMSG(EEPROM_ADDRESS, pass1, PASS_SIZE);
    19a6:	9e 01       	movw	r18, r28
    19a8:	2e 5f       	subi	r18, 0xFE	; 254
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	81 e1       	ldi	r24, 0x11	; 17
    19ae:	93 e0       	ldi	r25, 0x03	; 3
    19b0:	b9 01       	movw	r22, r18
    19b2:	45 e0       	ldi	r20, 0x05	; 5
    19b4:	0e 94 fb 07 	call	0xff6	; 0xff6 <EEPROM_writeCombinedMSG>
    19b8:	d5 cf       	rjmp	.-86     	; 0x1964 <main+0x126>
			}
			else
			{
				USART_sendString("UNMATCH#");
    19ba:	87 e6       	ldi	r24, 0x67	; 103
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <USART_sendString>
				g_firsttimepasswrod = 0 ;
    19c2:	10 92 92 01 	sts	0x0192, r1
    19c6:	ce cf       	rjmp	.-100    	; 0x1964 <main+0x126>
			}
		}
		else
		{
			/* Get Password From User & save it in pass1 */
			get_password(pass1);
    19c8:	ce 01       	movw	r24, r28
    19ca:	02 96       	adiw	r24, 0x02	; 2
    19cc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <get_password>
			/* Get User Option */
			mainoption = USART_recieveByte();
    19d0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    19d4:	89 83       	std	Y+1, r24	; 0x01
			/*Get Password From EEPROM  & Save It In Pass2*/
			EEPROM_readCombinedMSG(EEPROM_ADDRESS, pass2, PASS_SIZE);
    19d6:	9e 01       	movw	r18, r28
    19d8:	29 5f       	subi	r18, 0xF9	; 249
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	81 e1       	ldi	r24, 0x11	; 17
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	b9 01       	movw	r22, r18
    19e2:	45 e0       	ldi	r20, 0x05	; 5
    19e4:	0e 94 56 08 	call	0x10ac	; 0x10ac <EEPROM_readCombinedMSG>



			if (mainoption == '+')
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	8b 32       	cpi	r24, 0x2B	; 43
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <main+0x1b2>
    19ee:	58 c0       	rjmp	.+176    	; 0x1aa0 <main+0x262>
			{
				/* Check Password */
				if (password_check(pass1, pass2))
    19f0:	ce 01       	movw	r24, r28
    19f2:	02 96       	adiw	r24, 0x02	; 2
    19f4:	9e 01       	movw	r18, r28
    19f6:	29 5f       	subi	r18, 0xF9	; 249
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	b9 01       	movw	r22, r18
    19fc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <password_check>
    1a00:	88 23       	and	r24, r24
    1a02:	59 f1       	breq	.+86     	; 0x1a5a <main+0x21c>
				{
					/* Wait Until MC1 Be Ready To Get Result */
					while (USART_recieveByte() != MC1_READY);
    1a04:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    1a08:	80 31       	cpi	r24, 0x10	; 16
    1a0a:	e1 f7       	brne	.-8      	; 0x1a04 <main+0x1c6>
					/* Tell MC1 That Pw Is Match */
					USART_sendString("MATCH#");
    1a0c:	80 e6       	ldi	r24, 0x60	; 96
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <USART_sendString>
					/* Rotate Dc Motor For 15 Sec CW */
					DCMOTOR_rotate(100, CW_MOTOR);
    1a14:	84 e6       	ldi	r24, 0x64	; 100
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DCMOTOR_rotate>
					TIMER0_delay_ms(15000);
    1a1c:	28 e9       	ldi	r18, 0x98	; 152
    1a1e:	3a e3       	ldi	r19, 0x3A	; 58
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 65 13 	call	0x26ca	; 0x26ca <TIMER0_delay_ms>
					/* Rotet Dc Motor For 15 Sec CCW */
					DCMOTOR_rotate(100, CCW_MOTOR);
    1a30:	84 e6       	ldi	r24, 0x64	; 100
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DCMOTOR_rotate>
					TIMER0_delay_ms(15000);
    1a38:	28 e9       	ldi	r18, 0x98	; 152
    1a3a:	3a e3       	ldi	r19, 0x3A	; 58
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 65 13 	call	0x26ca	; 0x26ca <TIMER0_delay_ms>
					DCMOTOR_rotate(100, OFF_MOTOR);
    1a4c:	84 e6       	ldi	r24, 0x64	; 100
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DCMOTOR_rotate>
					g_faulttimes = 0;
    1a54:	10 92 93 01 	sts	0x0193, r1
    1a58:	85 cf       	rjmp	.-246    	; 0x1964 <main+0x126>
				}
				else
				{
					/* Wait Until MC1 Be Ready To Get Result */
					while (USART_recieveByte() != MC1_READY);
    1a5a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    1a5e:	80 31       	cpi	r24, 0x10	; 16
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <main+0x21c>
					/*Tell MC1 That Pw Isnot Match */
					USART_sendString("UNMATCH#");
    1a62:	87 e6       	ldi	r24, 0x67	; 103
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <USART_sendString>
					g_faulttimes++;
    1a6a:	80 91 93 01 	lds	r24, 0x0193
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	80 93 93 01 	sts	0x0193, r24

					if (g_faulttimes == 3)
    1a74:	80 91 93 01 	lds	r24, 0x0193
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <main+0x240>
    1a7c:	73 cf       	rjmp	.-282    	; 0x1964 <main+0x126>
					{
						/* On Buzzer For 1 Mint */
						BUZZER_on();
    1a7e:	0e 94 c3 06 	call	0xd86	; 0xd86 <BUZZER_on>
						TIMER0_delay_ms(60000);
    1a82:	20 e6       	ldi	r18, 0x60	; 96
    1a84:	3a ee       	ldi	r19, 0xEA	; 234
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 65 13 	call	0x26ca	; 0x26ca <TIMER0_delay_ms>
						BUZZER_off();
    1a96:	0e 94 cf 06 	call	0xd9e	; 0xd9e <BUZZER_off>
						g_faulttimes = 0;
    1a9a:	10 92 93 01 	sts	0x0193, r1
    1a9e:	62 cf       	rjmp	.-316    	; 0x1964 <main+0x126>
					}
				}
			}
			else
			{
				if (password_check(pass1, pass2))
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	02 96       	adiw	r24, 0x02	; 2
    1aa4:	9e 01       	movw	r18, r28
    1aa6:	29 5f       	subi	r18, 0xF9	; 249
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	b9 01       	movw	r22, r18
    1aac:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <password_check>
    1ab0:	88 23       	and	r24, r24
    1ab2:	69 f0       	breq	.+26     	; 0x1ace <main+0x290>
				{
					/* Wait Until MC1 Be Ready To Get Result */
					while (USART_recieveByte() != MC1_READY);
    1ab4:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    1ab8:	80 31       	cpi	r24, 0x10	; 16
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <main+0x276>
					/* Tell MC1 That Pw Is Match */
					USART_sendString("MATCH#");
    1abc:	80 e6       	ldi	r24, 0x60	; 96
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <USART_sendString>
					/* Repeat Step 1 Again */
					g_firsttimepasswrod = 0 ;
    1ac4:	10 92 92 01 	sts	0x0192, r1
					g_faulttimes = 0 ;
    1ac8:	10 92 93 01 	sts	0x0193, r1
    1acc:	4b cf       	rjmp	.-362    	; 0x1964 <main+0x126>
				}
				else
				{
					/* Wait Until MC1 Be Ready To Get Result */
					while (USART_recieveByte() != MC1_READY);
    1ace:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    1ad2:	80 31       	cpi	r24, 0x10	; 16
    1ad4:	e1 f7       	brne	.-8      	; 0x1ace <main+0x290>
					/*Tell MC1 That Pw Isnot Match */
					USART_sendString("UNMATCH#");
    1ad6:	87 e6       	ldi	r24, 0x67	; 103
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <USART_sendString>
					g_faulttimes++;
    1ade:	80 91 93 01 	lds	r24, 0x0193
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 93 01 	sts	0x0193, r24

					if (g_faulttimes == 3) {
    1ae8:	80 91 93 01 	lds	r24, 0x0193
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <main+0x2b4>
    1af0:	39 cf       	rjmp	.-398    	; 0x1964 <main+0x126>
						/* On Buzzer For 1 Mint */
						BUZZER_on();
    1af2:	0e 94 c3 06 	call	0xd86	; 0xd86 <BUZZER_on>
						TIMER0_delay_ms(60000);
    1af6:	20 e6       	ldi	r18, 0x60	; 96
    1af8:	3a ee       	ldi	r19, 0xEA	; 234
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 65 13 	call	0x26ca	; 0x26ca <TIMER0_delay_ms>
						BUZZER_off();
    1b0a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <BUZZER_off>
						g_faulttimes = 0;
    1b0e:	10 92 93 01 	sts	0x0193, r1
    1b12:	28 cf       	rjmp	.-432    	; 0x1964 <main+0x126>

00001b14 <get_password>:

/*
 * Get Password Until '=' And Save It At Array
 */
void get_password(uint8 *password)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <get_password+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <get_password+0x8>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9c 83       	std	Y+4, r25	; 0x04
    1b22:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1b24:	1a 82       	std	Y+2, r1	; 0x02
	uint8 data = 0;
    1b26:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		/* Recive Data */
		data=USART_recieveByte();
    1b28:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    1b2c:	89 83       	std	Y+1, r24	; 0x01
		if (data == '=')
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	8d 33       	cpi	r24, 0x3D	; 61
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <get_password+0x3c>
		{
			return ;
		}
		else
		{
			password[i] = data ;
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e2 0f       	add	r30, r18
    1b42:	f3 1f       	adc	r31, r19
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	80 83       	st	Z, r24
			i++ ;
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	8f 5f       	subi	r24, 0xFF	; 255
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
    1b4e:	ec cf       	rjmp	.-40     	; 0x1b28 <get_password+0x14>
		}

	}
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <password_check>:
 *  Check Password Assurance
 *  if password Is Match Return 1
 *  if Password Isnot Match Return 0
 */
uint8 password_check (uint8 *password1 , uint8 *password2)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <password_check+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <password_check+0x8>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <password_check+0xa>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9b 83       	std	Y+3, r25	; 0x03
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    1b70:	7d 83       	std	Y+5, r23	; 0x05
    1b72:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0 ;
    1b74:	19 82       	std	Y+1, r1	; 0x01
	for ( i = 0 ; i< PASS_SIZE ; i++)
    1b76:	19 82       	std	Y+1, r1	; 0x01
    1b78:	19 c0       	rjmp	.+50     	; 0x1bac <password_check+0x4e>
	{
		if ( password1 [i]  != password2[i])
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	fc 01       	movw	r30, r24
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	40 81       	ld	r20, Z
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	fc 01       	movw	r30, r24
    1b98:	e2 0f       	add	r30, r18
    1b9a:	f3 1f       	adc	r31, r19
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 17       	cp	r20, r24
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <password_check+0x48>
		{
			return 0 ;
    1ba2:	1e 82       	std	Y+6, r1	; 0x06
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <password_check+0x58>
 *  if Password Isnot Match Return 0
 */
uint8 password_check (uint8 *password1 , uint8 *password2)
{
	uint8 i = 0 ;
	for ( i = 0 ; i< PASS_SIZE ; i++)
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	85 30       	cpi	r24, 0x05	; 5
    1bb0:	20 f3       	brcs	.-56     	; 0x1b7a <password_check+0x1c>
		else
		{
			/* Do Nothing */
		}
	}
	return 1 ;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	8e 83       	std	Y+6, r24	; 0x06
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1bb8:	26 96       	adiw	r28, 0x06	; 6
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1bca:	1f 92       	push	r1
    1bcc:	0f 92       	push	r0
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	0f 92       	push	r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	2f 93       	push	r18
    1bd6:	3f 93       	push	r19
    1bd8:	4f 93       	push	r20
    1bda:	5f 93       	push	r21
    1bdc:	6f 93       	push	r22
    1bde:	7f 93       	push	r23
    1be0:	8f 93       	push	r24
    1be2:	9f 93       	push	r25
    1be4:	af 93       	push	r26
    1be6:	bf 93       	push	r27
    1be8:	ef 93       	push	r30
    1bea:	ff 93       	push	r31
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR)
    1bf4:	80 91 94 01 	lds	r24, 0x0194
    1bf8:	90 91 95 01 	lds	r25, 0x0195
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <__vector_9+0x40>
	{
		(*g_timer0_callBackPtr)();
    1c00:	e0 91 94 01 	lds	r30, 0x0194
    1c04:	f0 91 95 01 	lds	r31, 0x0195
    1c08:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	ff 91       	pop	r31
    1c10:	ef 91       	pop	r30
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	0f 92       	push	r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	2f 93       	push	r18
    1c3c:	3f 93       	push	r19
    1c3e:	4f 93       	push	r20
    1c40:	5f 93       	push	r21
    1c42:	6f 93       	push	r22
    1c44:	7f 93       	push	r23
    1c46:	8f 93       	push	r24
    1c48:	9f 93       	push	r25
    1c4a:	af 93       	push	r26
    1c4c:	bf 93       	push	r27
    1c4e:	ef 93       	push	r30
    1c50:	ff 93       	push	r31
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR)
    1c5a:	80 91 94 01 	lds	r24, 0x0194
    1c5e:	90 91 95 01 	lds	r25, 0x0195
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <__vector_19+0x40>
	{
		(*g_timer0_callBackPtr)();
    1c66:	e0 91 94 01 	lds	r30, 0x0194
    1c6a:	f0 91 95 01 	lds	r31, 0x0195
    1c6e:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	ff 91       	pop	r31
    1c76:	ef 91       	pop	r30
    1c78:	bf 91       	pop	r27
    1c7a:	af 91       	pop	r26
    1c7c:	9f 91       	pop	r25
    1c7e:	8f 91       	pop	r24
    1c80:	7f 91       	pop	r23
    1c82:	6f 91       	pop	r22
    1c84:	5f 91       	pop	r21
    1c86:	4f 91       	pop	r20
    1c88:	3f 91       	pop	r19
    1c8a:	2f 91       	pop	r18
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	0f 90       	pop	r0
    1c92:	1f 90       	pop	r1
    1c94:	18 95       	reti

00001c96 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	2f 93       	push	r18
    1ca2:	3f 93       	push	r19
    1ca4:	4f 93       	push	r20
    1ca6:	5f 93       	push	r21
    1ca8:	6f 93       	push	r22
    1caa:	7f 93       	push	r23
    1cac:	8f 93       	push	r24
    1cae:	9f 93       	push	r25
    1cb0:	af 93       	push	r26
    1cb2:	bf 93       	push	r27
    1cb4:	ef 93       	push	r30
    1cb6:	ff 93       	push	r31
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    1cc0:	80 91 96 01 	lds	r24, 0x0196
    1cc4:	90 91 97 01 	lds	r25, 0x0197
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	29 f0       	breq	.+10     	; 0x1cd6 <__vector_8+0x40>
	{
		(*g_timer1_callBackPtr)();
    1ccc:	e0 91 96 01 	lds	r30, 0x0196
    1cd0:	f0 91 97 01 	lds	r31, 0x0197
    1cd4:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	ff 91       	pop	r31
    1cdc:	ef 91       	pop	r30
    1cde:	bf 91       	pop	r27
    1ce0:	af 91       	pop	r26
    1ce2:	9f 91       	pop	r25
    1ce4:	8f 91       	pop	r24
    1ce6:	7f 91       	pop	r23
    1ce8:	6f 91       	pop	r22
    1cea:	5f 91       	pop	r21
    1cec:	4f 91       	pop	r20
    1cee:	3f 91       	pop	r19
    1cf0:	2f 91       	pop	r18
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	0f 90       	pop	r0
    1cf8:	1f 90       	pop	r1
    1cfa:	18 95       	reti

00001cfc <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1cfc:	1f 92       	push	r1
    1cfe:	0f 92       	push	r0
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	0f 92       	push	r0
    1d04:	11 24       	eor	r1, r1
    1d06:	2f 93       	push	r18
    1d08:	3f 93       	push	r19
    1d0a:	4f 93       	push	r20
    1d0c:	5f 93       	push	r21
    1d0e:	6f 93       	push	r22
    1d10:	7f 93       	push	r23
    1d12:	8f 93       	push	r24
    1d14:	9f 93       	push	r25
    1d16:	af 93       	push	r26
    1d18:	bf 93       	push	r27
    1d1a:	ef 93       	push	r30
    1d1c:	ff 93       	push	r31
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    1d26:	80 91 96 01 	lds	r24, 0x0196
    1d2a:	90 91 97 01 	lds	r25, 0x0197
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	29 f0       	breq	.+10     	; 0x1d3c <__vector_6+0x40>
	{
		(*g_timer1_callBackPtr)();
    1d32:	e0 91 96 01 	lds	r30, 0x0196
    1d36:	f0 91 97 01 	lds	r31, 0x0197
    1d3a:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	7f 91       	pop	r23
    1d4e:	6f 91       	pop	r22
    1d50:	5f 91       	pop	r21
    1d52:	4f 91       	pop	r20
    1d54:	3f 91       	pop	r19
    1d56:	2f 91       	pop	r18
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	0f 90       	pop	r0
    1d5e:	1f 90       	pop	r1
    1d60:	18 95       	reti

00001d62 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    1d62:	1f 92       	push	r1
    1d64:	0f 92       	push	r0
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	0f 92       	push	r0
    1d6a:	11 24       	eor	r1, r1
    1d6c:	2f 93       	push	r18
    1d6e:	3f 93       	push	r19
    1d70:	4f 93       	push	r20
    1d72:	5f 93       	push	r21
    1d74:	6f 93       	push	r22
    1d76:	7f 93       	push	r23
    1d78:	8f 93       	push	r24
    1d7a:	9f 93       	push	r25
    1d7c:	af 93       	push	r26
    1d7e:	bf 93       	push	r27
    1d80:	ef 93       	push	r30
    1d82:	ff 93       	push	r31
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    1d8c:	80 91 96 01 	lds	r24, 0x0196
    1d90:	90 91 97 01 	lds	r25, 0x0197
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <__vector_7+0x40>
	{
		(*g_timer1_callBackPtr)();
    1d98:	e0 91 96 01 	lds	r30, 0x0196
    1d9c:	f0 91 97 01 	lds	r31, 0x0197
    1da0:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	7f 91       	pop	r23
    1db4:	6f 91       	pop	r22
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <__vector_5>:
ISR(TIMER1_CAPT_vect)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    1df2:	80 91 96 01 	lds	r24, 0x0196
    1df6:	90 91 97 01 	lds	r25, 0x0197
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <__vector_5+0x40>
	{
		(*g_timer1_callBackPtr)();
    1dfe:	e0 91 96 01 	lds	r30, 0x0196
    1e02:	f0 91 97 01 	lds	r31, 0x0197
    1e06:	09 95       	icall
	else
	{
		/* Do Nothing */
	}

}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	9f 91       	pop	r25
    1e16:	8f 91       	pop	r24
    1e18:	7f 91       	pop	r23
    1e1a:	6f 91       	pop	r22
    1e1c:	5f 91       	pop	r21
    1e1e:	4f 91       	pop	r20
    1e20:	3f 91       	pop	r19
    1e22:	2f 91       	pop	r18
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    1e2e:	1f 92       	push	r1
    1e30:	0f 92       	push	r0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	0f 92       	push	r0
    1e36:	11 24       	eor	r1, r1
    1e38:	2f 93       	push	r18
    1e3a:	3f 93       	push	r19
    1e3c:	4f 93       	push	r20
    1e3e:	5f 93       	push	r21
    1e40:	6f 93       	push	r22
    1e42:	7f 93       	push	r23
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR)
    1e58:	80 91 98 01 	lds	r24, 0x0198
    1e5c:	90 91 99 01 	lds	r25, 0x0199
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <__vector_4+0x40>
		{
			(*g_timer2_callBackPtr)();
    1e64:	e0 91 98 01 	lds	r30, 0x0198
    1e68:	f0 91 99 01 	lds	r31, 0x0199
    1e6c:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	bf 91       	pop	r27
    1e78:	af 91       	pop	r26
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	7f 91       	pop	r23
    1e80:	6f 91       	pop	r22
    1e82:	5f 91       	pop	r21
    1e84:	4f 91       	pop	r20
    1e86:	3f 91       	pop	r19
    1e88:	2f 91       	pop	r18
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    1e94:	1f 92       	push	r1
    1e96:	0f 92       	push	r0
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	0f 92       	push	r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	5f 93       	push	r21
    1ea6:	6f 93       	push	r22
    1ea8:	7f 93       	push	r23
    1eaa:	8f 93       	push	r24
    1eac:	9f 93       	push	r25
    1eae:	af 93       	push	r26
    1eb0:	bf 93       	push	r27
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR)
    1ebe:	80 91 98 01 	lds	r24, 0x0198
    1ec2:	90 91 99 01 	lds	r25, 0x0199
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	29 f0       	breq	.+10     	; 0x1ed4 <__vector_3+0x40>
		{
			(*g_timer2_callBackPtr)();
    1eca:	e0 91 98 01 	lds	r30, 0x0198
    1ece:	f0 91 99 01 	lds	r31, 0x0199
    1ed2:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	bf 91       	pop	r27
    1ede:	af 91       	pop	r26
    1ee0:	9f 91       	pop	r25
    1ee2:	8f 91       	pop	r24
    1ee4:	7f 91       	pop	r23
    1ee6:	6f 91       	pop	r22
    1ee8:	5f 91       	pop	r21
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <TIMER_init>:
 * 8- Compare Value
 */
/* INPUT : Structure Of TIMER_configType */
/* OUTPUT : NONE */
void TIMER_init(const TIMER_configType *configptr)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <TIMER_init+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <TIMER_init+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
	/* Select TIMER ID */
	switch (configptr->timer_id)
    1f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0e:	80 81       	ld	r24, Z
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <TIMER_init+0x2a>
    1f22:	b5 c0       	rjmp	.+362    	; 0x208e <TIMER_init+0x194>
    1f24:	2b 81       	ldd	r18, Y+3	; 0x03
    1f26:	3c 81       	ldd	r19, Y+4	; 0x04
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <TIMER_init+0x36>
    1f2e:	e4 c1       	rjmp	.+968    	; 0x22f8 <TIMER_init+0x3fe>
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <TIMER_init+0x40>
    1f38:	88 c2       	rjmp	.+1296   	; 0x244a <TIMER_init+0x550>
	{
	case TIMER0 :
		/* Select Timer0_Modes */
		if ( configptr->timer_mode == NORMAL)
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	81 81       	ldd	r24, Z+1	; 0x01
    1f40:	88 23       	and	r24, r24
    1f42:	b1 f4       	brne	.+44     	; 0x1f70 <TIMER_init+0x76>
			/*Enable OverFlow Interrupt */
			#if TIMER0_OVF_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,TOIE0)
			#endif
			/* SET Non-PWM Pin */
			SET_BIT(TCCR0,FOC0);
    1f44:	a3 e5       	ldi	r26, 0x53	; 83
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e3 e5       	ldi	r30, 0x53	; 83
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 68       	ori	r24, 0x80	; 128
    1f50:	8c 93       	st	X, r24
			/*CLEAR Waveform Generations Pins */
			CLEAR_BIT(TCCR0,WGM00);
    1f52:	a3 e5       	ldi	r26, 0x53	; 83
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e3 e5       	ldi	r30, 0x53	; 83
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8f 7b       	andi	r24, 0xBF	; 191
    1f5e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    1f60:	a3 e5       	ldi	r26, 0x53	; 83
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e3 e5       	ldi	r30, 0x53	; 83
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	87 7f       	andi	r24, 0xF7	; 247
    1f6c:	8c 93       	st	X, r24
    1f6e:	64 c0       	rjmp	.+200    	; 0x2038 <TIMER_init+0x13e>
		}
		else if (configptr->timer_mode == CTC)
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	81 81       	ldd	r24, Z+1	; 0x01
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	89 f5       	brne	.+98     	; 0x1fdc <TIMER_init+0xe2>
			/* Enable Compare  Interrupt */
			#if TIMER0_CTC_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,OCIE0);
			#endif
			/* Set PB3 Timer0 PIN As Output */
			SET_BIT(DDRB,PB3);
    1f7a:	a7 e3       	ldi	r26, 0x37	; 55
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e7 e3       	ldi	r30, 0x37	; 55
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	88 60       	ori	r24, 0x08	; 8
    1f86:	8c 93       	st	X, r24
			/* SET Non-PWM Pin */
			SET_BIT(TCCR0, FOC0);
    1f88:	a3 e5       	ldi	r26, 0x53	; 83
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e3 e5       	ldi	r30, 0x53	; 83
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 68       	ori	r24, 0x80	; 128
    1f94:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			CLEAR_BIT(TCCR0,WGM00);
    1f96:	a3 e5       	ldi	r26, 0x53	; 83
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7b       	andi	r24, 0xBF	; 191
    1fa2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    1fa4:	a3 e5       	ldi	r26, 0x53	; 83
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e3 e5       	ldi	r30, 0x53	; 83
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	88 60       	ori	r24, 0x08	; 8
    1fb0:	8c 93       	st	X, r24
			/* Check Operation Of CTC Mode */
			TCCR0 = (TCCR0 & 0xCF) | ((configptr->ctc_mode) << COM00);
    1fb2:	a3 e5       	ldi	r26, 0x53	; 83
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e3 e5       	ldi	r30, 0x53	; 83
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	2f 7c       	andi	r18, 0xCF	; 207
    1fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	82 95       	swap	r24
    1fcc:	92 95       	swap	r25
    1fce:	90 7f       	andi	r25, 0xF0	; 240
    1fd0:	98 27       	eor	r25, r24
    1fd2:	80 7f       	andi	r24, 0xF0	; 240
    1fd4:	98 27       	eor	r25, r24
    1fd6:	82 2b       	or	r24, r18
    1fd8:	8c 93       	st	X, r24
    1fda:	2e c0       	rjmp	.+92     	; 0x2038 <TIMER_init+0x13e>
		}
		else if (configptr->timer_mode == FAST_PWM)
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe0:	81 81       	ldd	r24, Z+1	; 0x01
    1fe2:	83 30       	cpi	r24, 0x03	; 3
    1fe4:	49 f5       	brne	.+82     	; 0x2038 <TIMER_init+0x13e>
		{
			/* Set PB3 Timer0 PIN As Output */
			SET_BIT(DDRB, PB3);
    1fe6:	a7 e3       	ldi	r26, 0x37	; 55
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e7 e3       	ldi	r30, 0x37	; 55
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 60       	ori	r24, 0x08	; 8
    1ff2:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			SET_BIT(TCCR0, WGM00);
    1ff4:	a3 e5       	ldi	r26, 0x53	; 83
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e3 e5       	ldi	r30, 0x53	; 83
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 64       	ori	r24, 0x40	; 64
    2000:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    2002:	a3 e5       	ldi	r26, 0x53	; 83
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e3 e5       	ldi	r30, 0x53	; 83
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	88 60       	ori	r24, 0x08	; 8
    200e:	8c 93       	st	X, r24
			/* Check Operation Of PWM Mode */
			TCCR0 = (TCCR0 & 0xCF) | ((configptr->pwm_mode) << COM00);
    2010:	a3 e5       	ldi	r26, 0x53	; 83
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e3 e5       	ldi	r30, 0x53	; 83
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	28 2f       	mov	r18, r24
    201c:	2f 7c       	andi	r18, 0xCF	; 207
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	83 81       	ldd	r24, Z+3	; 0x03
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	82 95       	swap	r24
    202a:	92 95       	swap	r25
    202c:	90 7f       	andi	r25, 0xF0	; 240
    202e:	98 27       	eor	r25, r24
    2030:	80 7f       	andi	r24, 0xF0	; 240
    2032:	98 27       	eor	r25, r24
    2034:	82 2b       	or	r24, r18
    2036:	8c 93       	st	X, r24
			/* Do Nothing */
		}

		/* Select Initial Value Of Timer0 */
		/* To Be Sure That Wont Add Value More Than TIMER0_MAX_VALUE */
		if (configptr->initial_value > TIMER0_MAX_VALUE)
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	86 81       	ldd	r24, Z+6	; 0x06
    203e:	97 81       	ldd	r25, Z+7	; 0x07
    2040:	8f 3f       	cpi	r24, 0xFF	; 255
    2042:	91 05       	cpc	r25, r1
    2044:	09 f0       	breq	.+2      	; 0x2048 <TIMER_init+0x14e>
    2046:	38 f4       	brcc	.+14     	; 0x2056 <TIMER_init+0x15c>
			/* Do Nothing */
		}
		else
		{
			/* Insert Initila Value To TCNT0 Register */
			TCNT0 = configptr->initial_value ;
    2048:	a2 e5       	ldi	r26, 0x52	; 82
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	86 81       	ldd	r24, Z+6	; 0x06
    2052:	97 81       	ldd	r25, Z+7	; 0x07
    2054:	8c 93       	st	X, r24
		}

		/* Select Compare Value Of Timer0 */
		/* To Be Sure That Wont Add Value More Than TIMER0_MAX_VALUE */
		if(configptr->compare_value > TIMER0_MAX_VALUE)
    2056:	e9 81       	ldd	r30, Y+1	; 0x01
    2058:	fa 81       	ldd	r31, Y+2	; 0x02
    205a:	80 85       	ldd	r24, Z+8	; 0x08
    205c:	91 85       	ldd	r25, Z+9	; 0x09
    205e:	8f 3f       	cpi	r24, 0xFF	; 255
    2060:	91 05       	cpc	r25, r1
    2062:	09 f0       	breq	.+2      	; 0x2066 <TIMER_init+0x16c>
    2064:	38 f4       	brcc	.+14     	; 0x2074 <TIMER_init+0x17a>
			/* Do Nothing */
		}
		else
		{
			/* Insert Compare Value To OCR0 Register */
			OCR0 = configptr->compare_value ;
    2066:	ac e5       	ldi	r26, 0x5C	; 92
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	80 85       	ldd	r24, Z+8	; 0x08
    2070:	91 85       	ldd	r25, Z+9	; 0x09
    2072:	8c 93       	st	X, r24
		}

		/*Select Prescaler Value */
		TCCR0 = (TCCR0 & 0xF8) | (configptr->timer_prescaler) ;
    2074:	a3 e5       	ldi	r26, 0x53	; 83
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e3 e5       	ldi	r30, 0x53	; 83
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	98 2f       	mov	r25, r24
    2080:	98 7f       	andi	r25, 0xF8	; 248
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	85 81       	ldd	r24, Z+5	; 0x05
    2088:	89 2b       	or	r24, r25
    208a:	8c 93       	st	X, r24
    208c:	de c1       	rjmp	.+956    	; 0x244a <TIMER_init+0x550>

		break;

	case TIMER1 :
		/*Select Timer1_Mode */
		if (configptr->timer_mode == NORMAL)
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	81 81       	ldd	r24, Z+1	; 0x01
    2094:	88 23       	and	r24, r24
    2096:	99 f4       	brne	.+38     	; 0x20be <TIMER_init+0x1c4>
		{
			#if TIMER1_OVF_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,TOIE1)
            #endif
			/*SET Non-PWM Pins & Select Normal Mode */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2098:	ef e4       	ldi	r30, 0x4F	; 79
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8c e0       	ldi	r24, 0x0C	; 12
    209e:	80 83       	st	Z, r24
			CLEAR_BIT(TCCR1B,WGM12);
    20a0:	ae e4       	ldi	r26, 0x4E	; 78
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	ee e4       	ldi	r30, 0x4E	; 78
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	87 7f       	andi	r24, 0xF7	; 247
    20ac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    20ae:	ae e4       	ldi	r26, 0x4E	; 78
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ee e4       	ldi	r30, 0x4E	; 78
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7e       	andi	r24, 0xEF	; 239
    20ba:	8c 93       	st	X, r24
    20bc:	fe c0       	rjmp	.+508    	; 0x22ba <TIMER_init+0x3c0>
		}
		else if (configptr->timer_mode == CTC)
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	81 81       	ldd	r24, Z+1	; 0x01
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	09 f0       	breq	.+2      	; 0x20ca <TIMER_init+0x1d0>
    20c8:	6b c0       	rjmp	.+214    	; 0x21a0 <TIMER_init+0x2a6>
			#endif
			#if TIMER1_CTCB_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,OCIE1B);
			#endif
			/* SET Timer1 Pins As Output */
			SET_BIT(DDRD,PD4); /* OC1B */
    20ca:	a1 e3       	ldi	r26, 0x31	; 49
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e1 e3       	ldi	r30, 0x31	; 49
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	80 61       	ori	r24, 0x10	; 16
    20d6:	8c 93       	st	X, r24
			SET_BIT(DDRD,PD5); /* OC1A */
    20d8:	a1 e3       	ldi	r26, 0x31	; 49
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e1 e3       	ldi	r30, 0x31	; 49
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	80 62       	ori	r24, 0x20	; 32
    20e4:	8c 93       	st	X, r24
			/*Clear All TCCR1A Register
			 * 1-Assume Its Normal CTC Mode
			 * 2- Non Pwm Signal
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    20e6:	ef e4       	ldi	r30, 0x4F	; 79
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8c e0       	ldi	r24, 0x0C	; 12
    20ec:	80 83       	st	Z, r24

			/* Configure As CTC Mode */
			SET_BIT(TCCR1B, WGM12);
    20ee:	ae e4       	ldi	r26, 0x4E	; 78
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ee e4       	ldi	r30, 0x4E	; 78
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	88 60       	ori	r24, 0x08	; 8
    20fa:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    20fc:	ae e4       	ldi	r26, 0x4E	; 78
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ee e4       	ldi	r30, 0x4E	; 78
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	80 61       	ori	r24, 0x10	; 16
    2108:	8c 93       	st	X, r24
			if(configptr->ctc_mode == CTC_NORMAL)
    210a:	e9 81       	ldd	r30, Y+1	; 0x01
    210c:	fa 81       	ldd	r31, Y+2	; 0x02
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	88 23       	and	r24, r24
    2112:	09 f4       	brne	.+2      	; 0x2116 <TIMER_init+0x21c>
    2114:	d2 c0       	rjmp	.+420    	; 0x22ba <TIMER_init+0x3c0>
			{
				/* Do Nothing */
			}
			else if (configptr->ctc_mode == CTC_TOGGLE)
    2116:	e9 81       	ldd	r30, Y+1	; 0x01
    2118:	fa 81       	ldd	r31, Y+2	; 0x02
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	79 f4       	brne	.+30     	; 0x213e <TIMER_init+0x244>
			{
				SET_BIT(TCCR1A,COM1A0);
    2120:	af e4       	ldi	r26, 0x4F	; 79
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	ef e4       	ldi	r30, 0x4F	; 79
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	80 64       	ori	r24, 0x40	; 64
    212c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1B0);
    212e:	af e4       	ldi	r26, 0x4F	; 79
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	ef e4       	ldi	r30, 0x4F	; 79
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	80 61       	ori	r24, 0x10	; 16
    213a:	8c 93       	st	X, r24
    213c:	be c0       	rjmp	.+380    	; 0x22ba <TIMER_init+0x3c0>
			}
			else if ( configptr->ctc_mode == CTC_CLEAR)
    213e:	e9 81       	ldd	r30, Y+1	; 0x01
    2140:	fa 81       	ldd	r31, Y+2	; 0x02
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	79 f4       	brne	.+30     	; 0x2166 <TIMER_init+0x26c>
			{
				SET_BIT(TCCR1A,COM1A1);
    2148:	af e4       	ldi	r26, 0x4F	; 79
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ef e4       	ldi	r30, 0x4F	; 79
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 68       	ori	r24, 0x80	; 128
    2154:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1B1);
    2156:	af e4       	ldi	r26, 0x4F	; 79
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	ef e4       	ldi	r30, 0x4F	; 79
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 62       	ori	r24, 0x20	; 32
    2162:	8c 93       	st	X, r24
    2164:	aa c0       	rjmp	.+340    	; 0x22ba <TIMER_init+0x3c0>
			}
			else
			{
				SET_BIT(TCCR1A, COM1A0);
    2166:	af e4       	ldi	r26, 0x4F	; 79
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	ef e4       	ldi	r30, 0x4F	; 79
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    2174:	af e4       	ldi	r26, 0x4F	; 79
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 61       	ori	r24, 0x10	; 16
    2180:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A1);
    2182:	af e4       	ldi	r26, 0x4F	; 79
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	ef e4       	ldi	r30, 0x4F	; 79
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	80 68       	ori	r24, 0x80	; 128
    218e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2190:	af e4       	ldi	r26, 0x4F	; 79
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ef e4       	ldi	r30, 0x4F	; 79
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	80 62       	ori	r24, 0x20	; 32
    219c:	8c 93       	st	X, r24
    219e:	8d c0       	rjmp	.+282    	; 0x22ba <TIMER_init+0x3c0>
			}
		}
		else if (configptr->timer_mode == FAST_PWM)
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	81 81       	ldd	r24, Z+1	; 0x01
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	09 f0       	breq	.+2      	; 0x21ac <TIMER_init+0x2b2>
    21aa:	57 c0       	rjmp	.+174    	; 0x225a <TIMER_init+0x360>
		{
			/* SET Timer1 Pins As Output */
			SET_BIT(DDRD, PD4); /* OC1B */
    21ac:	a1 e3       	ldi	r26, 0x31	; 49
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e1 e3       	ldi	r30, 0x31	; 49
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 61       	ori	r24, 0x10	; 16
    21b8:	8c 93       	st	X, r24
			SET_BIT(DDRD, PD5); /* OC1A */
    21ba:	a1 e3       	ldi	r26, 0x31	; 49
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e1 e3       	ldi	r30, 0x31	; 49
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 62       	ori	r24, 0x20	; 32
    21c6:	8c 93       	st	X, r24

			/*Configure TCCR1A & TCCR1B Registers */
			/* Assume We Use FAST_PWM_NORMAL MODE */
			TCCR1A = (1<<WGM11);
    21c8:	ef e4       	ldi	r30, 0x4F	; 79
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	80 83       	st	Z, r24
			SET_BIT(TCCR1B,WGM12);
    21d0:	ae e4       	ldi	r26, 0x4E	; 78
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ee e4       	ldi	r30, 0x4E	; 78
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 60       	ori	r24, 0x08	; 8
    21dc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM13);
    21de:	ae e4       	ldi	r26, 0x4E	; 78
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	ee e4       	ldi	r30, 0x4E	; 78
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 61       	ori	r24, 0x10	; 16
    21ea:	8c 93       	st	X, r24

			if (configptr->pwm_mode  == PWM_NORMAL)
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	83 81       	ldd	r24, Z+3	; 0x03
    21f2:	88 23       	and	r24, r24
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <TIMER_init+0x2fe>
    21f6:	61 c0       	rjmp	.+194    	; 0x22ba <TIMER_init+0x3c0>
			{
				/* Do Nothing */
			}
			else if (configptr->pwm_mode == PWM_NON_INVERTING)
    21f8:	e9 81       	ldd	r30, Y+1	; 0x01
    21fa:	fa 81       	ldd	r31, Y+2	; 0x02
    21fc:	83 81       	ldd	r24, Z+3	; 0x03
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	79 f4       	brne	.+30     	; 0x2220 <TIMER_init+0x326>
			{
				SET_BIT(TCCR1A,COM1A1);
    2202:	af e4       	ldi	r26, 0x4F	; 79
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ef e4       	ldi	r30, 0x4F	; 79
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1B1);
    2210:	af e4       	ldi	r26, 0x4F	; 79
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ef e4       	ldi	r30, 0x4F	; 79
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 62       	ori	r24, 0x20	; 32
    221c:	8c 93       	st	X, r24
    221e:	4d c0       	rjmp	.+154    	; 0x22ba <TIMER_init+0x3c0>
			}
			else
			{
				SET_BIT(TCCR1A, COM1A1);
    2220:	af e4       	ldi	r26, 0x4F	; 79
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	ef e4       	ldi	r30, 0x4F	; 79
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	80 68       	ori	r24, 0x80	; 128
    222c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    222e:	af e4       	ldi	r26, 0x4F	; 79
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ef e4       	ldi	r30, 0x4F	; 79
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 62       	ori	r24, 0x20	; 32
    223a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    223c:	af e4       	ldi	r26, 0x4F	; 79
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ef e4       	ldi	r30, 0x4F	; 79
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	80 64       	ori	r24, 0x40	; 64
    2248:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    224a:	af e4       	ldi	r26, 0x4F	; 79
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ef e4       	ldi	r30, 0x4F	; 79
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 61       	ori	r24, 0x10	; 16
    2256:	8c 93       	st	X, r24
    2258:	30 c0       	rjmp	.+96     	; 0x22ba <TIMER_init+0x3c0>
		{
			#if TIMER1_ICU_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,TICIE1);
			#endif
			/* Configure ICU Pin As Input */
			CLEAR_BIT(DDRD,PD6); /*PD6 PIN */
    225a:	a1 e3       	ldi	r26, 0x31	; 49
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e1 e3       	ldi	r30, 0x31	; 49
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8f 7b       	andi	r24, 0xBF	; 191
    2266:	8c 93       	st	X, r24

			/* ICU Mode Always Run In Normal Mode Non Pwm */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2268:	ef e4       	ldi	r30, 0x4F	; 79
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8c e0       	ldi	r24, 0x0C	; 12
    226e:	80 83       	st	Z, r24
			CLEAR_BIT(TCCR1B,WGM12);
    2270:	ae e4       	ldi	r26, 0x4E	; 78
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ee e4       	ldi	r30, 0x4E	; 78
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	87 7f       	andi	r24, 0xF7	; 247
    227c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    227e:	ae e4       	ldi	r26, 0x4E	; 78
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	ee e4       	ldi	r30, 0x4E	; 78
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8f 7e       	andi	r24, 0xEF	; 239
    228a:	8c 93       	st	X, r24

			/*Edge Detection */
			TCCR1B = (TCCR1B & 0xBF) | ((configptr->detection_edge)<<6);
    228c:	ae e4       	ldi	r26, 0x4E	; 78
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ee e4       	ldi	r30, 0x4E	; 78
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	28 2f       	mov	r18, r24
    2298:	2f 7b       	andi	r18, 0xBF	; 191
    229a:	e9 81       	ldd	r30, Y+1	; 0x01
    229c:	fa 81       	ldd	r31, Y+2	; 0x02
    229e:	84 81       	ldd	r24, Z+4	; 0x04
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	00 24       	eor	r0, r0
    22a6:	96 95       	lsr	r25
    22a8:	87 95       	ror	r24
    22aa:	07 94       	ror	r0
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	07 94       	ror	r0
    22b2:	98 2f       	mov	r25, r24
    22b4:	80 2d       	mov	r24, r0
    22b6:	82 2b       	or	r24, r18
    22b8:	8c 93       	st	X, r24
		/* To Be Sure That Wont Add Value More Than TIMER0_MAX_VALUE */
		if (configptr->initial_value > TIMER1_MAX_VALUE) {
			/* Do Nothing */
		} else {
			/* Insert Initila Value To TCNT0 Register */
			TCNT1 = configptr->initial_value;
    22ba:	ac e4       	ldi	r26, 0x4C	; 76
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e9 81       	ldd	r30, Y+1	; 0x01
    22c0:	fa 81       	ldd	r31, Y+2	; 0x02
    22c2:	86 81       	ldd	r24, Z+6	; 0x06
    22c4:	97 81       	ldd	r25, Z+7	; 0x07
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	9c 93       	st	X, r25
    22ca:	8e 93       	st	-X, r24
		/* To Be Sure That Wont Add Value More Than TIMER1_MAX_VALUE */
		if (configptr->compare_value > TIMER1_MAX_VALUE) {
			/* Do Nothing */
		} else {
			/* Insert Compare Value To ICR1 Register */
			ICR1 = configptr->compare_value;
    22cc:	a6 e4       	ldi	r26, 0x46	; 70
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	80 85       	ldd	r24, Z+8	; 0x08
    22d6:	91 85       	ldd	r25, Z+9	; 0x09
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	9c 93       	st	X, r25
    22dc:	8e 93       	st	-X, r24
		}

		/* Prescaler Of Timer */
		TCCR1B = (TCCR1B & 0xF8) | (configptr->timer_prescaler);
    22de:	ae e4       	ldi	r26, 0x4E	; 78
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ee e4       	ldi	r30, 0x4E	; 78
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	98 2f       	mov	r25, r24
    22ea:	98 7f       	andi	r25, 0xF8	; 248
    22ec:	e9 81       	ldd	r30, Y+1	; 0x01
    22ee:	fa 81       	ldd	r31, Y+2	; 0x02
    22f0:	85 81       	ldd	r24, Z+5	; 0x05
    22f2:	89 2b       	or	r24, r25
    22f4:	8c 93       	st	X, r24
    22f6:	a9 c0       	rjmp	.+338    	; 0x244a <TIMER_init+0x550>

		break;

	case TIMER2:
		/* Select Timer2_Modes */
		if (configptr->timer_mode == NORMAL) {
    22f8:	e9 81       	ldd	r30, Y+1	; 0x01
    22fa:	fa 81       	ldd	r31, Y+2	; 0x02
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	88 23       	and	r24, r24
    2300:	b1 f4       	brne	.+44     	; 0x232e <TIMER_init+0x434>
			/*Enable OverFlow Interrupt */
#if TIMER2_OVF_INTERRUPT_ENABLE == TRUE
					SET_BIT(TIMSK,TOIE2)
					#endif
			/* SET Non-PWM Pin */
			SET_BIT(TCCR2, FOC2);
    2302:	a5 e4       	ldi	r26, 0x45	; 69
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e4       	ldi	r30, 0x45	; 69
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 68       	ori	r24, 0x80	; 128
    230e:	8c 93       	st	X, r24
			/*CLEAR Waveform Generations Pins */
			CLEAR_BIT(TCCR2, WGM20);
    2310:	a5 e4       	ldi	r26, 0x45	; 69
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e5 e4       	ldi	r30, 0x45	; 69
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	8f 7b       	andi	r24, 0xBF	; 191
    231c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, WGM21);
    231e:	a5 e4       	ldi	r26, 0x45	; 69
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e5 e4       	ldi	r30, 0x45	; 69
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	87 7f       	andi	r24, 0xF7	; 247
    232a:	8c 93       	st	X, r24
    232c:	64 c0       	rjmp	.+200    	; 0x23f6 <TIMER_init+0x4fc>
		} else if (configptr->timer_mode == CTC) {
    232e:	e9 81       	ldd	r30, Y+1	; 0x01
    2330:	fa 81       	ldd	r31, Y+2	; 0x02
    2332:	81 81       	ldd	r24, Z+1	; 0x01
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	89 f5       	brne	.+98     	; 0x239a <TIMER_init+0x4a0>
			/* Enable Compare  Interrupt */
#if TIMER2_CTC_INTERRUPT_ENABLE == TRUE
					SET_BIT(TIMSK,OCIE2);
					#endif
			/* Set PD7 Timer2 PIN As Output */
			SET_BIT(DDRD, PD7);
    2338:	a1 e3       	ldi	r26, 0x31	; 49
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e1 e3       	ldi	r30, 0x31	; 49
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 68       	ori	r24, 0x80	; 128
    2344:	8c 93       	st	X, r24
			/* SET Non-PWM Pin */
			SET_BIT(TCCR2, FOC2);
    2346:	a5 e4       	ldi	r26, 0x45	; 69
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e5 e4       	ldi	r30, 0x45	; 69
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 68       	ori	r24, 0x80	; 128
    2352:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			CLEAR_BIT(TCCR2, WGM20);
    2354:	a5 e4       	ldi	r26, 0x45	; 69
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e5 e4       	ldi	r30, 0x45	; 69
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 7b       	andi	r24, 0xBF	; 191
    2360:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    2362:	a5 e4       	ldi	r26, 0x45	; 69
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e5 e4       	ldi	r30, 0x45	; 69
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	88 60       	ori	r24, 0x08	; 8
    236e:	8c 93       	st	X, r24
			/* Check Operation Of CTC Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((configptr->ctc_mode) << COM20);
    2370:	a5 e4       	ldi	r26, 0x45	; 69
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e5 e4       	ldi	r30, 0x45	; 69
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	28 2f       	mov	r18, r24
    237c:	2f 7c       	andi	r18, 0xCF	; 207
    237e:	e9 81       	ldd	r30, Y+1	; 0x01
    2380:	fa 81       	ldd	r31, Y+2	; 0x02
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	88 2f       	mov	r24, r24
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	82 95       	swap	r24
    238a:	92 95       	swap	r25
    238c:	90 7f       	andi	r25, 0xF0	; 240
    238e:	98 27       	eor	r25, r24
    2390:	80 7f       	andi	r24, 0xF0	; 240
    2392:	98 27       	eor	r25, r24
    2394:	82 2b       	or	r24, r18
    2396:	8c 93       	st	X, r24
    2398:	2e c0       	rjmp	.+92     	; 0x23f6 <TIMER_init+0x4fc>
		} else if (configptr->timer_mode == FAST_PWM) {
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	81 81       	ldd	r24, Z+1	; 0x01
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	49 f5       	brne	.+82     	; 0x23f6 <TIMER_init+0x4fc>
			/* Set PD7 Timer2 PIN As Output */
			SET_BIT(DDRD, PD7);
    23a4:	a1 e3       	ldi	r26, 0x31	; 49
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e1 e3       	ldi	r30, 0x31	; 49
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	80 68       	ori	r24, 0x80	; 128
    23b0:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			SET_BIT(TCCR2, WGM20);
    23b2:	a5 e4       	ldi	r26, 0x45	; 69
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e5 e4       	ldi	r30, 0x45	; 69
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	80 64       	ori	r24, 0x40	; 64
    23be:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    23c0:	a5 e4       	ldi	r26, 0x45	; 69
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e5 e4       	ldi	r30, 0x45	; 69
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	88 60       	ori	r24, 0x08	; 8
    23cc:	8c 93       	st	X, r24
			/* Check Operation Of PWM Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((configptr->pwm_mode) << COM20);
    23ce:	a5 e4       	ldi	r26, 0x45	; 69
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e5 e4       	ldi	r30, 0x45	; 69
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	28 2f       	mov	r18, r24
    23da:	2f 7c       	andi	r18, 0xCF	; 207
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	83 81       	ldd	r24, Z+3	; 0x03
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	82 95       	swap	r24
    23e8:	92 95       	swap	r25
    23ea:	90 7f       	andi	r25, 0xF0	; 240
    23ec:	98 27       	eor	r25, r24
    23ee:	80 7f       	andi	r24, 0xF0	; 240
    23f0:	98 27       	eor	r25, r24
    23f2:	82 2b       	or	r24, r18
    23f4:	8c 93       	st	X, r24
			/* Do Nothing */
		}

		/* Select Initial Value Of Timer2 */
		/* To Be Sure That Wont Add Value More Than TIMER2_MAX_VALUE */
		if (configptr->initial_value > TIMER2_MAX_VALUE) {
    23f6:	e9 81       	ldd	r30, Y+1	; 0x01
    23f8:	fa 81       	ldd	r31, Y+2	; 0x02
    23fa:	86 81       	ldd	r24, Z+6	; 0x06
    23fc:	97 81       	ldd	r25, Z+7	; 0x07
    23fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2400:	91 05       	cpc	r25, r1
    2402:	09 f0       	breq	.+2      	; 0x2406 <TIMER_init+0x50c>
    2404:	38 f4       	brcc	.+14     	; 0x2414 <TIMER_init+0x51a>
			/* Do Nothing */
		} else {
			/* Insert Initila Value To TCNT2 Register */
			TCNT2 = configptr->initial_value;
    2406:	a4 e4       	ldi	r26, 0x44	; 68
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 81       	ldd	r30, Y+1	; 0x01
    240c:	fa 81       	ldd	r31, Y+2	; 0x02
    240e:	86 81       	ldd	r24, Z+6	; 0x06
    2410:	97 81       	ldd	r25, Z+7	; 0x07
    2412:	8c 93       	st	X, r24
		}

		/* Select Compare Value Of Timer2 */
		/* To Be Sure That Wont Add Value More Than TIMER2_MAX_VALUE */
		if (configptr->compare_value > TIMER2_MAX_VALUE) {
    2414:	e9 81       	ldd	r30, Y+1	; 0x01
    2416:	fa 81       	ldd	r31, Y+2	; 0x02
    2418:	80 85       	ldd	r24, Z+8	; 0x08
    241a:	91 85       	ldd	r25, Z+9	; 0x09
    241c:	8f 3f       	cpi	r24, 0xFF	; 255
    241e:	91 05       	cpc	r25, r1
    2420:	09 f0       	breq	.+2      	; 0x2424 <TIMER_init+0x52a>
    2422:	38 f4       	brcc	.+14     	; 0x2432 <TIMER_init+0x538>
			/* Do Nothing */
		} else {
			/* Insert Compare Value To OCR0 Register */
			OCR2 = configptr->compare_value;
    2424:	a3 e4       	ldi	r26, 0x43	; 67
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e9 81       	ldd	r30, Y+1	; 0x01
    242a:	fa 81       	ldd	r31, Y+2	; 0x02
    242c:	80 85       	ldd	r24, Z+8	; 0x08
    242e:	91 85       	ldd	r25, Z+9	; 0x09
    2430:	8c 93       	st	X, r24
		}

		/*Select Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | (configptr->timer_prescaler);
    2432:	a5 e4       	ldi	r26, 0x45	; 69
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e5 e4       	ldi	r30, 0x45	; 69
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	98 2f       	mov	r25, r24
    243e:	98 7f       	andi	r25, 0xF8	; 248
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	85 81       	ldd	r24, Z+5	; 0x05
    2446:	89 2b       	or	r24, r25
    2448:	8c 93       	st	X, r24

		break;

	}
}
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <TIMER_deinit>:
 * 1- Deinit Any Timer
 */
/* Input : Variable Of TIMER_timerID */
/* Output : None */
void TIMER_deinit(TIMER_timerID timer_id)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <TIMER_deinit+0x6>
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_id)
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	3b 83       	std	Y+3, r19	; 0x03
    246e:	2a 83       	std	Y+2, r18	; 0x02
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	91 05       	cpc	r25, r1
    2478:	99 f0       	breq	.+38     	; 0x24a0 <TIMER_deinit+0x48>
    247a:	2a 81       	ldd	r18, Y+2	; 0x02
    247c:	3b 81       	ldd	r19, Y+3	; 0x03
    247e:	22 30       	cpi	r18, 0x02	; 2
    2480:	31 05       	cpc	r19, r1
    2482:	21 f1       	breq	.+72     	; 0x24cc <TIMER_deinit+0x74>
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	49 f5       	brne	.+82     	; 0x24de <TIMER_deinit+0x86>
	{
	case TIMER0 :
		TCCR0 = 0 ;
    248c:	e3 e5       	ldi	r30, 0x53	; 83
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    2492:	e2 e5       	ldi	r30, 0x52	; 82
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	10 82       	st	Z, r1
		OCR0 = 0 ;
    2498:	ec e5       	ldi	r30, 0x5C	; 92
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	10 82       	st	Z, r1
    249e:	1f c0       	rjmp	.+62     	; 0x24de <TIMER_deinit+0x86>
		break ;
	case TIMER1 :
		TCCR1A = 0 ;
    24a0:	ef e4       	ldi	r30, 0x4F	; 79
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	10 82       	st	Z, r1
		TCCR1B = 0 ;
    24a6:	ee e4       	ldi	r30, 0x4E	; 78
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	10 82       	st	Z, r1
		TCNT1 = 0 ;
    24ac:	ec e4       	ldi	r30, 0x4C	; 76
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	11 82       	std	Z+1, r1	; 0x01
    24b2:	10 82       	st	Z, r1
		ICR1 = 0 ;
    24b4:	e6 e4       	ldi	r30, 0x46	; 70
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	11 82       	std	Z+1, r1	; 0x01
    24ba:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TICIE1);
    24bc:	a9 e5       	ldi	r26, 0x59	; 89
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e9 e5       	ldi	r30, 0x59	; 89
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 7d       	andi	r24, 0xDF	; 223
    24c8:	8c 93       	st	X, r24
    24ca:	09 c0       	rjmp	.+18     	; 0x24de <TIMER_deinit+0x86>
		break;
	case TIMER2 :
		TCCR2 = 0 ;
    24cc:	e5 e4       	ldi	r30, 0x45	; 69
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	10 82       	st	Z, r1
		TCNT2 = 0 ;
    24d2:	e4 e4       	ldi	r30, 0x44	; 68
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	10 82       	st	Z, r1
		OCR2 = 0 ;
    24d8:	e3 e4       	ldi	r30, 0x43	; 67
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	10 82       	st	Z, r1
		break ;
	}
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <TIMER_SetCallBack>:
 * 			2- Ptr2Func
 */
/*Output : None */

void TIMER_SetCallBack(TIMER_timerID timer_id ,void (*ptr2func)(void))
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <TIMER_SetCallBack+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <TIMER_SetCallBack+0x8>
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	7b 83       	std	Y+3, r23	; 0x03
    24fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer_id)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3d 83       	std	Y+5, r19	; 0x05
    2506:	2c 83       	std	Y+4, r18	; 0x04
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	81 f0       	breq	.+32     	; 0x2532 <TIMER_SetCallBack+0x48>
    2512:	2c 81       	ldd	r18, Y+4	; 0x04
    2514:	3d 81       	ldd	r19, Y+5	; 0x05
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	91 f0       	breq	.+36     	; 0x2540 <TIMER_SetCallBack+0x56>
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	9d 81       	ldd	r25, Y+5	; 0x05
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	a1 f4       	brne	.+40     	; 0x254c <TIMER_SetCallBack+0x62>
	{
	case TIMER0 :
		g_timer0_callBackPtr = ptr2func ;
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	90 93 95 01 	sts	0x0195, r25
    252c:	80 93 94 01 	sts	0x0194, r24
    2530:	0d c0       	rjmp	.+26     	; 0x254c <TIMER_SetCallBack+0x62>
		break ;
	case TIMER1 :
		g_timer1_callBackPtr = ptr2func ;
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	90 93 97 01 	sts	0x0197, r25
    253a:	80 93 96 01 	sts	0x0196, r24
    253e:	06 c0       	rjmp	.+12     	; 0x254c <TIMER_SetCallBack+0x62>
		break;
	case TIMER2 :
		g_timer2_callBackPtr = ptr2func ;
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	9b 81       	ldd	r25, Y+3	; 0x03
    2544:	90 93 99 01 	sts	0x0199, r25
    2548:	80 93 98 01 	sts	0x0198, r24
		break ;
	}
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <TIMER1_icuChangeEdgeDetection>:
/*DESCRIPTION
 * Change TIMER1_Icu Detectig Edge */
/* INPUT : 1- Variable Of TIMER1_icuDetectionEdge */
/* OUTPUT : NONE */
void TIMER1_icuChangeEdgeDetection(TIMER1_icuDetectionEdge edge)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | (edge<<6) ;
    2568:	ae e4       	ldi	r26, 0x4E	; 78
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ee e4       	ldi	r30, 0x4E	; 78
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	28 2f       	mov	r18, r24
    2574:	2f 7b       	andi	r18, 0xBF	; 191
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	00 24       	eor	r0, r0
    257e:	96 95       	lsr	r25
    2580:	87 95       	ror	r24
    2582:	07 94       	ror	r0
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	07 94       	ror	r0
    258a:	98 2f       	mov	r25, r24
    258c:	80 2d       	mov	r24, r0
    258e:	82 2b       	or	r24, r18
    2590:	8c 93       	st	X, r24
}
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <TIMER1_icuGetInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 TIMER1_icuGetInputCaptureValue(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    25a2:	e6 e4       	ldi	r30, 0x46	; 70
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <TIMER1_clearInitialValue>:
/*
 * Description: Function to clear the Initial Value Of Timer1
 */
void TIMER1_clearInitialValue(void)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    25b8:	ec e4       	ldi	r30, 0x4C	; 76
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	11 82       	std	Z+1, r1	; 0x01
    25be:	10 82       	st	Z, r1
}
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <TIMER_changeCompareValue>:
 * Change Compare Value Of Timer
 */
/* Input : Timer_id , Compare Value */
/* OUTPUT : NONE */
void TIMER_changeCompareValue(TIMER_timerID timer_id , uint16 compare_value)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <TIMER_changeCompareValue+0x6>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <TIMER_changeCompareValue+0x8>
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	7b 83       	std	Y+3, r23	; 0x03
    25d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer_id)
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	3d 83       	std	Y+5, r19	; 0x05
    25e2:	2c 83       	std	Y+4, r18	; 0x04
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	91 05       	cpc	r25, r1
    25ec:	a1 f0       	breq	.+40     	; 0x2616 <TIMER_changeCompareValue+0x50>
    25ee:	2c 81       	ldd	r18, Y+4	; 0x04
    25f0:	3d 81       	ldd	r19, Y+5	; 0x05
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	b1 f0       	breq	.+44     	; 0x2624 <TIMER_changeCompareValue+0x5e>
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	9d 81       	ldd	r25, Y+5	; 0x05
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	e1 f4       	brne	.+56     	; 0x2638 <TIMER_changeCompareValue+0x72>
	{
	case TIMER0 :
		if (compare_value > TIMER0_MAX_VALUE)
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	8f 3f       	cpi	r24, 0xFF	; 255
    2606:	91 05       	cpc	r25, r1
    2608:	09 f0       	breq	.+2      	; 0x260c <TIMER_changeCompareValue+0x46>
    260a:	b0 f4       	brcc	.+44     	; 0x2638 <TIMER_changeCompareValue+0x72>
		{
			/* Do Nothing */
		}
		else
		{
			OCR0 = compare_value ;
    260c:	ec e5       	ldi	r30, 0x5C	; 92
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	80 83       	st	Z, r24
    2614:	11 c0       	rjmp	.+34     	; 0x2638 <TIMER_changeCompareValue+0x72>
		break ;
	case TIMER1 :
		if (compare_value > TIMER1_MAX_VALUE) {
			/* Do Nothing */
		} else {
			ICR1 = compare_value;
    2616:	e6 e4       	ldi	r30, 0x46	; 70
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	9b 81       	ldd	r25, Y+3	; 0x03
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24
    2622:	0a c0       	rjmp	.+20     	; 0x2638 <TIMER_changeCompareValue+0x72>
		}
		break;
	case TIMER2 :
		if (compare_value > TIMER2_MAX_VALUE) {
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	8f 3f       	cpi	r24, 0xFF	; 255
    262a:	91 05       	cpc	r25, r1
    262c:	09 f0       	breq	.+2      	; 0x2630 <TIMER_changeCompareValue+0x6a>
    262e:	20 f4       	brcc	.+8      	; 0x2638 <TIMER_changeCompareValue+0x72>
			/* Do Nothing */
		} else {
			OCR2 = compare_value;
    2630:	e3 e4       	ldi	r30, 0x43	; 67
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	80 83       	st	Z, r24
		}
		break;
	}
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <TIMER_changeInitialValue>:
 * Change Initial Value
 */
/* Input : Timer_id , Initial  Value */
/* OUTPUT : NONE */
void TIMER_changeInitialValue(TIMER_timerID timer_id , uint16 initial_value)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <TIMER_changeInitialValue+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <TIMER_changeInitialValue+0x8>
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	7b 83       	std	Y+3, r23	; 0x03
    265a:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer_id)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3d 83       	std	Y+5, r19	; 0x05
    2664:	2c 83       	std	Y+4, r18	; 0x04
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	a1 f0       	breq	.+40     	; 0x2698 <TIMER_changeInitialValue+0x50>
    2670:	2c 81       	ldd	r18, Y+4	; 0x04
    2672:	3d 81       	ldd	r19, Y+5	; 0x05
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	b1 f0       	breq	.+44     	; 0x26a6 <TIMER_changeInitialValue+0x5e>
    267a:	8c 81       	ldd	r24, Y+4	; 0x04
    267c:	9d 81       	ldd	r25, Y+5	; 0x05
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	e1 f4       	brne	.+56     	; 0x26ba <TIMER_changeInitialValue+0x72>
		{
		case TIMER0 :
			if (initial_value > TIMER0_MAX_VALUE)
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	8f 3f       	cpi	r24, 0xFF	; 255
    2688:	91 05       	cpc	r25, r1
    268a:	09 f0       	breq	.+2      	; 0x268e <TIMER_changeInitialValue+0x46>
    268c:	b0 f4       	brcc	.+44     	; 0x26ba <TIMER_changeInitialValue+0x72>
			{
				/* Do Nothing */
			}
			else
			{
				TCNT0 = initial_value ;
    268e:	e2 e5       	ldi	r30, 0x52	; 82
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	80 83       	st	Z, r24
    2696:	11 c0       	rjmp	.+34     	; 0x26ba <TIMER_changeInitialValue+0x72>
			break ;
		case TIMER1 :
			if (initial_value > TIMER1_MAX_VALUE) {
				/* Do Nothing */
			} else {
				TCNT1 = initial_value;
    2698:	ec e4       	ldi	r30, 0x4C	; 76
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
    26a4:	0a c0       	rjmp	.+20     	; 0x26ba <TIMER_changeInitialValue+0x72>
			}
			break;
		case TIMER2 :
			if (initial_value > TIMER2_MAX_VALUE) {
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	9b 81       	ldd	r25, Y+3	; 0x03
    26aa:	8f 3f       	cpi	r24, 0xFF	; 255
    26ac:	91 05       	cpc	r25, r1
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <TIMER_changeInitialValue+0x6a>
    26b0:	20 f4       	brcc	.+8      	; 0x26ba <TIMER_changeInitialValue+0x72>
				/* Do Nothing */
			} else {
				TCNT2 = initial_value;
    26b2:	e4 e4       	ldi	r30, 0x44	; 68
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	80 83       	st	Z, r24
			}
			break;
		}
}
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <TIMER0_delay_ms>:
 *  2- Disable Timer After Delay
 *  3- We Should Initialize Timer0 To Be CTC Mode 0CO Disable
 */
#if TIMER0_CTC_INTERRUPT_ENABLE == FALSE
void TIMER0_delay_ms(uint64 time_in_ms)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	eb 97       	sbiw	r28, 0x3b	; 59
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	29 87       	std	Y+9, r18	; 0x09
    26e0:	3a 87       	std	Y+10, r19	; 0x0a
    26e2:	4b 87       	std	Y+11, r20	; 0x0b
    26e4:	5c 87       	std	Y+12, r21	; 0x0c
    26e6:	6d 87       	std	Y+13, r22	; 0x0d
    26e8:	7e 87       	std	Y+14, r23	; 0x0e
    26ea:	8f 87       	std	Y+15, r24	; 0x0f
    26ec:	98 8b       	std	Y+16, r25	; 0x10
	uint64 i = 0;
    26ee:	19 82       	std	Y+1, r1	; 0x01
    26f0:	1a 82       	std	Y+2, r1	; 0x02
    26f2:	1b 82       	std	Y+3, r1	; 0x03
    26f4:	1c 82       	std	Y+4, r1	; 0x04
    26f6:	1d 82       	std	Y+5, r1	; 0x05
    26f8:	1e 82       	std	Y+6, r1	; 0x06
    26fa:	1f 82       	std	Y+7, r1	; 0x07
    26fc:	18 86       	std	Y+8, r1	; 0x08

	/* Set Initial Value */
	TCNT0 = 0 ;
    26fe:	e2 e5       	ldi	r30, 0x52	; 82
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	10 82       	st	Z, r1
	/* Set Compare Value As  125-1 = 124*/
	OCR0 = 124 ;
    2704:	ec e5       	ldi	r30, 0x5C	; 92
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	8c e7       	ldi	r24, 0x7C	; 124
    270a:	80 83       	st	Z, r24

	/* Change Clock To Be FCPU_64 */
	TCCR0 = (TCCR0 & 0xF8) | (0x03);
    270c:	a3 e5       	ldi	r26, 0x53	; 83
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e3 e5       	ldi	r30, 0x53	; 83
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	88 7f       	andi	r24, 0xF8	; 248
    2718:	83 60       	ori	r24, 0x03	; 3
    271a:	8c 93       	st	X, r24

	for (i=0 ; i <time_in_ms ; i++)
    271c:	19 82       	std	Y+1, r1	; 0x01
    271e:	1a 82       	std	Y+2, r1	; 0x02
    2720:	1b 82       	std	Y+3, r1	; 0x03
    2722:	1c 82       	std	Y+4, r1	; 0x04
    2724:	1d 82       	std	Y+5, r1	; 0x05
    2726:	1e 82       	std	Y+6, r1	; 0x06
    2728:	1f 82       	std	Y+7, r1	; 0x07
    272a:	18 86       	std	Y+8, r1	; 0x08
    272c:	f4 c0       	rjmp	.+488    	; 0x2916 <TIMER0_delay_ms+0x24c>
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));
    272e:	e8 e5       	ldi	r30, 0x58	; 88
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	82 70       	andi	r24, 0x02	; 2
    273a:	90 70       	andi	r25, 0x00	; 0
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	b9 f3       	breq	.-18     	; 0x272e <TIMER0_delay_ms+0x64>
		SET_BIT(TIFR,OCF0);
    2740:	a8 e5       	ldi	r26, 0x58	; 88
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e8 e5       	ldi	r30, 0x58	; 88
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	82 60       	ori	r24, 0x02	; 2
    274c:	8c 93       	st	X, r24
	OCR0 = 124 ;

	/* Change Clock To Be FCPU_64 */
	TCCR0 = (TCCR0 & 0xF8) | (0x03);

	for (i=0 ; i <time_in_ms ; i++)
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	89 8b       	std	Y+17, r24	; 0x11
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	9a 8b       	std	Y+18, r25	; 0x12
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	8b 8b       	std	Y+19, r24	; 0x13
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	9c 8b       	std	Y+20, r25	; 0x14
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	8d 8b       	std	Y+21, r24	; 0x15
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	9e 8b       	std	Y+22, r25	; 0x16
    2766:	8f 81       	ldd	r24, Y+7	; 0x07
    2768:	8f 8b       	std	Y+23, r24	; 0x17
    276a:	98 85       	ldd	r25, Y+8	; 0x08
    276c:	98 8f       	std	Y+24, r25	; 0x18
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	89 8f       	std	Y+25, r24	; 0x19
    2772:	1a 8e       	std	Y+26, r1	; 0x1a
    2774:	1b 8e       	std	Y+27, r1	; 0x1b
    2776:	1c 8e       	std	Y+28, r1	; 0x1c
    2778:	1d 8e       	std	Y+29, r1	; 0x1d
    277a:	1e 8e       	std	Y+30, r1	; 0x1e
    277c:	1f 8e       	std	Y+31, r1	; 0x1f
    277e:	18 a2       	std	Y+32, r1	; 0x20
    2780:	99 89       	ldd	r25, Y+17	; 0x11
    2782:	89 8d       	ldd	r24, Y+25	; 0x19
    2784:	98 0f       	add	r25, r24
    2786:	99 a3       	std	Y+33, r25	; 0x21
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	99 a7       	std	Y+41, r25	; 0x29
    278c:	89 a1       	ldd	r24, Y+33	; 0x21
    278e:	99 89       	ldd	r25, Y+17	; 0x11
    2790:	89 17       	cp	r24, r25
    2792:	08 f0       	brcs	.+2      	; 0x2796 <TIMER0_delay_ms+0xcc>
    2794:	19 a6       	std	Y+41, r1	; 0x29
    2796:	8a 89       	ldd	r24, Y+18	; 0x12
    2798:	9a 8d       	ldd	r25, Y+26	; 0x1a
    279a:	89 0f       	add	r24, r25
    279c:	8a a3       	std	Y+34, r24	; 0x22
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	8a a7       	std	Y+42, r24	; 0x2a
    27a2:	9a a1       	ldd	r25, Y+34	; 0x22
    27a4:	8a 89       	ldd	r24, Y+18	; 0x12
    27a6:	98 17       	cp	r25, r24
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <TIMER0_delay_ms+0xe2>
    27aa:	1a a6       	std	Y+42, r1	; 0x2a
    27ac:	99 a5       	ldd	r25, Y+41	; 0x29
    27ae:	8a a1       	ldd	r24, Y+34	; 0x22
    27b0:	98 0f       	add	r25, r24
    27b2:	9b a7       	std	Y+43, r25	; 0x2b
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	9c a7       	std	Y+44, r25	; 0x2c
    27b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ba:	9a a1       	ldd	r25, Y+34	; 0x22
    27bc:	89 17       	cp	r24, r25
    27be:	08 f0       	brcs	.+2      	; 0x27c2 <TIMER0_delay_ms+0xf8>
    27c0:	1c a6       	std	Y+44, r1	; 0x2c
    27c2:	8a a5       	ldd	r24, Y+42	; 0x2a
    27c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c6:	89 2b       	or	r24, r25
    27c8:	8a a7       	std	Y+42, r24	; 0x2a
    27ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    27cc:	8a a3       	std	Y+34, r24	; 0x22
    27ce:	9b 89       	ldd	r25, Y+19	; 0x13
    27d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d2:	98 0f       	add	r25, r24
    27d4:	9b a3       	std	Y+35, r25	; 0x23
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	9d a7       	std	Y+45, r25	; 0x2d
    27da:	8b a1       	ldd	r24, Y+35	; 0x23
    27dc:	9b 89       	ldd	r25, Y+19	; 0x13
    27de:	89 17       	cp	r24, r25
    27e0:	08 f0       	brcs	.+2      	; 0x27e4 <TIMER0_delay_ms+0x11a>
    27e2:	1d a6       	std	Y+45, r1	; 0x2d
    27e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    27e6:	9b a1       	ldd	r25, Y+35	; 0x23
    27e8:	89 0f       	add	r24, r25
    27ea:	8e a7       	std	Y+46, r24	; 0x2e
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8f a7       	std	Y+47, r24	; 0x2f
    27f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f2:	8b a1       	ldd	r24, Y+35	; 0x23
    27f4:	98 17       	cp	r25, r24
    27f6:	08 f0       	brcs	.+2      	; 0x27fa <TIMER0_delay_ms+0x130>
    27f8:	1f a6       	std	Y+47, r1	; 0x2f
    27fa:	9d a5       	ldd	r25, Y+45	; 0x2d
    27fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fe:	98 2b       	or	r25, r24
    2800:	9d a7       	std	Y+45, r25	; 0x2d
    2802:	9e a5       	ldd	r25, Y+46	; 0x2e
    2804:	9b a3       	std	Y+35, r25	; 0x23
    2806:	8c 89       	ldd	r24, Y+20	; 0x14
    2808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280a:	89 0f       	add	r24, r25
    280c:	8c a3       	std	Y+36, r24	; 0x24
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	88 ab       	std	Y+48, r24	; 0x30
    2812:	9c a1       	ldd	r25, Y+36	; 0x24
    2814:	8c 89       	ldd	r24, Y+20	; 0x14
    2816:	98 17       	cp	r25, r24
    2818:	08 f0       	brcs	.+2      	; 0x281c <TIMER0_delay_ms+0x152>
    281a:	18 aa       	std	Y+48, r1	; 0x30
    281c:	9d a5       	ldd	r25, Y+45	; 0x2d
    281e:	8c a1       	ldd	r24, Y+36	; 0x24
    2820:	98 0f       	add	r25, r24
    2822:	99 ab       	std	Y+49, r25	; 0x31
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	9a ab       	std	Y+50, r25	; 0x32
    2828:	89 a9       	ldd	r24, Y+49	; 0x31
    282a:	9c a1       	ldd	r25, Y+36	; 0x24
    282c:	89 17       	cp	r24, r25
    282e:	08 f0       	brcs	.+2      	; 0x2832 <TIMER0_delay_ms+0x168>
    2830:	1a aa       	std	Y+50, r1	; 0x32
    2832:	88 a9       	ldd	r24, Y+48	; 0x30
    2834:	9a a9       	ldd	r25, Y+50	; 0x32
    2836:	89 2b       	or	r24, r25
    2838:	88 ab       	std	Y+48, r24	; 0x30
    283a:	89 a9       	ldd	r24, Y+49	; 0x31
    283c:	8c a3       	std	Y+36, r24	; 0x24
    283e:	9d 89       	ldd	r25, Y+21	; 0x15
    2840:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2842:	98 0f       	add	r25, r24
    2844:	9d a3       	std	Y+37, r25	; 0x25
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	9b ab       	std	Y+51, r25	; 0x33
    284a:	8d a1       	ldd	r24, Y+37	; 0x25
    284c:	9d 89       	ldd	r25, Y+21	; 0x15
    284e:	89 17       	cp	r24, r25
    2850:	08 f0       	brcs	.+2      	; 0x2854 <TIMER0_delay_ms+0x18a>
    2852:	1b aa       	std	Y+51, r1	; 0x33
    2854:	88 a9       	ldd	r24, Y+48	; 0x30
    2856:	9d a1       	ldd	r25, Y+37	; 0x25
    2858:	89 0f       	add	r24, r25
    285a:	8c ab       	std	Y+52, r24	; 0x34
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	8d ab       	std	Y+53, r24	; 0x35
    2860:	9c a9       	ldd	r25, Y+52	; 0x34
    2862:	8d a1       	ldd	r24, Y+37	; 0x25
    2864:	98 17       	cp	r25, r24
    2866:	08 f0       	brcs	.+2      	; 0x286a <TIMER0_delay_ms+0x1a0>
    2868:	1d aa       	std	Y+53, r1	; 0x35
    286a:	9b a9       	ldd	r25, Y+51	; 0x33
    286c:	8d a9       	ldd	r24, Y+53	; 0x35
    286e:	98 2b       	or	r25, r24
    2870:	9b ab       	std	Y+51, r25	; 0x33
    2872:	9c a9       	ldd	r25, Y+52	; 0x34
    2874:	9d a3       	std	Y+37, r25	; 0x25
    2876:	8e 89       	ldd	r24, Y+22	; 0x16
    2878:	9e 8d       	ldd	r25, Y+30	; 0x1e
    287a:	89 0f       	add	r24, r25
    287c:	8e a3       	std	Y+38, r24	; 0x26
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8e ab       	std	Y+54, r24	; 0x36
    2882:	9e a1       	ldd	r25, Y+38	; 0x26
    2884:	8e 89       	ldd	r24, Y+22	; 0x16
    2886:	98 17       	cp	r25, r24
    2888:	08 f0       	brcs	.+2      	; 0x288c <TIMER0_delay_ms+0x1c2>
    288a:	1e aa       	std	Y+54, r1	; 0x36
    288c:	9b a9       	ldd	r25, Y+51	; 0x33
    288e:	8e a1       	ldd	r24, Y+38	; 0x26
    2890:	98 0f       	add	r25, r24
    2892:	9f ab       	std	Y+55, r25	; 0x37
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	98 af       	std	Y+56, r25	; 0x38
    2898:	8f a9       	ldd	r24, Y+55	; 0x37
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	89 17       	cp	r24, r25
    289e:	08 f0       	brcs	.+2      	; 0x28a2 <TIMER0_delay_ms+0x1d8>
    28a0:	18 ae       	std	Y+56, r1	; 0x38
    28a2:	8e a9       	ldd	r24, Y+54	; 0x36
    28a4:	98 ad       	ldd	r25, Y+56	; 0x38
    28a6:	89 2b       	or	r24, r25
    28a8:	8e ab       	std	Y+54, r24	; 0x36
    28aa:	8f a9       	ldd	r24, Y+55	; 0x37
    28ac:	8e a3       	std	Y+38, r24	; 0x26
    28ae:	9f 89       	ldd	r25, Y+23	; 0x17
    28b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28b2:	98 0f       	add	r25, r24
    28b4:	9f a3       	std	Y+39, r25	; 0x27
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	99 af       	std	Y+57, r25	; 0x39
    28ba:	8f a1       	ldd	r24, Y+39	; 0x27
    28bc:	9f 89       	ldd	r25, Y+23	; 0x17
    28be:	89 17       	cp	r24, r25
    28c0:	08 f0       	brcs	.+2      	; 0x28c4 <TIMER0_delay_ms+0x1fa>
    28c2:	19 ae       	std	Y+57, r1	; 0x39
    28c4:	8e a9       	ldd	r24, Y+54	; 0x36
    28c6:	9f a1       	ldd	r25, Y+39	; 0x27
    28c8:	89 0f       	add	r24, r25
    28ca:	8a af       	std	Y+58, r24	; 0x3a
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	8b af       	std	Y+59, r24	; 0x3b
    28d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    28d2:	8f a1       	ldd	r24, Y+39	; 0x27
    28d4:	98 17       	cp	r25, r24
    28d6:	08 f0       	brcs	.+2      	; 0x28da <TIMER0_delay_ms+0x210>
    28d8:	1b ae       	std	Y+59, r1	; 0x3b
    28da:	99 ad       	ldd	r25, Y+57	; 0x39
    28dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    28de:	98 2b       	or	r25, r24
    28e0:	99 af       	std	Y+57, r25	; 0x39
    28e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    28e4:	9f a3       	std	Y+39, r25	; 0x27
    28e6:	88 8d       	ldd	r24, Y+24	; 0x18
    28e8:	98 a1       	ldd	r25, Y+32	; 0x20
    28ea:	89 0f       	add	r24, r25
    28ec:	88 a7       	std	Y+40, r24	; 0x28
    28ee:	89 ad       	ldd	r24, Y+57	; 0x39
    28f0:	98 a5       	ldd	r25, Y+40	; 0x28
    28f2:	89 0f       	add	r24, r25
    28f4:	88 a7       	std	Y+40, r24	; 0x28
    28f6:	89 a1       	ldd	r24, Y+33	; 0x21
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	9a a1       	ldd	r25, Y+34	; 0x22
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	8b a1       	ldd	r24, Y+35	; 0x23
    2900:	8b 83       	std	Y+3, r24	; 0x03
    2902:	9c a1       	ldd	r25, Y+36	; 0x24
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8d a1       	ldd	r24, Y+37	; 0x25
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	9e a1       	ldd	r25, Y+38	; 0x26
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8f a1       	ldd	r24, Y+39	; 0x27
    2910:	8f 83       	std	Y+7, r24	; 0x07
    2912:	98 a5       	ldd	r25, Y+40	; 0x28
    2914:	98 87       	std	Y+8, r25	; 0x08
    2916:	98 89       	ldd	r25, Y+16	; 0x10
    2918:	88 85       	ldd	r24, Y+8	; 0x08
    291a:	89 17       	cp	r24, r25
    291c:	08 f4       	brcc	.+2      	; 0x2920 <TIMER0_delay_ms+0x256>
    291e:	07 cf       	rjmp	.-498    	; 0x272e <TIMER0_delay_ms+0x64>
    2920:	98 89       	ldd	r25, Y+16	; 0x10
    2922:	88 85       	ldd	r24, Y+8	; 0x08
    2924:	98 17       	cp	r25, r24
    2926:	d9 f5       	brne	.+118    	; 0x299e <TIMER0_delay_ms+0x2d4>
    2928:	9f 85       	ldd	r25, Y+15	; 0x0f
    292a:	8f 81       	ldd	r24, Y+7	; 0x07
    292c:	89 17       	cp	r24, r25
    292e:	08 f4       	brcc	.+2      	; 0x2932 <TIMER0_delay_ms+0x268>
    2930:	fe ce       	rjmp	.-516    	; 0x272e <TIMER0_delay_ms+0x64>
    2932:	9f 85       	ldd	r25, Y+15	; 0x0f
    2934:	8f 81       	ldd	r24, Y+7	; 0x07
    2936:	98 17       	cp	r25, r24
    2938:	91 f5       	brne	.+100    	; 0x299e <TIMER0_delay_ms+0x2d4>
    293a:	9e 85       	ldd	r25, Y+14	; 0x0e
    293c:	8e 81       	ldd	r24, Y+6	; 0x06
    293e:	89 17       	cp	r24, r25
    2940:	08 f4       	brcc	.+2      	; 0x2944 <TIMER0_delay_ms+0x27a>
    2942:	f5 ce       	rjmp	.-534    	; 0x272e <TIMER0_delay_ms+0x64>
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	8e 81       	ldd	r24, Y+6	; 0x06
    2948:	98 17       	cp	r25, r24
    294a:	49 f5       	brne	.+82     	; 0x299e <TIMER0_delay_ms+0x2d4>
    294c:	9d 85       	ldd	r25, Y+13	; 0x0d
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	89 17       	cp	r24, r25
    2952:	08 f4       	brcc	.+2      	; 0x2956 <TIMER0_delay_ms+0x28c>
    2954:	ec ce       	rjmp	.-552    	; 0x272e <TIMER0_delay_ms+0x64>
    2956:	9d 85       	ldd	r25, Y+13	; 0x0d
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	98 17       	cp	r25, r24
    295c:	01 f5       	brne	.+64     	; 0x299e <TIMER0_delay_ms+0x2d4>
    295e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2960:	8c 81       	ldd	r24, Y+4	; 0x04
    2962:	89 17       	cp	r24, r25
    2964:	08 f4       	brcc	.+2      	; 0x2968 <TIMER0_delay_ms+0x29e>
    2966:	e3 ce       	rjmp	.-570    	; 0x272e <TIMER0_delay_ms+0x64>
    2968:	9c 85       	ldd	r25, Y+12	; 0x0c
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	98 17       	cp	r25, r24
    296e:	b9 f4       	brne	.+46     	; 0x299e <TIMER0_delay_ms+0x2d4>
    2970:	9b 85       	ldd	r25, Y+11	; 0x0b
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	89 17       	cp	r24, r25
    2976:	08 f4       	brcc	.+2      	; 0x297a <TIMER0_delay_ms+0x2b0>
    2978:	da ce       	rjmp	.-588    	; 0x272e <TIMER0_delay_ms+0x64>
    297a:	9b 85       	ldd	r25, Y+11	; 0x0b
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	98 17       	cp	r25, r24
    2980:	71 f4       	brne	.+28     	; 0x299e <TIMER0_delay_ms+0x2d4>
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	89 17       	cp	r24, r25
    2988:	08 f4       	brcc	.+2      	; 0x298c <TIMER0_delay_ms+0x2c2>
    298a:	d1 ce       	rjmp	.-606    	; 0x272e <TIMER0_delay_ms+0x64>
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	98 17       	cp	r25, r24
    2992:	29 f4       	brne	.+10     	; 0x299e <TIMER0_delay_ms+0x2d4>
    2994:	99 85       	ldd	r25, Y+9	; 0x09
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	89 17       	cp	r24, r25
    299a:	08 f4       	brcc	.+2      	; 0x299e <TIMER0_delay_ms+0x2d4>
    299c:	c8 ce       	rjmp	.-624    	; 0x272e <TIMER0_delay_ms+0x64>
		while(BIT_IS_CLEAR(TIFR,OCF0));
		SET_BIT(TIFR,OCF0);
	}

	/* Disbale Clock */
	TCCR0  &= 0xF8 ;
    299e:	a3 e5       	ldi	r26, 0x53	; 83
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e3 e5       	ldi	r30, 0x53	; 83
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	88 7f       	andi	r24, 0xF8	; 248
    29aa:	8c 93       	st	X, r24
}
    29ac:	eb 96       	adiw	r28, 0x3b	; 59
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <TIMER2_generatePWM>:
 * Generate Pwm Siganl According to
 * 1- Duty Cycle
 * 2- Pwm Mode
 */
void TIMER2_generatePWM(uint8 duty_cycle , TIMER_pwmMode mode)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <TIMER2_generatePWM+0x6>
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	6a 83       	std	Y+2, r22	; 0x02
	/* Select Mode Of Pwm Signals */
	TCCR2 = (TCCR2 & 0xCF) | (mode << COM20);
    29cc:	a5 e4       	ldi	r26, 0x45	; 69
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e5 e4       	ldi	r30, 0x45	; 69
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	28 2f       	mov	r18, r24
    29d8:	2f 7c       	andi	r18, 0xCF	; 207
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	82 95       	swap	r24
    29e2:	92 95       	swap	r25
    29e4:	90 7f       	andi	r25, 0xF0	; 240
    29e6:	98 27       	eor	r25, r24
    29e8:	80 7f       	andi	r24, 0xF0	; 240
    29ea:	98 27       	eor	r25, r24
    29ec:	82 2b       	or	r24, r18
    29ee:	8c 93       	st	X, r24

	OCR2 = duty_cycle;
    29f0:	e3 e4       	ldi	r30, 0x43	; 67
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	80 83       	st	Z, r24
}
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <TWI_init>:
 *2- Select Clock Of Master
 *3 - Put Adress When Work As Slave
 *4-Enable TWI
 */
 void TWI_init(const TWI_configType * configptr)
 {
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <TWI_init+0x6>
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	9a 83       	std	Y+2, r25	; 0x02
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	 /*
	  * We Assume That FCPU = 8 MHZ And Prescaller Is 0
	  */
	 /* Prescaller = 0 */
	 TWSR = 0 ;
    2a10:	e1 e2       	ldi	r30, 0x21	; 33
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	10 82       	st	Z, r1
	 if (configptr->boud_rate == K_100)
    2a16:	e9 81       	ldd	r30, Y+1	; 0x01
    2a18:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1a:	81 81       	ldd	r24, Z+1	; 0x01
    2a1c:	88 23       	and	r24, r24
    2a1e:	29 f4       	brne	.+10     	; 0x2a2a <TWI_init+0x28>
	 {
		 TWBR = TWI_TWBR_CLK_100 ;
    2a20:	e0 e2       	ldi	r30, 0x20	; 32
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 e2       	ldi	r24, 0x20	; 32
    2a26:	80 83       	st	Z, r24
    2a28:	09 c0       	rjmp	.+18     	; 0x2a3c <TWI_init+0x3a>
	 }
	 else if (configptr ->boud_rate == K_400)
    2a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2e:	81 81       	ldd	r24, Z+1	; 0x01
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	21 f4       	brne	.+8      	; 0x2a3c <TWI_init+0x3a>
	 {
		 TWBR = TWI_TWBR_CLK_400 ;
    2a34:	e0 e2       	ldi	r30, 0x20	; 32
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	80 83       	st	Z, r24
	 }

	 /* Adress Of Device When Work As Slave */
	 /* We Take First  7- Bits Of Ur Number */
	 TWAR = (configptr->slave_adress) << 1 ;
    2a3c:	a2 e2       	ldi	r26, 0x22	; 34
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e9 81       	ldd	r30, Y+1	; 0x01
    2a42:	fa 81       	ldd	r31, Y+2	; 0x02
    2a44:	80 81       	ld	r24, Z
    2a46:	88 0f       	add	r24, r24
    2a48:	8c 93       	st	X, r24
	 /* Enable TWI & Interrupt If TRUE */
	#if TWI_INTERRUPT_ENABLE == TRUE

	 TWCR = (1<<TWEN) | (1<<TWIE);
	#else
	 TWCR = (1<<TWEN);
    2a4a:	e6 e5       	ldi	r30, 0x56	; 86
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	84 e0       	ldi	r24, 0x04	; 4
    2a50:	80 83       	st	Z, r24
	#endif
 }
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <TWI_start>:
 /*
  * Send Start Bit At Bus
  */

 void TWI_start(void)
 {
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
	#if TWI_INTERRUPT_ENABLE == TRUE
	 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
	#else
	 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a64:	e6 e5       	ldi	r30, 0x56	; 86
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	84 ea       	ldi	r24, 0xA4	; 164
    2a6a:	80 83       	st	Z, r24
	 /* Wait Until Bit Is Set To indicate That Start Bit Is Set To Bus */
	 while (BIT_IS_CLEAR(TWCR,TWINT));
    2a6c:	e6 e5       	ldi	r30, 0x56	; 86
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	88 23       	and	r24, r24
    2a74:	dc f7       	brge	.-10     	; 0x2a6c <TWI_start+0x10>
	#endif
 }
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <TWI_stop>:

 /* Send Stop Bit At Bus */

  void TWI_stop(void)
  {
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
	#if TWI_INTERRUPT_ENABLE == TRUE
	 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN) | (1<<TWIE);
	#else
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2a84:	e6 e5       	ldi	r30, 0x56	; 86
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	84 e9       	ldi	r24, 0x94	; 148
    2a8a:	80 83       	st	Z, r24
	#endif
  }
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <TWI_writeByte>:

  /* Writing Byte At Bus */

 void TWI_writeByte(uint8 data)
  {
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	0f 92       	push	r0
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	  /* To Avoid Writing During Transmission */
	  while (BIT_IS_SET(TWCR,TWWC));
    2a9e:	e6 e5       	ldi	r30, 0x56	; 86
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	88 70       	andi	r24, 0x08	; 8
    2aaa:	90 70       	andi	r25, 0x00	; 0
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	b9 f7       	brne	.-18     	; 0x2a9e <TWI_writeByte+0xc>
	  /*Write Data */
	  TWDR = data ;
    2ab0:	e3 e2       	ldi	r30, 0x23	; 35
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	80 83       	st	Z, r24

	#if TWI_INTERRUPT_ENABLE == TRUE
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
	#else
	TWCR = (1 << TWINT) | (1 << TWEN);
    2ab8:	e6 e5       	ldi	r30, 0x56	; 86
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	84 e8       	ldi	r24, 0x84	; 132
    2abe:	80 83       	st	Z, r24
	/* Wait Until Bit Is Set To indicate That Data Sent To Slave  */
	while (BIT_IS_CLEAR(TWCR,TWINT));
    2ac0:	e6 e5       	ldi	r30, 0x56	; 86
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 23       	and	r24, r24
    2ac8:	dc f7       	brge	.-10     	; 0x2ac0 <TWI_writeByte+0x2e>
	#endif

  }
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <TWI_readByteWithACK>:

  /* Read Byte From Slave With Ack  That Mean Itsnot Last Byte */
 uint8 TWI_readByteWithACK(void)
   {
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
	#if TWI_INTERRUPT_ENABLE == TRUE
	   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
	   return TWDR;
	#else
	   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2ada:	e6 e5       	ldi	r30, 0x56	; 86
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	84 ec       	ldi	r24, 0xC4	; 196
    2ae0:	80 83       	st	Z, r24
	   while(BIT_IS_CLEAR(TWCR,TWINT));
    2ae2:	e6 e5       	ldi	r30, 0x56	; 86
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 23       	and	r24, r24
    2aea:	dc f7       	brge	.-10     	; 0x2ae2 <TWI_readByteWithACK+0x10>
	   return TWDR;
    2aec:	e3 e2       	ldi	r30, 0x23	; 35
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
	#endif
   }
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <TWI_readByteWithNoACK>:
   /*Read Byte From Slave Without ACK  taht Mean Its Last Byte */

    uint8 TWI_readByteWithNoACK(void)
    {
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
	#if TWI_INTERRUPT_ENABLE == TRUE
	   TWCR = (1<<TWINT) | (1<<TWEN)  | (1<<TWIE);
	   return TWDR;
	#else
	   TWCR = (1<<TWINT) | (1<<TWEN);
    2b00:	e6 e5       	ldi	r30, 0x56	; 86
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	84 e8       	ldi	r24, 0x84	; 132
    2b06:	80 83       	st	Z, r24
	   while(BIT_IS_CLEAR(TWCR,TWINT));
    2b08:	e6 e5       	ldi	r30, 0x56	; 86
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 23       	and	r24, r24
    2b10:	dc f7       	brge	.-10     	; 0x2b08 <TWI_readByteWithNoACK+0x10>
	   return TWDR;
    2b12:	e3 e2       	ldi	r30, 0x23	; 35
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
	#endif
    }
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	08 95       	ret

00002b1e <TWI_getStatus>:

    /*Get The Status Of TWI */
uint8 TWI_getStatus(void)
{
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	0f 92       	push	r0
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
	uint8 status ;
	status = TWSR & 0xF8 ;
    2b28:	e1 e2       	ldi	r30, 0x21	; 33
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	88 7f       	andi	r24, 0xF8	; 248
    2b30:	89 83       	std	Y+1, r24	; 0x01
	return status ;
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <USART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init( const USART_configType *configptr)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <USART_init+0x6>
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <USART_init+0x8>
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b4c:	1a 82       	std	Y+2, r1	; 0x02
    2b4e:	19 82       	std	Y+1, r1	; 0x01
	/* Using Double Trasmission Speed */
	UCSRA = (1<<U2X);
    2b50:	eb e2       	ldi	r30, 0x2B	; 43
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	80 83       	st	Z, r24
	#if EMPTY_INTERRUPT_ENABLE == TRUE
	SET_BIT(UCSRA,UDRIE);
	#endif

	/* Enable TX & RX */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2b58:	aa e2       	ldi	r26, 0x2A	; 42
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ea e2       	ldi	r30, 0x2A	; 42
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	88 61       	ori	r24, 0x18	; 24
    2b64:	8c 93       	st	X, r24

	/* To Write In  UCSRC Register  Should Set USRSEL */
	SET_BIT(UCSRC,URSEL);
    2b66:	a0 e4       	ldi	r26, 0x40	; 64
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e0 e4       	ldi	r30, 0x40	; 64
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	80 68       	ori	r24, 0x80	; 128
    2b72:	8c 93       	st	X, r24
	 * Clock  Polarity At Synchronous Mode only
	 * Is Rising In Tx Falling In Rx
	 * if U Want to Change It Change UCPOL Bit
	 */

	if (configptr ->mode == SYNCHRONOUS)
    2b74:	eb 81       	ldd	r30, Y+3	; 0x03
    2b76:	fc 81       	ldd	r31, Y+4	; 0x04
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	79 f4       	brne	.+30     	; 0x2b9c <USART_init+0x60>
	{
		SET_BIT(UCSRC,UMSEL);
    2b7e:	a0 e4       	ldi	r26, 0x40	; 64
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e0 e4       	ldi	r30, 0x40	; 64
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	80 64       	ori	r24, 0x40	; 64
    2b8a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCPOL);
    2b8c:	a0 e4       	ldi	r26, 0x40	; 64
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e0 e4       	ldi	r30, 0x40	; 64
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	8e 7f       	andi	r24, 0xFE	; 254
    2b98:	8c 93       	st	X, r24
    2b9a:	0e c0       	rjmp	.+28     	; 0x2bb8 <USART_init+0x7c>

	}
	else
	{
		CLEAR_BIT(UCSRC,UMSEL);
    2b9c:	a0 e4       	ldi	r26, 0x40	; 64
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e0 e4       	ldi	r30, 0x40	; 64
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	8f 7b       	andi	r24, 0xBF	; 191
    2ba8:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCPOL);
    2baa:	a0 e4       	ldi	r26, 0x40	; 64
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e0 e4       	ldi	r30, 0x40	; 64
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	8e 7f       	andi	r24, 0xFE	; 254
    2bb6:	8c 93       	st	X, r24
	}

	/* Parity Mode Selection */

	UCSRC = (UCSRC & 0xCF) | ((configptr->parity_mode) << 4);
    2bb8:	a0 e4       	ldi	r26, 0x40	; 64
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e0 e4       	ldi	r30, 0x40	; 64
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	2f 7c       	andi	r18, 0xCF	; 207
    2bc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bca:	83 81       	ldd	r24, Z+3	; 0x03
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	82 95       	swap	r24
    2bd2:	92 95       	swap	r25
    2bd4:	90 7f       	andi	r25, 0xF0	; 240
    2bd6:	98 27       	eor	r25, r24
    2bd8:	80 7f       	andi	r24, 0xF0	; 240
    2bda:	98 27       	eor	r25, r24
    2bdc:	82 2b       	or	r24, r18
    2bde:	8c 93       	st	X, r24

	/* Select Number Of Stop Bits */

	if (configptr->stop_bit == BIT_1)
    2be0:	eb 81       	ldd	r30, Y+3	; 0x03
    2be2:	fc 81       	ldd	r31, Y+4	; 0x04
    2be4:	84 81       	ldd	r24, Z+4	; 0x04
    2be6:	88 23       	and	r24, r24
    2be8:	41 f4       	brne	.+16     	; 0x2bfa <USART_init+0xbe>
	{
		CLEAR_BIT(UCSRC,USBS);
    2bea:	a0 e4       	ldi	r26, 0x40	; 64
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e0 e4       	ldi	r30, 0x40	; 64
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	87 7f       	andi	r24, 0xF7	; 247
    2bf6:	8c 93       	st	X, r24
    2bf8:	07 c0       	rjmp	.+14     	; 0x2c08 <USART_init+0xcc>
	}
	else
	{
		SET_BIT(UCSRC,USBS);
    2bfa:	a0 e4       	ldi	r26, 0x40	; 64
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e0 e4       	ldi	r30, 0x40	; 64
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	88 60       	ori	r24, 0x08	; 8
    2c06:	8c 93       	st	X, r24
	}

	/* Character Size Of Data */

	if (configptr->data_size == BIT_9)
    2c08:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c0c:	85 81       	ldd	r24, Z+5	; 0x05
    2c0e:	87 30       	cpi	r24, 0x07	; 7
    2c10:	79 f4       	brne	.+30     	; 0x2c30 <USART_init+0xf4>
	{
		SET_BIT(UCSRB,UCSZ2);
    2c12:	aa e2       	ldi	r26, 0x2A	; 42
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	ea e2       	ldi	r30, 0x2A	; 42
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	84 60       	ori	r24, 0x04	; 4
    2c1e:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF9) | (0x3<<1);
    2c20:	a0 e4       	ldi	r26, 0x40	; 64
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e0 e4       	ldi	r30, 0x40	; 64
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	86 60       	ori	r24, 0x06	; 6
    2c2c:	8c 93       	st	X, r24
    2c2e:	17 c0       	rjmp	.+46     	; 0x2c5e <USART_init+0x122>
	}
	else
	{
		CLEAR_BIT(UCSRB,UCSZ2);
    2c30:	aa e2       	ldi	r26, 0x2A	; 42
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	ea e2       	ldi	r30, 0x2A	; 42
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8b 7f       	andi	r24, 0xFB	; 251
    2c3c:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF9) | ((configptr->data_size) << 1);
    2c3e:	a0 e4       	ldi	r26, 0x40	; 64
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e0 e4       	ldi	r30, 0x40	; 64
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	28 2f       	mov	r18, r24
    2c4a:	29 7f       	andi	r18, 0xF9	; 249
    2c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c50:	85 81       	ldd	r24, Z+5	; 0x05
    2c52:	88 2f       	mov	r24, r24
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	82 2b       	or	r24, r18
    2c5c:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (configptr->baud_rate * 8UL))) - 1);
    2c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c60:	fc 81       	ldd	r31, Y+4	; 0x04
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	cc 01       	movw	r24, r24
    2c68:	a0 e0       	ldi	r26, 0x00	; 0
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	aa 1f       	adc	r26, r26
    2c72:	bb 1f       	adc	r27, r27
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	aa 1f       	adc	r26, r26
    2c7a:	bb 1f       	adc	r27, r27
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	aa 1f       	adc	r26, r26
    2c82:	bb 1f       	adc	r27, r27
    2c84:	9c 01       	movw	r18, r24
    2c86:	ad 01       	movw	r20, r26
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	92 e1       	ldi	r25, 0x12	; 18
    2c8c:	aa e7       	ldi	r26, 0x7A	; 122
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__udivmodsi4>
    2c98:	da 01       	movw	r26, r20
    2c9a:	c9 01       	movw	r24, r18
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2ca2:	e0 e4       	ldi	r30, 0x40	; 64
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	89 2f       	mov	r24, r25
    2cac:	99 27       	eor	r25, r25
    2cae:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2cb0:	e9 e2       	ldi	r30, 0x29	; 41
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	80 83       	st	Z, r24
}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <USART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(const uint8 data)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	#if TX_INTERRUPT_ENABLE == TRUE
	UDR = data ;
	#else
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    2cd2:	eb e2       	ldi	r30, 0x2B	; 43
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	80 72       	andi	r24, 0x20	; 32
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	b9 f3       	breq	.-18     	; 0x2cd2 <USART_sendByte+0xc>
	UDR = data ;
    2ce4:	ec e2       	ldi	r30, 0x2C	; 44
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	80 83       	st	Z, r24
	 UDR = data ;
	 while(BIT_IS_CLEAR(UCSRA,TXC));
	 SET_BIT(UCSRA,TXC);
	 ***********************************************************************/
	#endif
}
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <USART_recieveByte>:
 * Description :
 * Functional responsible for receive byte from another UART device.
 * if there are Any Frame Or Priority Error This Function Will Return 0
 */
uint8 USART_recieveByte(void)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	0f 92       	push	r0
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
	/* Check For Frame Error */
	if (BIT_IS_SET(UCSRA,FE))
    2cfe:	eb e2       	ldi	r30, 0x2B	; 43
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	80 71       	andi	r24, 0x10	; 16
    2d0a:	90 70       	andi	r25, 0x00	; 0
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	11 f0       	breq	.+4      	; 0x2d14 <USART_recieveByte+0x20>
	{
		return 0 ;
    2d10:	19 82       	std	Y+1, r1	; 0x01
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <USART_recieveByte+0x48>
	else
	{
		/* Do Nothing */
	}
	/* Check For Parity Error */
	if (BIT_IS_SET(UCSRA,PE))
    2d14:	eb e2       	ldi	r30, 0x2B	; 43
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	84 70       	andi	r24, 0x04	; 4
    2d20:	90 70       	andi	r25, 0x00	; 0
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	11 f0       	breq	.+4      	; 0x2d2a <USART_recieveByte+0x36>
	{
		return 0 ;
    2d26:	19 82       	std	Y+1, r1	; 0x01
    2d28:	09 c0       	rjmp	.+18     	; 0x2d3c <USART_recieveByte+0x48>
		/* Do Nothing */
	}
#if RX_INTERRUPT_ENABLE == TRUE
	return UDR ;
#else
	while (BIT_IS_CLEAR(UCSRA,RXC));
    2d2a:	eb e2       	ldi	r30, 0x2B	; 43
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	88 23       	and	r24, r24
    2d32:	dc f7       	brge	.-10     	; 0x2d2a <USART_recieveByte+0x36>
	return UDR ;
    2d34:	ec e2       	ldi	r30, 0x2C	; 44
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
#endif
}
    2d3e:	0f 90       	pop	r0
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(const uint8 *Str)
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <USART_sendString+0x6>
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	9b 83       	std	Y+3, r25	; 0x03
    2d54:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d56:	19 82       	std	Y+1, r1	; 0x01
    2d58:	0e c0       	rjmp	.+28     	; 0x2d76 <USART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		USART_sendByte(Str[i]);
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	fc 01       	movw	r30, r24
    2d66:	e2 0f       	add	r30, r18
    2d68:	f3 1f       	adc	r31, r19
    2d6a:	80 81       	ld	r24, Z
    2d6c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_sendByte>
		i++;
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	8f 5f       	subi	r24, 0xFF	; 255
    2d74:	89 83       	std	Y+1, r24	; 0x01
void USART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d80:	fc 01       	movw	r30, r24
    2d82:	e2 0f       	add	r30, r18
    2d84:	f3 1f       	adc	r31, r19
    2d86:	80 81       	ld	r24, Z
    2d88:	88 23       	and	r24, r24
    2d8a:	39 f7       	brne	.-50     	; 0x2d5a <USART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <USART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_receiveString(uint8 *Str)
{
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <USART_receiveString+0xa>
    2da2:	0f 92       	push	r0
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	9b 83       	std	Y+3, r25	; 0x03
    2daa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_recieveByte();
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	8c 01       	movw	r16, r24
    2dba:	02 0f       	add	r16, r18
    2dbc:	13 1f       	adc	r17, r19
    2dbe:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	80 83       	st	Z, r24
    2dc6:	0f c0       	rjmp	.+30     	; 0x2de6 <USART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd8:	8c 01       	movw	r16, r24
    2dda:	02 0f       	add	r16, r18
    2ddc:	13 1f       	adc	r17, r19
    2dde:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <USART_recieveByte>
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = USART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	9b 81       	ldd	r25, Y+3	; 0x03
    2df0:	fc 01       	movw	r30, r24
    2df2:	e2 0f       	add	r30, r18
    2df4:	f3 1f       	adc	r31, r19
    2df6:	80 81       	ld	r24, Z
    2df8:	83 32       	cpi	r24, 0x23	; 35
    2dfa:	31 f7       	brne	.-52     	; 0x2dc8 <USART_receiveString+0x30>
		i++;
		Str[i] = USART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	28 2f       	mov	r18, r24
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	fc 01       	movw	r30, r24
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	10 82       	st	Z, r1
}
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	08 95       	ret

00002e1e <__udivmodsi4>:
    2e1e:	a1 e2       	ldi	r26, 0x21	; 33
    2e20:	1a 2e       	mov	r1, r26
    2e22:	aa 1b       	sub	r26, r26
    2e24:	bb 1b       	sub	r27, r27
    2e26:	fd 01       	movw	r30, r26
    2e28:	0d c0       	rjmp	.+26     	; 0x2e44 <__udivmodsi4_ep>

00002e2a <__udivmodsi4_loop>:
    2e2a:	aa 1f       	adc	r26, r26
    2e2c:	bb 1f       	adc	r27, r27
    2e2e:	ee 1f       	adc	r30, r30
    2e30:	ff 1f       	adc	r31, r31
    2e32:	a2 17       	cp	r26, r18
    2e34:	b3 07       	cpc	r27, r19
    2e36:	e4 07       	cpc	r30, r20
    2e38:	f5 07       	cpc	r31, r21
    2e3a:	20 f0       	brcs	.+8      	; 0x2e44 <__udivmodsi4_ep>
    2e3c:	a2 1b       	sub	r26, r18
    2e3e:	b3 0b       	sbc	r27, r19
    2e40:	e4 0b       	sbc	r30, r20
    2e42:	f5 0b       	sbc	r31, r21

00002e44 <__udivmodsi4_ep>:
    2e44:	66 1f       	adc	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	88 1f       	adc	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	1a 94       	dec	r1
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <__udivmodsi4_loop>
    2e50:	60 95       	com	r22
    2e52:	70 95       	com	r23
    2e54:	80 95       	com	r24
    2e56:	90 95       	com	r25
    2e58:	9b 01       	movw	r18, r22
    2e5a:	ac 01       	movw	r20, r24
    2e5c:	bd 01       	movw	r22, r26
    2e5e:	cf 01       	movw	r24, r30
    2e60:	08 95       	ret

00002e62 <__prologue_saves__>:
    2e62:	2f 92       	push	r2
    2e64:	3f 92       	push	r3
    2e66:	4f 92       	push	r4
    2e68:	5f 92       	push	r5
    2e6a:	6f 92       	push	r6
    2e6c:	7f 92       	push	r7
    2e6e:	8f 92       	push	r8
    2e70:	9f 92       	push	r9
    2e72:	af 92       	push	r10
    2e74:	bf 92       	push	r11
    2e76:	cf 92       	push	r12
    2e78:	df 92       	push	r13
    2e7a:	ef 92       	push	r14
    2e7c:	ff 92       	push	r15
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	ca 1b       	sub	r28, r26
    2e8c:	db 0b       	sbc	r29, r27
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	09 94       	ijmp

00002e9a <__epilogue_restores__>:
    2e9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e9c:	39 88       	ldd	r3, Y+17	; 0x11
    2e9e:	48 88       	ldd	r4, Y+16	; 0x10
    2ea0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ea2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eac:	b9 84       	ldd	r11, Y+9	; 0x09
    2eae:	c8 84       	ldd	r12, Y+8	; 0x08
    2eb0:	df 80       	ldd	r13, Y+7	; 0x07
    2eb2:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb4:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb6:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb8:	1b 81       	ldd	r17, Y+3	; 0x03
    2eba:	aa 81       	ldd	r26, Y+2	; 0x02
    2ebc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ebe:	ce 0f       	add	r28, r30
    2ec0:	d1 1d       	adc	r29, r1
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	ed 01       	movw	r28, r26
    2ece:	08 95       	ret

00002ed0 <_exit>:
    2ed0:	f8 94       	cli

00002ed2 <__stop_program>:
    2ed2:	ff cf       	rjmp	.-2      	; 0x2ed2 <__stop_program>
