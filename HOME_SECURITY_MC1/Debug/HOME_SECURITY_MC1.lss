
HOME_SECURITY_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00003336  000033ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080010c  0080010c  00003476  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00003478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f8  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b519  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__vector_3>
      10:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__vector_4>
      14:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__vector_5>
      18:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__vector_6>
      1c:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__vector_7>
      20:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__vector_8>
      24:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <main>
      8a:	0c 94 99 19 	jmp	0x3332	; 0x3332 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * input : (port_number - pint_number - Direction Of Pin (PIN_INPUT/PIN_OUTPUT))
 * output : non
 * Note : If Input Pin Or Port Number Isnot Invalide It Does Nothing
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		switch (port_num) {
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * output :None
 * Note : If The Input Pin Or Port Isnot invalde it Does Nothing
 * note : The Function Will Enable/Disable Pull up Resistor depends on direction
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		switch (port_num) {
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Read The Value Of Corresponding Pi
 * input :(port_number - pin_number )
 * output: Value Of Pin (LOGIC_HIGH/LOGIC_LOW )
 * note : If The Input Port Or Pin Isnot Invalde It Returns (LOGIC_LOW)
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	18 f4       	brcc	.+6      	; 0xf10 <GPIO_readPin+0x1e>
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <GPIO_readPin+0x22>
		return LOGIC_LOW;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	6d c0       	rjmp	.+218    	; 0xfee <GPIO_readPin+0xfc>
	} else {
		switch (port_num) {
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	49 f1       	breq	.+82     	; 0xf7a <GPIO_readPin+0x88>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	61 f0       	breq	.+24     	; 0xf54 <GPIO_readPin+0x62>
     f3c:	57 c0       	rjmp	.+174    	; 0xfec <GPIO_readPin+0xfa>
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	61 f1       	breq	.+88     	; 0xfa0 <GPIO_readPin+0xae>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	d1 f1       	breq	.+116    	; 0xfc6 <GPIO_readPin+0xd4>
     f52:	4c c0       	rjmp	.+152    	; 0xfec <GPIO_readPin+0xfa>
		case PORTA_ID:
			return GET_BIT(PINA, pin_num);
     f54:	e9 e3       	ldi	r30, 0x39	; 57
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <GPIO_readPin+0x7a>
     f68:	55 95       	asr	r21
     f6a:	47 95       	ror	r20
     f6c:	8a 95       	dec	r24
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <GPIO_readPin+0x76>
     f70:	ca 01       	movw	r24, r20
     f72:	58 2f       	mov	r21, r24
     f74:	51 70       	andi	r21, 0x01	; 1
     f76:	5d 83       	std	Y+5, r21	; 0x05
     f78:	3a c0       	rjmp	.+116    	; 0xfee <GPIO_readPin+0xfc>
		case PORTB_ID:
			return GET_BIT(PINB, pin_num);
     f7a:	e6 e3       	ldi	r30, 0x36	; 54
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <GPIO_readPin+0xa0>
     f8e:	55 95       	asr	r21
     f90:	47 95       	ror	r20
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <GPIO_readPin+0x9c>
     f96:	ca 01       	movw	r24, r20
     f98:	58 2f       	mov	r21, r24
     f9a:	51 70       	andi	r21, 0x01	; 1
     f9c:	5d 83       	std	Y+5, r21	; 0x05
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <GPIO_readPin+0xfc>
		case PORTC_ID:
			return GET_BIT(PINC, pin_num);
     fa0:	e3 e3       	ldi	r30, 0x33	; 51
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_readPin+0xc6>
     fb4:	55 95       	asr	r21
     fb6:	47 95       	ror	r20
     fb8:	8a 95       	dec	r24
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_readPin+0xc2>
     fbc:	ca 01       	movw	r24, r20
     fbe:	58 2f       	mov	r21, r24
     fc0:	51 70       	andi	r21, 0x01	; 1
     fc2:	5d 83       	std	Y+5, r21	; 0x05
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <GPIO_readPin+0xfc>
		case PORTD_ID:
			return GET_BIT(PIND, pin_num);
     fc6:	e0 e3       	ldi	r30, 0x30	; 48
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_readPin+0xec>
     fda:	55 95       	asr	r21
     fdc:	47 95       	ror	r20
     fde:	8a 95       	dec	r24
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_readPin+0xe8>
     fe2:	ca 01       	movw	r24, r20
     fe4:	58 2f       	mov	r21, r24
     fe6:	51 70       	andi	r21, 0x01	; 1
     fe8:	5d 83       	std	Y+5, r21	; 0x05
     fea:	01 c0       	rjmp	.+2      	; 0xfee <GPIO_readPin+0xfc>
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_readPin+0x100>
		}
	}
}
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	8e 83       	std	Y+6, r24	; 0x06
     ff2:	8e 81       	ldd	r24, Y+6	; 0x06
     ff4:	26 96       	adiw	r28, 0x06	; 6
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <GPIO_setupPortDirection>:
 * input :(port_num,The Direction Of Port (PORT_INPUT/PORT_OUTPUT))
 * output: None
 * Note : If The Input Port Isnot Correct It Handle Nothing
 */

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <GPIO_setupPortDirection+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <GPIO_setupPortDirection+0x8>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS) {
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	90 f5       	brcc	.+100    	; 0x1080 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		switch (port_num) {
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3c 83       	std	Y+4, r19	; 0x04
    1024:	2b 83       	std	Y+3, r18	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	91 05       	cpc	r25, r1
    102e:	d1 f0       	breq	.+52     	; 0x1064 <GPIO_setupPortDirection+0x5e>
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	2c f4       	brge	.+10     	; 0x1044 <GPIO_setupPortDirection+0x3e>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	61 f0       	breq	.+24     	; 0x105a <GPIO_setupPortDirection+0x54>
    1042:	1e c0       	rjmp	.+60     	; 0x1080 <GPIO_setupPortDirection+0x7a>
    1044:	2b 81       	ldd	r18, Y+3	; 0x03
    1046:	3c 81       	ldd	r19, Y+4	; 0x04
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	81 f0       	breq	.+32     	; 0x106e <GPIO_setupPortDirection+0x68>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	81 f0       	breq	.+32     	; 0x1078 <GPIO_setupPortDirection+0x72>
    1058:	13 c0       	rjmp	.+38     	; 0x1080 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    105a:	ea e3       	ldi	r30, 0x3A	; 58
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	80 83       	st	Z, r24
    1062:	0e c0       	rjmp	.+28     	; 0x1080 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1064:	e7 e3       	ldi	r30, 0x37	; 55
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	80 83       	st	Z, r24
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	80 83       	st	Z, r24
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1078:	e1 e3       	ldi	r30, 0x31	; 49
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 83       	st	Z, r24
			break;

		}
	}
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <GPIO_writePort>:
 * Write The Corresponding Value At Port
 * input : (port_number,value Of Port )
 * output : None
 * Note : If The PortNumber Is Invalide The Function Handle Nothing
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <GPIO_writePort+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_writePort+0x8>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS) {
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	90 f5       	brcc	.+100    	; 0x1108 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		switch (port_num) {
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	2b 83       	std	Y+3, r18	; 0x03
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	d1 f0       	breq	.+52     	; 0x10ec <GPIO_writePort+0x5e>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <GPIO_writePort+0x3e>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <GPIO_writePort+0x54>
    10ca:	1e c0       	rjmp	.+60     	; 0x1108 <GPIO_writePort+0x7a>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	81 f0       	breq	.+32     	; 0x10f6 <GPIO_writePort+0x68>
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	81 f0       	breq	.+32     	; 0x1100 <GPIO_writePort+0x72>
    10e0:	13 c0       	rjmp	.+38     	; 0x1108 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    10e2:	eb e3       	ldi	r30, 0x3B	; 59
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 83       	st	Z, r24
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	80 83       	st	Z, r24
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	80 83       	st	Z, r24
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1100:	e2 e3       	ldi	r30, 0x32	; 50
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	80 83       	st	Z, r24
			break;
		}
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <GPIO_readPort>:
 * Read The Corresponding Value From Port
 * input : (port_number )
 * output: The Value Of Port
 * Note : If The Port Number Is Invalide  It Return (Zero )
 */
uint8 GPIO_readPort(uint8 port_num) {
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <GPIO_readPort+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <GPIO_readPort+0x8>
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
	if (port_num >= NUM_OF_PORTS) {
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	10 f0       	brcs	.+4      	; 0x1130 <GPIO_readPort+0x1a>
		return 0;
    112c:	1c 82       	std	Y+4, r1	; 0x04
    112e:	34 c0       	rjmp	.+104    	; 0x1198 <GPIO_readPort+0x82>
	} else {
		switch (port_num) {
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3b 83       	std	Y+3, r19	; 0x03
    1138:	2a 83       	std	Y+2, r18	; 0x02
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	d1 f0       	breq	.+52     	; 0x1178 <GPIO_readPort+0x62>
    1144:	2a 81       	ldd	r18, Y+2	; 0x02
    1146:	3b 81       	ldd	r19, Y+3	; 0x03
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <GPIO_readPort+0x42>
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <GPIO_readPort+0x58>
    1156:	1f c0       	rjmp	.+62     	; 0x1196 <GPIO_readPort+0x80>
    1158:	2a 81       	ldd	r18, Y+2	; 0x02
    115a:	3b 81       	ldd	r19, Y+3	; 0x03
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <GPIO_readPort+0x6c>
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <GPIO_readPort+0x76>
    116c:	14 c0       	rjmp	.+40     	; 0x1196 <GPIO_readPort+0x80>
		case PORTA_ID:
			return PINA;
    116e:	e9 e3       	ldi	r30, 0x39	; 57
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	90 81       	ld	r25, Z
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <GPIO_readPort+0x82>
		case PORTB_ID:
			return PINB;
    1178:	e6 e3       	ldi	r30, 0x36	; 54
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	20 81       	ld	r18, Z
    117e:	2c 83       	std	Y+4, r18	; 0x04
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <GPIO_readPort+0x82>
		case PORTC_ID:
			return PINC;
    1182:	e3 e3       	ldi	r30, 0x33	; 51
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	30 81       	ld	r19, Z
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <GPIO_readPort+0x82>
		case PORTD_ID:
			return PIND;
    118c:	e0 e3       	ldi	r30, 0x30	; 48
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8c 83       	std	Y+4, r24	; 0x04
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <GPIO_readPort+0x82>
    1196:	02 c0       	rjmp	.+4      	; 0x119c <GPIO_readPort+0x86>
		}
	}
}
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	9d 83       	std	Y+5, r25	; 0x05
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <KEYPAD_getPressedKey>:

/* Declration Of Function */
/* Return The Value Of  Key Pressed */

uint8 KEYPAD_getPressedKey(void)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <KEYPAD_getPressedKey+0x6>
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	/* Initialization For Local Variables Which Will Us At Looping & Values */
	uint8 col , row ;
	uint8 port_value = 0 ;
    11ba:	19 82       	std	Y+1, r1	; 0x01

	while (1)
	{
		/* Looping For Cols */
		for(col = 0 ; col < NUM_OF_COLS ; col ++)
    11bc:	1b 82       	std	Y+3, r1	; 0x03
    11be:	43 c0       	rjmp	.+134    	; 0x1246 <KEYPAD_getPressedKey+0x98>
		{
			/* Setup The Direction Of Port */
			GPIO_setupPortDirection(KEYPAD_PORT_ID, PORT_INPUT);
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	0e 94 03 08 	call	0x1006	; 0x1006 <GPIO_setupPortDirection>
			/* Setup The Direction Of Corrsponidng Pin As  Output */
			GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, PIN_OUTPUT);
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	98 2f       	mov	r25, r24
    11cc:	9c 5f       	subi	r25, 0xFC	; 252
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	69 2f       	mov	r22, r25
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			#if KEYPAD_BUTTON_PRESSED == LOGIC_LOW
			port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9c 01       	movw	r18, r24
    11e0:	2c 5f       	subi	r18, 0xFC	; 252
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <KEYPAD_getPressedKey+0x40>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	2a 95       	dec	r18
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <KEYPAD_getPressedKey+0x3c>
    11f2:	80 95       	com	r24
    11f4:	89 83       	std	Y+1, r24	; 0x01
			#else
			port_value = (1<<(KEYPAD_FIRST_COL_PIN_ID+col));
            #endif
			/* Write The Value Of Port At KEYPAD Port Id */
			GPIO_writePort(KEYPAD_PORT_ID, port_value);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	69 81       	ldd	r22, Y+1	; 0x01
    11fa:	0e 94 47 08 	call	0x108e	; 0x108e <GPIO_writePort>

			/* Looping For Rows */
			for(row=0; row < NUM_OF_ROWS ; row ++)
    11fe:	1a 82       	std	Y+2, r1	; 0x02
    1200:	1c c0       	rjmp	.+56     	; 0x123a <KEYPAD_getPressedKey+0x8c>
			{
				if (GPIO_readPin(KEYPAD_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row) == KEYPAD_BUTTON_PRESSED)
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	6a 81       	ldd	r22, Y+2	; 0x02
    1206:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    120a:	88 23       	and	r24, r24
    120c:	99 f4       	brne	.+38     	; 0x1234 <KEYPAD_getPressedKey+0x86>
				{
					#if NUM_OF_COLS == 3
					return KEYPAD_4x3_adjustKeyNumber((row*NUM_OF_COLS)+col+1);
					#else
					return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COLS)+col+1);
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	98 2f       	mov	r25, r24
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	89 0f       	add	r24, r25
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	0e 94 28 09 	call	0x1250	; 0x1250 <KEYPAD_4x4_adjustKeyNumber>
					/* Do Nothing */
				}
			}
		}
	}
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret
            #endif
			/* Write The Value Of Port At KEYPAD Port Id */
			GPIO_writePort(KEYPAD_PORT_ID, port_value);

			/* Looping For Rows */
			for(row=0; row < NUM_OF_ROWS ; row ++)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	08 f3       	brcs	.-62     	; 0x1202 <KEYPAD_getPressedKey+0x54>
	uint8 port_value = 0 ;

	while (1)
	{
		/* Looping For Cols */
		for(col = 0 ; col < NUM_OF_COLS ; col ++)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f4       	brcc	.+2      	; 0x124e <KEYPAD_getPressedKey+0xa0>
    124c:	b9 cf       	rjmp	.-142    	; 0x11c0 <KEYPAD_getPressedKey+0x12>
    124e:	b6 cf       	rjmp	.-148    	; 0x11bc <KEYPAD_getPressedKey+0xe>

00001250 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif NUM_OF_COLS == 4

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key_button = 0 ;
    125e:	19 82       	std	Y+1, r1	; 0x01

		switch(button_number)
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3c 83       	std	Y+4, r19	; 0x04
    1268:	2b 83       	std	Y+3, r18	; 0x03
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	88 30       	cpi	r24, 0x08	; 8
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1274:	70 c0       	rjmp	.+224    	; 0x1356 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	29 30       	cpi	r18, 0x09	; 9
    127c:	31 05       	cpc	r19, r1
    127e:	5c f5       	brge	.+86     	; 0x12d6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    128a:	59 c0       	rjmp	.+178    	; 0x133e <KEYPAD_4x4_adjustKeyNumber+0xee>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	25 30       	cpi	r18, 0x05	; 5
    1292:	31 05       	cpc	r19, r1
    1294:	9c f4       	brge	.+38     	; 0x12bc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    12a0:	48 c0       	rjmp	.+144    	; 0x1332 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12a2:	2b 81       	ldd	r18, Y+3	; 0x03
    12a4:	3c 81       	ldd	r19, Y+4	; 0x04
    12a6:	23 30       	cpi	r18, 0x03	; 3
    12a8:	31 05       	cpc	r19, r1
    12aa:	0c f0       	brlt	.+2      	; 0x12ae <KEYPAD_4x4_adjustKeyNumber+0x5e>
    12ac:	45 c0       	rjmp	.+138    	; 0x1338 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <KEYPAD_4x4_adjustKeyNumber+0x6a>
    12b8:	39 c0       	rjmp	.+114    	; 0x132c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    12ba:	67 c0       	rjmp	.+206    	; 0x138a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	26 30       	cpi	r18, 0x06	; 6
    12c2:	31 05       	cpc	r19, r1
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    12c6:	41 c0       	rjmp	.+130    	; 0x134a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	87 30       	cpi	r24, 0x07	; 7
    12ce:	91 05       	cpc	r25, r1
    12d0:	0c f0       	brlt	.+2      	; 0x12d4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    12d2:	3e c0       	rjmp	.+124    	; 0x1350 <KEYPAD_4x4_adjustKeyNumber+0x100>
    12d4:	37 c0       	rjmp	.+110    	; 0x1344 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	2c 30       	cpi	r18, 0x0C	; 12
    12dc:	31 05       	cpc	r19, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    12e0:	46 c0       	rjmp	.+140    	; 0x136e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	8d 30       	cpi	r24, 0x0D	; 13
    12e8:	91 05       	cpc	r25, r1
    12ea:	5c f4       	brge	.+22     	; 0x1302 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    12ec:	2b 81       	ldd	r18, Y+3	; 0x03
    12ee:	3c 81       	ldd	r19, Y+4	; 0x04
    12f0:	2a 30       	cpi	r18, 0x0A	; 10
    12f2:	31 05       	cpc	r19, r1
    12f4:	b1 f1       	breq	.+108    	; 0x1362 <KEYPAD_4x4_adjustKeyNumber+0x112>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	8b 30       	cpi	r24, 0x0B	; 11
    12fc:	91 05       	cpc	r25, r1
    12fe:	a4 f5       	brge	.+104    	; 0x1368 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1300:	2d c0       	rjmp	.+90     	; 0x135c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	2e 30       	cpi	r18, 0x0E	; 14
    1308:	31 05       	cpc	r19, r1
    130a:	b9 f1       	breq	.+110    	; 0x137a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	8e 30       	cpi	r24, 0x0E	; 14
    1312:	91 05       	cpc	r25, r1
    1314:	7c f1       	brlt	.+94     	; 0x1374 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	2f 30       	cpi	r18, 0x0F	; 15
    131c:	31 05       	cpc	r19, r1
    131e:	79 f1       	breq	.+94     	; 0x137e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	80 31       	cpi	r24, 0x10	; 16
    1326:	91 05       	cpc	r25, r1
    1328:	69 f1       	breq	.+90     	; 0x1384 <KEYPAD_4x4_adjustKeyNumber+0x134>
    132a:	2f c0       	rjmp	.+94     	; 0x138a <KEYPAD_4x4_adjustKeyNumber+0x13a>
		{
		case 1:
		key_button = 7;
    132c:	87 e0       	ldi	r24, 0x07	; 7
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	2e c0       	rjmp	.+92     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		key_button = 8;
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	2b c0       	rjmp	.+86     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		key_button = 9;
    1338:	89 e0       	ldi	r24, 0x09	; 9
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	28 c0       	rjmp	.+80     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		key_button = '%'; // ASCII Code of %
    133e:	85 e2       	ldi	r24, 0x25	; 37
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	25 c0       	rjmp	.+74     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		key_button = 4;
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	22 c0       	rjmp	.+68     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		key_button = 5;
    134a:	85 e0       	ldi	r24, 0x05	; 5
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	1f c0       	rjmp	.+62     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		key_button = 6;
    1350:	86 e0       	ldi	r24, 0x06	; 6
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	1c c0       	rjmp	.+56     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		key_button = '*'; /* ASCII Code of '*' */
    1356:	8a e2       	ldi	r24, 0x2A	; 42
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	19 c0       	rjmp	.+50     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		key_button = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	16 c0       	rjmp	.+44     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		key_button = 2;
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	13 c0       	rjmp	.+38     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		key_button = 3;
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	10 c0       	rjmp	.+32     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		key_button = '-'; /* ASCII Code of '-' */
    136e:	8d e2       	ldi	r24, 0x2D	; 45
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	0d c0       	rjmp	.+26     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		key_button = 13; /* ASCII of Enter */
    1374:	8d e0       	ldi	r24, 0x0D	; 13
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	0a c0       	rjmp	.+20     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		key_button = 0;
    137a:	19 82       	std	Y+1, r1	; 0x01
    137c:	08 c0       	rjmp	.+16     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		key_button = '='; /* ASCII Code of '=' */
    137e:	8d e3       	ldi	r24, 0x3D	; 61
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	05 c0       	rjmp	.+10     	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		key_button = '+'; /* ASCII Code of '+' */
    1384:	8b e2       	ldi	r24, 0x2B	; 43
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	02 c0       	rjmp	.+4      	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		key_button = button_number;
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
		return key_button;
    138e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <LCD_init>:
/*
 * Init Function For LCD
 */

void LCD_init(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setup The Direction Of  ( RS - RW - E ) As OUTPUT
	 */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	64 e0       	ldi	r22, 0x04	; 4
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	65 e0       	ldi	r22, 0x05	; 5
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	66 e0       	ldi	r22, 0x06	; 6
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/***************************************************************/
	/* IF LCD_MODE IS 8 BITS Mode Setup All Data Port As OUTPUT */
	#if LCD_DATA_BITS_MODE == 8
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	6f ef       	ldi	r22, 0xFF	; 255
    13c8:	0e 94 03 08 	call	0x1006	; 0x1006 <GPIO_setupPortDirection>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_FIRST_DATA_PINS+2, PIN_OUTPUT);
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_FIRST_DATA_PINS+3, PIN_OUTPUT);
	LCD_sendCommand(LCD_GO_TO_HOME);
	#endif
	/* Send Command Of Your LCD MODE */
	LCD_sendCommand(LCD_MODE);
    13cc:	88 e3       	ldi	r24, 0x38	; 56
    13ce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <LCD_sendCommand>

	/* Cursor Off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    13d2:	8c e0       	ldi	r24, 0x0C	; 12
    13d4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <LCD_sendCommand>

	/* Clear LCD Screen */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <LCD_sendCommand>

}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <LCD_sendCommand>:
/*
 * Send The Corresponding Command To LCD
 */

void LCD_sendCommand(uint8 command)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	ea 97       	sbiw	r28, 0x3a	; 58
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	8a af       	std	Y+58, r24	; 0x3a
	uint8 value_of_port = 0 ;
    13fa:	19 ae       	std	Y+57, r1	; 0x39
	/* Rs = 0 To Select Command Register */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	64 e0       	ldi	r22, 0x04	; 4
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	/* RW = 0 To Write To LCD */
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e8       	ldi	r26, 0x80	; 128
    1416:	bf e3       	ldi	r27, 0x3F	; 63
    1418:	8d ab       	std	Y+53, r24	; 0x35
    141a:	9e ab       	std	Y+54, r25	; 0x36
    141c:	af ab       	std	Y+55, r26	; 0x37
    141e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6d a9       	ldd	r22, Y+53	; 0x35
    1422:	7e a9       	ldd	r23, Y+54	; 0x36
    1424:	8f a9       	ldd	r24, Y+55	; 0x37
    1426:	98 ad       	ldd	r25, Y+56	; 0x38
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a ef       	ldi	r20, 0xFA	; 250
    142e:	54 e4       	ldi	r21, 0x44	; 68
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	89 ab       	std	Y+49, r24	; 0x31
    143a:	9a ab       	std	Y+50, r25	; 0x32
    143c:	ab ab       	std	Y+51, r26	; 0x33
    143e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1440:	69 a9       	ldd	r22, Y+49	; 0x31
    1442:	7a a9       	ldd	r23, Y+50	; 0x32
    1444:	8b a9       	ldd	r24, Y+51	; 0x33
    1446:	9c a9       	ldd	r25, Y+52	; 0x34
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	98 ab       	std	Y+48, r25	; 0x30
    145e:	8f a7       	std	Y+47, r24	; 0x2f
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1462:	69 a9       	ldd	r22, Y+49	; 0x31
    1464:	7a a9       	ldd	r23, Y+50	; 0x32
    1466:	8b a9       	ldd	r24, Y+51	; 0x33
    1468:	9c a9       	ldd	r25, Y+52	; 0x34
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6d a9       	ldd	r22, Y+53	; 0x35
    147c:	7e a9       	ldd	r23, Y+54	; 0x36
    147e:	8f a9       	ldd	r24, Y+55	; 0x37
    1480:	98 ad       	ldd	r25, Y+56	; 0x38
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	98 ab       	std	Y+48, r25	; 0x30
    14a0:	8f a7       	std	Y+47, r24	; 0x2f
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <LCD_sendCommand+0xde>
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9e a7       	std	Y+46, r25	; 0x2e
    14aa:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    14ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <LCD_sendCommand+0xcc>
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ba:	98 a9       	ldd	r25, Y+48	; 0x30
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	98 ab       	std	Y+48, r25	; 0x30
    14c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c4:	98 a9       	ldd	r25, Y+48	; 0x30
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <LCD_sendCommand+0xc0>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	69 a9       	ldd	r22, Y+49	; 0x31
    14ce:	7a a9       	ldd	r23, Y+50	; 0x32
    14d0:	8b a9       	ldd	r24, Y+51	; 0x33
    14d2:	9c a9       	ldd	r25, Y+52	; 0x34
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	98 ab       	std	Y+48, r25	; 0x30
    14de:	8f a7       	std	Y+47, r24	; 0x2f
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	9c a7       	std	Y+44, r25	; 0x2c
    14e6:	8b a7       	std	Y+43, r24	; 0x2b
    14e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <LCD_sendCommand+0x108>
    14f0:	9c a7       	std	Y+44, r25	; 0x2c
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
	/* E = 1 Enable LCD */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	66 e0       	ldi	r22, 0x06	; 6
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e8       	ldi	r26, 0x80	; 128
    1504:	bf e3       	ldi	r27, 0x3F	; 63
    1506:	8f a3       	std	Y+39, r24	; 0x27
    1508:	98 a7       	std	Y+40, r25	; 0x28
    150a:	a9 a7       	std	Y+41, r26	; 0x29
    150c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6f a1       	ldd	r22, Y+39	; 0x27
    1510:	78 a5       	ldd	r23, Y+40	; 0x28
    1512:	89 a5       	ldd	r24, Y+41	; 0x29
    1514:	9a a5       	ldd	r25, Y+42	; 0x2a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a ef       	ldi	r20, 0xFA	; 250
    151c:	54 e4       	ldi	r21, 0x44	; 68
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8b a3       	std	Y+35, r24	; 0x23
    1528:	9c a3       	std	Y+36, r25	; 0x24
    152a:	ad a3       	std	Y+37, r26	; 0x25
    152c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    152e:	6b a1       	ldd	r22, Y+35	; 0x23
    1530:	7c a1       	ldd	r23, Y+36	; 0x24
    1532:	8d a1       	ldd	r24, Y+37	; 0x25
    1534:	9e a1       	ldd	r25, Y+38	; 0x26
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9a a3       	std	Y+34, r25	; 0x22
    154c:	89 a3       	std	Y+33, r24	; 0x21
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1550:	6b a1       	ldd	r22, Y+35	; 0x23
    1552:	7c a1       	ldd	r23, Y+36	; 0x24
    1554:	8d a1       	ldd	r24, Y+37	; 0x25
    1556:	9e a1       	ldd	r25, Y+38	; 0x26
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6f a1       	ldd	r22, Y+39	; 0x27
    156a:	78 a5       	ldd	r23, Y+40	; 0x28
    156c:	89 a5       	ldd	r24, Y+41	; 0x29
    156e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9a a3       	std	Y+34, r25	; 0x22
    158e:	89 a3       	std	Y+33, r24	; 0x21
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <LCD_sendCommand+0x1cc>
    1592:	88 ec       	ldi	r24, 0xC8	; 200
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	98 a3       	std	Y+32, r25	; 0x20
    1598:	8f 8f       	std	Y+31, r24	; 0x1f
    159a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    159c:	98 a1       	ldd	r25, Y+32	; 0x20
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <LCD_sendCommand+0x1ba>
    15a2:	98 a3       	std	Y+32, r25	; 0x20
    15a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	89 a1       	ldd	r24, Y+33	; 0x21
    15a8:	9a a1       	ldd	r25, Y+34	; 0x22
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9a a3       	std	Y+34, r25	; 0x22
    15ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	89 a1       	ldd	r24, Y+33	; 0x21
    15b2:	9a a1       	ldd	r25, Y+34	; 0x22
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <LCD_sendCommand+0x1ae>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6b a1       	ldd	r22, Y+35	; 0x23
    15bc:	7c a1       	ldd	r23, Y+36	; 0x24
    15be:	8d a1       	ldd	r24, Y+37	; 0x25
    15c0:	9e a1       	ldd	r25, Y+38	; 0x26
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9a a3       	std	Y+34, r25	; 0x22
    15cc:	89 a3       	std	Y+33, r24	; 0x21
    15ce:	89 a1       	ldd	r24, Y+33	; 0x21
    15d0:	9a a1       	ldd	r25, Y+34	; 0x22
    15d2:	9e 8f       	std	Y+30, r25	; 0x1e
    15d4:	8d 8f       	std	Y+29, r24	; 0x1d
    15d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_sendCommand+0x1f6>
    15de:	9e 8f       	std	Y+30, r25	; 0x1e
    15e0:	8d 8f       	std	Y+29, r24	; 0x1d
	/* E = 0 Disable LCD Enable */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
	#elif LCD_DATA_BITS_MODE == 8
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	6a ad       	ldd	r22, Y+58	; 0x3a
    15e6:	0e 94 47 08 	call	0x108e	; 0x108e <GPIO_writePort>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e8       	ldi	r26, 0x80	; 128
    15f0:	bf e3       	ldi	r27, 0x3F	; 63
    15f2:	89 8f       	std	Y+25, r24	; 0x19
    15f4:	9a 8f       	std	Y+26, r25	; 0x1a
    15f6:	ab 8f       	std	Y+27, r26	; 0x1b
    15f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	69 8d       	ldd	r22, Y+25	; 0x19
    15fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a ef       	ldi	r20, 0xFA	; 250
    1608:	54 e4       	ldi	r21, 0x44	; 68
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8d 8b       	std	Y+21, r24	; 0x15
    1614:	9e 8b       	std	Y+22, r25	; 0x16
    1616:	af 8b       	std	Y+23, r26	; 0x17
    1618:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    161a:	6d 89       	ldd	r22, Y+21	; 0x15
    161c:	7e 89       	ldd	r23, Y+22	; 0x16
    161e:	8f 89       	ldd	r24, Y+23	; 0x17
    1620:	98 8d       	ldd	r25, Y+24	; 0x18
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <LCD_sendCommand+0x258>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    163c:	6d 89       	ldd	r22, Y+21	; 0x15
    163e:	7e 89       	ldd	r23, Y+22	; 0x16
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	69 8d       	ldd	r22, Y+25	; 0x19
    1656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	0f c0       	rjmp	.+30     	; 0x169c <LCD_sendCommand+0x2b8>
    167e:	88 ec       	ldi	r24, 0xC8	; 200
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9a 8b       	std	Y+18, r25	; 0x12
    1684:	89 8b       	std	Y+17, r24	; 0x11
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	9a 89       	ldd	r25, Y+18	; 0x12
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_sendCommand+0x2a6>
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	9c 89       	ldd	r25, Y+20	; 0x14
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <LCD_sendCommand+0x29a>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6d 89       	ldd	r22, Y+21	; 0x15
    16a8:	7e 89       	ldd	r23, Y+22	; 0x16
    16aa:	8f 89       	ldd	r24, Y+23	; 0x17
    16ac:	98 8d       	ldd	r25, Y+24	; 0x18
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9c 8b       	std	Y+20, r25	; 0x14
    16b8:	8b 8b       	std	Y+19, r24	; 0x13
    16ba:	8b 89       	ldd	r24, Y+19	; 0x13
    16bc:	9c 89       	ldd	r25, Y+20	; 0x14
    16be:	98 8b       	std	Y+16, r25	; 0x10
    16c0:	8f 87       	std	Y+15, r24	; 0x0f
    16c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c4:	98 89       	ldd	r25, Y+16	; 0x10
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_sendCommand+0x2e2>
    16ca:	98 8b       	std	Y+16, r25	; 0x10
    16cc:	8f 87       	std	Y+15, r24	; 0x0f
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
	/* E = 0 Disable LCD Enable */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	66 e0       	ldi	r22, 0x06	; 6
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a0 e8       	ldi	r26, 0x80	; 128
    16de:	bf e3       	ldi	r27, 0x3F	; 63
    16e0:	8b 87       	std	Y+11, r24	; 0x0b
    16e2:	9c 87       	std	Y+12, r25	; 0x0c
    16e4:	ad 87       	std	Y+13, r26	; 0x0d
    16e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a ef       	ldi	r20, 0xFA	; 250
    16f6:	54 e4       	ldi	r21, 0x44	; 68
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8f 83       	std	Y+7, r24	; 0x07
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	a9 87       	std	Y+9, r26	; 0x09
    1706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1708:	6f 81       	ldd	r22, Y+7	; 0x07
    170a:	78 85       	ldd	r23, Y+8	; 0x08
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <LCD_sendCommand+0x346>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	0f c0       	rjmp	.+30     	; 0x178a <LCD_sendCommand+0x3a6>
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_sendCommand+0x394>
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <LCD_sendCommand+0x388>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_sendCommand+0x3d0>
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
	#endif
}
    17bc:	ea 96       	adiw	r28, 0x3a	; 58
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 character)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	ea 97       	sbiw	r28, 0x3a	; 58
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	8a af       	std	Y+58, r24	; 0x3a
	uint8 value_of_port = 0;
    17e4:	19 ae       	std	Y+57, r1	; 0x39
	/* Rs = 1 To Select Data Register */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	/* RW = 0 To Write To LCD */
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	65 e0       	ldi	r22, 0x05	; 5
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	8d ab       	std	Y+53, r24	; 0x35
    1804:	9e ab       	std	Y+54, r25	; 0x36
    1806:	af ab       	std	Y+55, r26	; 0x37
    1808:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	6d a9       	ldd	r22, Y+53	; 0x35
    180c:	7e a9       	ldd	r23, Y+54	; 0x36
    180e:	8f a9       	ldd	r24, Y+55	; 0x37
    1810:	98 ad       	ldd	r25, Y+56	; 0x38
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a ef       	ldi	r20, 0xFA	; 250
    1818:	54 e4       	ldi	r21, 0x44	; 68
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	89 ab       	std	Y+49, r24	; 0x31
    1824:	9a ab       	std	Y+50, r25	; 0x32
    1826:	ab ab       	std	Y+51, r26	; 0x33
    1828:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    182a:	69 a9       	ldd	r22, Y+49	; 0x31
    182c:	7a a9       	ldd	r23, Y+50	; 0x32
    182e:	8b a9       	ldd	r24, Y+51	; 0x33
    1830:	9c a9       	ldd	r25, Y+52	; 0x34
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    184c:	69 a9       	ldd	r22, Y+49	; 0x31
    184e:	7a a9       	ldd	r23, Y+50	; 0x32
    1850:	8b a9       	ldd	r24, Y+51	; 0x33
    1852:	9c a9       	ldd	r25, Y+52	; 0x34
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	6d a9       	ldd	r22, Y+53	; 0x35
    1866:	7e a9       	ldd	r23, Y+54	; 0x36
    1868:	8f a9       	ldd	r24, Y+55	; 0x37
    186a:	98 ad       	ldd	r25, Y+56	; 0x38
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	98 ab       	std	Y+48, r25	; 0x30
    188a:	8f a7       	std	Y+47, r24	; 0x2f
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <LCD_displayCharacter+0xde>
    188e:	88 ec       	ldi	r24, 0xC8	; 200
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9e a7       	std	Y+46, r25	; 0x2e
    1894:	8d a7       	std	Y+45, r24	; 0x2d
    1896:	8d a5       	ldd	r24, Y+45	; 0x2d
    1898:	9e a5       	ldd	r25, Y+46	; 0x2e
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_displayCharacter+0xcc>
    189e:	9e a7       	std	Y+46, r25	; 0x2e
    18a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a4:	98 a9       	ldd	r25, Y+48	; 0x30
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	98 ab       	std	Y+48, r25	; 0x30
    18aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ae:	98 a9       	ldd	r25, Y+48	; 0x30
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <LCD_displayCharacter+0xc0>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	69 a9       	ldd	r22, Y+49	; 0x31
    18b8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ba:	8b a9       	ldd	r24, Y+51	; 0x33
    18bc:	9c a9       	ldd	r25, Y+52	; 0x34
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	98 ab       	std	Y+48, r25	; 0x30
    18c8:	8f a7       	std	Y+47, r24	; 0x2f
    18ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    18cc:	98 a9       	ldd	r25, Y+48	; 0x30
    18ce:	9c a7       	std	Y+44, r25	; 0x2c
    18d0:	8b a7       	std	Y+43, r24	; 0x2b
    18d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_displayCharacter+0x108>
    18da:	9c a7       	std	Y+44, r25	; 0x2c
    18dc:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
	/* E = 1 Enable LCD */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	66 e0       	ldi	r22, 0x06	; 6
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	8f a3       	std	Y+39, r24	; 0x27
    18f2:	98 a7       	std	Y+40, r25	; 0x28
    18f4:	a9 a7       	std	Y+41, r26	; 0x29
    18f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	6f a1       	ldd	r22, Y+39	; 0x27
    18fa:	78 a5       	ldd	r23, Y+40	; 0x28
    18fc:	89 a5       	ldd	r24, Y+41	; 0x29
    18fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a ef       	ldi	r20, 0xFA	; 250
    1906:	54 e4       	ldi	r21, 0x44	; 68
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8b a3       	std	Y+35, r24	; 0x23
    1912:	9c a3       	std	Y+36, r25	; 0x24
    1914:	ad a3       	std	Y+37, r26	; 0x25
    1916:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1918:	6b a1       	ldd	r22, Y+35	; 0x23
    191a:	7c a1       	ldd	r23, Y+36	; 0x24
    191c:	8d a1       	ldd	r24, Y+37	; 0x25
    191e:	9e a1       	ldd	r25, Y+38	; 0x26
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9a a3       	std	Y+34, r25	; 0x22
    1936:	89 a3       	std	Y+33, r24	; 0x21
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    193a:	6b a1       	ldd	r22, Y+35	; 0x23
    193c:	7c a1       	ldd	r23, Y+36	; 0x24
    193e:	8d a1       	ldd	r24, Y+37	; 0x25
    1940:	9e a1       	ldd	r25, Y+38	; 0x26
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	6f a1       	ldd	r22, Y+39	; 0x27
    1954:	78 a5       	ldd	r23, Y+40	; 0x28
    1956:	89 a5       	ldd	r24, Y+41	; 0x29
    1958:	9a a5       	ldd	r25, Y+42	; 0x2a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9a a3       	std	Y+34, r25	; 0x22
    1978:	89 a3       	std	Y+33, r24	; 0x21
    197a:	0f c0       	rjmp	.+30     	; 0x199a <LCD_displayCharacter+0x1cc>
    197c:	88 ec       	ldi	r24, 0xC8	; 200
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	98 a3       	std	Y+32, r25	; 0x20
    1982:	8f 8f       	std	Y+31, r24	; 0x1f
    1984:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1986:	98 a1       	ldd	r25, Y+32	; 0x20
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_displayCharacter+0x1ba>
    198c:	98 a3       	std	Y+32, r25	; 0x20
    198e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	89 a1       	ldd	r24, Y+33	; 0x21
    1992:	9a a1       	ldd	r25, Y+34	; 0x22
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9a a3       	std	Y+34, r25	; 0x22
    1998:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	89 a1       	ldd	r24, Y+33	; 0x21
    199c:	9a a1       	ldd	r25, Y+34	; 0x22
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <LCD_displayCharacter+0x1ae>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6b a1       	ldd	r22, Y+35	; 0x23
    19a6:	7c a1       	ldd	r23, Y+36	; 0x24
    19a8:	8d a1       	ldd	r24, Y+37	; 0x25
    19aa:	9e a1       	ldd	r25, Y+38	; 0x26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9a a3       	std	Y+34, r25	; 0x22
    19b6:	89 a3       	std	Y+33, r24	; 0x21
    19b8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ba:	9a a1       	ldd	r25, Y+34	; 0x22
    19bc:	9e 8f       	std	Y+30, r25	; 0x1e
    19be:	8d 8f       	std	Y+29, r24	; 0x1d
    19c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_displayCharacter+0x1f6>
    19c8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ca:	8d 8f       	std	Y+29, r24	; 0x1d
		/* E = 0 Disable LCD Enable */
		GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
		/* Delay For 1m Sec According To DataSheet Of LCD */
		_delay_ms(1);
		#elif LCD_DATA_BITS_MODE == 8
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	6a ad       	ldd	r22, Y+58	; 0x3a
    19d0:	0e 94 47 08 	call	0x108e	; 0x108e <GPIO_writePort>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	89 8f       	std	Y+25, r24	; 0x19
    19de:	9a 8f       	std	Y+26, r25	; 0x1a
    19e0:	ab 8f       	std	Y+27, r26	; 0x1b
    19e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	69 8d       	ldd	r22, Y+25	; 0x19
    19e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a ef       	ldi	r20, 0xFA	; 250
    19f2:	54 e4       	ldi	r21, 0x44	; 68
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8d 8b       	std	Y+21, r24	; 0x15
    19fe:	9e 8b       	std	Y+22, r25	; 0x16
    1a00:	af 8b       	std	Y+23, r26	; 0x17
    1a02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <LCD_displayCharacter+0x258>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 8b       	std	Y+20, r25	; 0x14
    1a22:	8b 8b       	std	Y+19, r24	; 0x13
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1a26:	6d 89       	ldd	r22, Y+21	; 0x15
    1a28:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <LCD_displayCharacter+0x2b8>
    1a68:	88 ec       	ldi	r24, 0xC8	; 200
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9a 8b       	std	Y+18, r25	; 0x12
    1a6e:	89 8b       	std	Y+17, r24	; 0x11
    1a70:	89 89       	ldd	r24, Y+17	; 0x11
    1a72:	9a 89       	ldd	r25, Y+18	; 0x12
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_displayCharacter+0x2a6>
    1a78:	9a 8b       	std	Y+18, r25	; 0x12
    1a7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9c 8b       	std	Y+20, r25	; 0x14
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <LCD_displayCharacter+0x29a>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	6d 89       	ldd	r22, Y+21	; 0x15
    1a92:	7e 89       	ldd	r23, Y+22	; 0x16
    1a94:	8f 89       	ldd	r24, Y+23	; 0x17
    1a96:	98 8d       	ldd	r25, Y+24	; 0x18
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa8:	98 8b       	std	Y+16, r25	; 0x10
    1aaa:	8f 87       	std	Y+15, r24	; 0x0f
    1aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aae:	98 89       	ldd	r25, Y+16	; 0x10
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_displayCharacter+0x2e2>
    1ab4:	98 8b       	std	Y+16, r25	; 0x10
    1ab6:	8f 87       	std	Y+15, r24	; 0x0f
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
	/* E = 0 Disable LCD Enable */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	66 e0       	ldi	r22, 0x06	; 6
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8b 87       	std	Y+11, r24	; 0x0b
    1acc:	9c 87       	std	Y+12, r25	; 0x0c
    1ace:	ad 87       	std	Y+13, r26	; 0x0d
    1ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a ef       	ldi	r20, 0xFA	; 250
    1ae0:	54 e4       	ldi	r21, 0x44	; 68
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8f 83       	std	Y+7, r24	; 0x07
    1aec:	98 87       	std	Y+8, r25	; 0x08
    1aee:	a9 87       	std	Y+9, r26	; 0x09
    1af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_displayCharacter+0x346>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <LCD_displayCharacter+0x3a6>
    1b56:	88 ec       	ldi	r24, 0xC8	; 200
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
    1b5c:	8b 83       	std	Y+3, r24	; 0x03
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_displayCharacter+0x394>
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <LCD_displayCharacter+0x388>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_displayCharacter+0x3d0>
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	/* Delay For 1m Sec According To DataSheet Of LCD */
	_delay_ms(1);
#endif

}
    1ba6:	ea 96       	adiw	r28, 0x3a	; 58
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_displayString>:
void LCD_displayString(uint8 *string)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <LCD_displayString+0x6>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	0a c0       	rjmp	.+20     	; 0x1bdc <LCD_displayString+0x24>
	 }
	 ***********************************************************************/
	/* Looping In String Until Null Pointer */
	while (*string != '\0')
	{
		LCD_displayCharacter(*string);
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	80 81       	ld	r24, Z
    1bce:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_displayCharacter>
		string++;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
	 LCD_displayCharacter(string[i]);
	 i++;
	 }
	 ***********************************************************************/
	/* Looping In String Until Null Pointer */
	while (*string != '\0')
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	80 81       	ld	r24, Z
    1be2:	88 23       	and	r24, r24
    1be4:	89 f7       	brne	.-30     	; 0x1bc8 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
		string++;
	}
}
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row ,uint8 col)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <LCD_moveCursor+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <LCD_moveCursor+0x8>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address_of_lcd = 0;
    1c02:	19 82       	std	Y+1, r1	; 0x01

	switch(row)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3d 83       	std	Y+5, r19	; 0x05
    1c0c:	2c 83       	std	Y+4, r18	; 0x04
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	c1 f0       	breq	.+48     	; 0x1c48 <LCD_moveCursor+0x58>
    1c18:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_moveCursor+0x3c>
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	9d 81       	ldd	r25, Y+5	; 0x05
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <LCD_moveCursor+0x52>
    1c2a:	19 c0       	rjmp	.+50     	; 0x1c5e <LCD_moveCursor+0x6e>
    1c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	69 f0       	breq	.+26     	; 0x1c50 <LCD_moveCursor+0x60>
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <LCD_moveCursor+0x68>
    1c40:	0e c0       	rjmp	.+28     	; 0x1c5e <LCD_moveCursor+0x6e>
	{
	case 0 : address_of_lcd = col ;
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	0b c0       	rjmp	.+22     	; 0x1c5e <LCD_moveCursor+0x6e>
	break;
	case 1 : address_of_lcd = col+ 0x40;
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	80 5c       	subi	r24, 0xC0	; 192
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <LCD_moveCursor+0x6e>
	break;
	case 2: address_of_lcd = col + 0x10;
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	80 5f       	subi	r24, 0xF0	; 240
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	03 c0       	rjmp	.+6      	; 0x1c5e <LCD_moveCursor+0x6e>
	break ;
	case 3: address_of_lcd = col + 0x50;
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	80 5b       	subi	r24, 0xB0	; 176
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	/* Move The LCD Cursor To Location */
	LCD_sendCommand(address_of_lcd | LCD_SET_CURSOR_LOCATION);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <LCD_sendCommand>
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *string)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <LCD_displayStringRowColumn+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <LCD_displayStringRowColumn+0x8>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	6a 83       	std	Y+2, r22	; 0x02
    1c86:	5c 83       	std	Y+4, r21	; 0x04
    1c88:	4b 83       	std	Y+3, r20	; 0x03
	/* Move Cursor to corresponding row & col */
	LCD_moveCursor(row, col);
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	6a 81       	ldd	r22, Y+2	; 0x02
    1c8e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LCD_moveCursor>
	/* Write String */
	LCD_displayString(string);
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <LCD_clearScreen>:
/*
 * Clear LCD Screen
 */
void LCD_clearScreen(void)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	/* Send Clear Command To Lcd */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <LCD_sendCommand>
}
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <LCD_intgerToString>:

/*
 * Get The Value As Interger And Display As String
 */
void LCD_intgerToString(int data)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	62 97       	sbiw	r28, 0x12	; 18
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	9a 8b       	std	Y+18, r25	; 0x12
    1cd2:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1cd4:	89 89       	ldd	r24, Y+17	; 0x11
    1cd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd8:	9e 01       	movw	r18, r28
    1cda:	2f 5f       	subi	r18, 0xFF	; 255
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	b9 01       	movw	r22, r18
    1ce0:	4a e0       	ldi	r20, 0x0A	; 10
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	0e 94 54 19 	call	0x32a8	; 0x32a8 <itoa>
	LCD_displayString(buff); /* Display the string */
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
//		character = result%10 ;
//		character += 48 ; /* Convert From Int To ASCII */
//		LCD_displayCharacter(character); /* Display ASCII */
//		result /= 10 ;
//	}
}
    1cf0:	62 96       	adiw	r28, 0x12	; 18
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <main>:
uint8 g_firsttimepasswrod = 0 ;
uint8 g_faulttimes = 0 ;


int main(void)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	ae 97       	sbiw	r28, 0x2e	; 46
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
	uint8 str[20] = {0};
    1d16:	84 e1       	ldi	r24, 0x14	; 20
    1d18:	fe 01       	movw	r30, r28
    1d1a:	31 96       	adiw	r30, 0x01	; 1
    1d1c:	df 01       	movw	r26, r30
    1d1e:	98 2f       	mov	r25, r24
    1d20:	1d 92       	st	X+, r1
    1d22:	9a 95       	dec	r25
    1d24:	e9 f7       	brne	.-6      	; 0x1d20 <main+0x1e>
	 * (TIMER0 ) - (CTC_MODE) - (CTC_NORMAL OC0 Disconnected )
	 * (No Pwm) - (No ICU) - (FCPU_64)- Initial val = 0 - comapre val = 0
	 */
	TIMER_configType timer_config = {TIMER0 ,CTC ,CTC_NORMAL ,PWM_NORMAL,TIMER1_FALLING_EDGE,
			FCPU_64,0,0
	};
    1d26:	de 01       	movw	r26, r28
    1d28:	55 96       	adiw	r26, 0x15	; 21
    1d2a:	be a3       	std	Y+38, r27	; 0x26
    1d2c:	ad a3       	std	Y+37, r26	; 0x25
    1d2e:	e1 e0       	ldi	r30, 0x01	; 1
    1d30:	f1 e0       	ldi	r31, 0x01	; 1
    1d32:	f8 a7       	std	Y+40, r31	; 0x28
    1d34:	ef a3       	std	Y+39, r30	; 0x27
    1d36:	fa e0       	ldi	r31, 0x0A	; 10
    1d38:	f9 a7       	std	Y+41, r31	; 0x29
    1d3a:	af a1       	ldd	r26, Y+39	; 0x27
    1d3c:	b8 a5       	ldd	r27, Y+40	; 0x28
    1d3e:	0c 90       	ld	r0, X
    1d40:	ef a1       	ldd	r30, Y+39	; 0x27
    1d42:	f8 a5       	ldd	r31, Y+40	; 0x28
    1d44:	31 96       	adiw	r30, 0x01	; 1
    1d46:	f8 a7       	std	Y+40, r31	; 0x28
    1d48:	ef a3       	std	Y+39, r30	; 0x27
    1d4a:	ad a1       	ldd	r26, Y+37	; 0x25
    1d4c:	be a1       	ldd	r27, Y+38	; 0x26
    1d4e:	0c 92       	st	X, r0
    1d50:	ed a1       	ldd	r30, Y+37	; 0x25
    1d52:	fe a1       	ldd	r31, Y+38	; 0x26
    1d54:	31 96       	adiw	r30, 0x01	; 1
    1d56:	fe a3       	std	Y+38, r31	; 0x26
    1d58:	ed a3       	std	Y+37, r30	; 0x25
    1d5a:	f9 a5       	ldd	r31, Y+41	; 0x29
    1d5c:	f1 50       	subi	r31, 0x01	; 1
    1d5e:	f9 a7       	std	Y+41, r31	; 0x29
    1d60:	89 a5       	ldd	r24, Y+41	; 0x29
    1d62:	88 23       	and	r24, r24
    1d64:	51 f7       	brne	.-44     	; 0x1d3a <main+0x38>
	/*(Initialization Of USART )
	 * Baudrate - Synchrounization - parity - stopbit - size of data
	 */
	USART_configType usart_config = {9600 ,ASYNCHRONOUS,OFF,BIT_1,BIT_8};
    1d66:	de 01       	movw	r26, r28
    1d68:	5f 96       	adiw	r26, 0x1f	; 31
    1d6a:	bb a7       	std	Y+43, r27	; 0x2b
    1d6c:	aa a7       	std	Y+42, r26	; 0x2a
    1d6e:	eb ef       	ldi	r30, 0xFB	; 251
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	fd a7       	std	Y+45, r31	; 0x2d
    1d74:	ec a7       	std	Y+44, r30	; 0x2c
    1d76:	f6 e0       	ldi	r31, 0x06	; 6
    1d78:	fe a7       	std	Y+46, r31	; 0x2e
    1d7a:	ac a5       	ldd	r26, Y+44	; 0x2c
    1d7c:	bd a5       	ldd	r27, Y+45	; 0x2d
    1d7e:	0c 90       	ld	r0, X
    1d80:	ec a5       	ldd	r30, Y+44	; 0x2c
    1d82:	fd a5       	ldd	r31, Y+45	; 0x2d
    1d84:	31 96       	adiw	r30, 0x01	; 1
    1d86:	fd a7       	std	Y+45, r31	; 0x2d
    1d88:	ec a7       	std	Y+44, r30	; 0x2c
    1d8a:	aa a5       	ldd	r26, Y+42	; 0x2a
    1d8c:	bb a5       	ldd	r27, Y+43	; 0x2b
    1d8e:	0c 92       	st	X, r0
    1d90:	ea a5       	ldd	r30, Y+42	; 0x2a
    1d92:	fb a5       	ldd	r31, Y+43	; 0x2b
    1d94:	31 96       	adiw	r30, 0x01	; 1
    1d96:	fb a7       	std	Y+43, r31	; 0x2b
    1d98:	ea a7       	std	Y+42, r30	; 0x2a
    1d9a:	fe a5       	ldd	r31, Y+46	; 0x2e
    1d9c:	f1 50       	subi	r31, 0x01	; 1
    1d9e:	fe a7       	std	Y+46, r31	; 0x2e
    1da0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1da2:	88 23       	and	r24, r24
    1da4:	51 f7       	brne	.-44     	; 0x1d7a <main+0x78>

	LCD_init();
    1da6:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_init>

	TIMER_init(&timer_config);
    1daa:	ce 01       	movw	r24, r28
    1dac:	45 96       	adiw	r24, 0x15	; 21
    1dae:	0e 94 28 12 	call	0x2450	; 0x2450 <TIMER_init>

	USART_init(&usart_config);
    1db2:	ce 01       	movw	r24, r28
    1db4:	4f 96       	adiw	r24, 0x1f	; 31
    1db6:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <USART_init>

	while(1)
	{
		if (g_firsttimepasswrod == 0)
    1dba:	80 91 0c 01 	lds	r24, 0x010C
    1dbe:	88 23       	and	r24, r24
    1dc0:	29 f5       	brne	.+74     	; 0x1e0c <main+0x10a>
		{
		LCD_displayString("Enter Pw : ");
    1dc2:	80 e6       	ldi	r24, 0x60	; 96
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
		SendPassword();
    1dca:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <SendPassword>
		LCD_displayString("Reenter Pw : ");
    1dce:	8c e6       	ldi	r24, 0x6C	; 108
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
		SendPassword();
    1dd6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <SendPassword>
		/* Tell MC2 That MC1 Ready To Know The Result Of 2 Pw */
		USART_sendByte(MC1_READY);
    1dda:	80 e1       	ldi	r24, 0x10	; 16
    1ddc:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
		/* Receive String */
		USART_receiveString(str);
    1de0:	ce 01       	movw	r24, r28
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	0e 94 b8 18 	call	0x3170	; 0x3170 <USART_receiveString>

			if (str_compare(str, "MATCH"))
    1de8:	2a e7       	ldi	r18, 0x7A	; 122
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	ce 01       	movw	r24, r28
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	b9 01       	movw	r22, r18
    1df2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <str_compare>
    1df6:	88 23       	and	r24, r24
    1df8:	31 f0       	breq	.+12     	; 0x1e06 <main+0x104>
			{
			g_firsttimepasswrod = 1 ;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	80 93 0c 01 	sts	0x010C, r24
			MainOptions();
    1e00:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <MainOptions>
    1e04:	da cf       	rjmp	.-76     	; 0x1dba <main+0xb8>
			}
			else
			{
			g_firsttimepasswrod = 0;
    1e06:	10 92 0c 01 	sts	0x010C, r1
    1e0a:	d7 cf       	rjmp	.-82     	; 0x1dba <main+0xb8>
			}
		}
		else
		{
			if (g_faulttimes == 3)
    1e0c:	80 91 0d 01 	lds	r24, 0x010D
    1e10:	83 30       	cpi	r24, 0x03	; 3
    1e12:	d1 f4       	brne	.+52     	; 0x1e48 <main+0x146>
			{
				LCD_clearScreen();
    1e14:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
				LCD_displayString("Wrong Pw");
    1e18:	80 e8       	ldi	r24, 0x80	; 128
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LCD_moveCursor>
				LCD_displayString("For 3 Times");
    1e28:	89 e8       	ldi	r24, 0x89	; 137
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
				TIMER0_delay_ms(60000);
    1e30:	20 e6       	ldi	r18, 0x60	; 96
    1e32:	3a ee       	ldi	r19, 0xEA	; 234
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
				g_faulttimes = 0;
    1e44:	10 92 0d 01 	sts	0x010D, r1
			}
			MainOptions();
    1e48:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <MainOptions>
    1e4c:	b6 cf       	rjmp	.-148    	; 0x1dba <main+0xb8>

00001e4e <SendPassword>:

}

/* Sending Password To MC2 Until We Press = */
void SendPassword(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	uint8 key = 0 ;
    1e58:	19 82       	std	Y+1, r1	; 0x01
	/* Move Cursor To Row 1 Col 0 */
	LCD_moveCursor(1,0);
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LCD_moveCursor>
	while(1)
	{
		/* Get Key From Keypad */
		key = KEYPAD_getPressedKey();
    1e62:	0e 94 d7 08 	call	0x11ae	; 0x11ae <KEYPAD_getPressedKey>
    1e66:	89 83       	std	Y+1, r24	; 0x01
		if ( key == '=')
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	8d 33       	cpi	r24, 0x3D	; 61
    1e6c:	99 f4       	brne	.+38     	; 0x1e94 <SendPassword+0x46>
		{
			USART_sendByte(key);
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
			USART_sendByte(key);
		}
		/* Delay For 1 Sec */
		TIMER0_delay_ms(500);
	}
	LCD_clearScreen();
    1e74:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
	TIMER0_delay_ms(500);
    1e78:	24 ef       	ldi	r18, 0xF4	; 244
    1e7a:	31 e0       	ldi	r19, 0x01	; 1
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
}
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret
			break ;
		}
		else
		{

			LCD_intgerToString(key);
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_intgerToString>
			 //LCD_displayCharacter('*');
			USART_sendByte(key);
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
		}
		/* Delay For 1 Sec */
		TIMER0_delay_ms(500);
    1ea4:	24 ef       	ldi	r18, 0xF4	; 244
    1ea6:	31 e0       	ldi	r19, 0x01	; 1
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
    1eb8:	d4 cf       	rjmp	.-88     	; 0x1e62 <SendPassword+0x14>

00001eba <MainOptions>:
	TIMER0_delay_ms(500);
}

/* Second Option After Get Pw For 1st Time */
void MainOptions (void)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	65 97       	sbiw	r28, 0x15	; 21
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0 ;
    1ece:	19 82       	std	Y+1, r1	; 0x01
	uint8 str1[20]={0};
    1ed0:	84 e1       	ldi	r24, 0x14	; 20
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	32 96       	adiw	r30, 0x02	; 2
    1ed6:	df 01       	movw	r26, r30
    1ed8:	98 2f       	mov	r25, r24
    1eda:	1d 92       	st	X+, r1
    1edc:	9a 95       	dec	r25
    1ede:	e9 f7       	brne	.-6      	; 0x1eda <MainOptions+0x20>
	LCD_clearScreen();
    1ee0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
	LCD_displayString("+:Open Door : ");
    1ee4:	85 e9       	ldi	r24, 0x95	; 149
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
	/* Move Cursor */
	LCD_moveCursor(1, 0);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <LCD_moveCursor>
	LCD_displayString("-:Change PW : ");
    1ef4:	84 ea       	ldi	r24, 0xA4	; 164
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>

	while(1)
	{
		/* Get Key From Keypad */
		key = KEYPAD_getPressedKey();
    1efc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <KEYPAD_getPressedKey>
    1f00:	89 83       	std	Y+1, r24	; 0x01
		if (key == '+')
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	8b 32       	cpi	r24, 0x2B	; 43
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <MainOptions+0x50>
    1f08:	60 c0       	rjmp	.+192    	; 0x1fca <MainOptions+0x110>
		{
			TIMER0_delay_ms(1000);
    1f0a:	28 ee       	ldi	r18, 0xE8	; 232
    1f0c:	33 e0       	ldi	r19, 0x03	; 3
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
			LCD_clearScreen();
    1f1e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
			LCD_displayString("Enter PW : ");
    1f22:	83 eb       	ldi	r24, 0xB3	; 179
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
			SendPassword();
    1f2a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <SendPassword>
			/* Send The User Selection */
			USART_sendByte('+');
    1f2e:	8b e2       	ldi	r24, 0x2B	; 43
    1f30:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
			/* Delay To Let MC2 Can Receive it */
			TIMER0_delay_ms(50);
    1f34:	22 e3       	ldi	r18, 0x32	; 50
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
			/* Tell MC2 That MC1 Ready To Know The Result Of 2 Pw */
			USART_sendByte(MC1_READY);
    1f48:	80 e1       	ldi	r24, 0x10	; 16
    1f4a:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
			/* Receive String */
			USART_receiveString(str1);
    1f4e:	ce 01       	movw	r24, r28
    1f50:	02 96       	adiw	r24, 0x02	; 2
    1f52:	0e 94 b8 18 	call	0x3170	; 0x3170 <USART_receiveString>

			if (str_compare(str1,"MATCH"))
    1f56:	ce 01       	movw	r24, r28
    1f58:	02 96       	adiw	r24, 0x02	; 2
    1f5a:	2a e7       	ldi	r18, 0x7A	; 122
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	b9 01       	movw	r22, r18
    1f60:	0e 94 53 10 	call	0x20a6	; 0x20a6 <str_compare>
    1f64:	88 23       	and	r24, r24
    1f66:	99 f0       	breq	.+38     	; 0x1f8e <MainOptions+0xd4>
			{
				LCD_clearScreen();
    1f68:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
				LCD_displayString("Door Opened");
    1f6c:	8f eb       	ldi	r24, 0xBF	; 191
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
				TIMER0_delay_ms(30000);
    1f74:	20 e3       	ldi	r18, 0x30	; 48
    1f76:	35 e7       	ldi	r19, 0x75	; 117
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
				g_faulttimes = 0;
    1f88:	10 92 0d 01 	sts	0x010D, r1
    1f8c:	83 c0       	rjmp	.+262    	; 0x2094 <MainOptions+0x1da>
				break;
			}
			else if (str_compare(str1,"UNMATCH"))
    1f8e:	ce 01       	movw	r24, r28
    1f90:	02 96       	adiw	r24, 0x02	; 2
    1f92:	2b ec       	ldi	r18, 0xCB	; 203
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	b9 01       	movw	r22, r18
    1f98:	0e 94 53 10 	call	0x20a6	; 0x20a6 <str_compare>
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <MainOptions+0xe8>
    1fa0:	ad cf       	rjmp	.-166    	; 0x1efc <MainOptions+0x42>
			{
				LCD_displayString("Wrong PW ");
    1fa2:	83 ed       	ldi	r24, 0xD3	; 211
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
				TIMER0_delay_ms(1000);
    1faa:	28 ee       	ldi	r18, 0xE8	; 232
    1fac:	33 e0       	ldi	r19, 0x03	; 3
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
				g_faulttimes++;
    1fbe:	80 91 0d 01 	lds	r24, 0x010D
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	80 93 0d 01 	sts	0x010D, r24
    1fc8:	65 c0       	rjmp	.+202    	; 0x2094 <MainOptions+0x1da>
				break;
			}


		}
		else if (key == '-')
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	8d 32       	cpi	r24, 0x2D	; 45
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <MainOptions+0x118>
    1fd0:	95 cf       	rjmp	.-214    	; 0x1efc <MainOptions+0x42>
		{
			TIMER0_delay_ms(1000);
    1fd2:	28 ee       	ldi	r18, 0xE8	; 232
    1fd4:	33 e0       	ldi	r19, 0x03	; 3
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
			LCD_clearScreen();
    1fe6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
			LCD_displayString("Enter PW : ");
    1fea:	83 eb       	ldi	r24, 0xB3	; 179
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
			SendPassword();
    1ff2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <SendPassword>
			/* Send The User Selection */
			USART_sendByte('-');
    1ff6:	8d e2       	ldi	r24, 0x2D	; 45
    1ff8:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
			/* Delay To Let MC2 Can Receive it */
			TIMER0_delay_ms(50);
    1ffc:	22 e3       	ldi	r18, 0x32	; 50
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
			/* Tell MC2 That MC1 Ready To Know The Result Of 2 Pw */
			USART_sendByte(MC1_READY);
    2010:	80 e1       	ldi	r24, 0x10	; 16
    2012:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
			/* Receive String */
			USART_receiveString(str1);
    2016:	ce 01       	movw	r24, r28
    2018:	02 96       	adiw	r24, 0x02	; 2
    201a:	0e 94 b8 18 	call	0x3170	; 0x3170 <USART_receiveString>

			if(str_compare(str1,"MATCH"))
    201e:	ce 01       	movw	r24, r28
    2020:	02 96       	adiw	r24, 0x02	; 2
    2022:	2a e7       	ldi	r18, 0x7A	; 122
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	b9 01       	movw	r22, r18
    2028:	0e 94 53 10 	call	0x20a6	; 0x20a6 <str_compare>
    202c:	88 23       	and	r24, r24
    202e:	a9 f0       	breq	.+42     	; 0x205a <MainOptions+0x1a0>
			{
				LCD_displayString("Add New Pw ");
    2030:	8d ed       	ldi	r24, 0xDD	; 221
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
				TIMER0_delay_ms(1000);
    2038:	28 ee       	ldi	r18, 0xE8	; 232
    203a:	33 e0       	ldi	r19, 0x03	; 3
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
				LCD_clearScreen();
    204c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_clearScreen>
				g_firsttimepasswrod = 0;
    2050:	10 92 0c 01 	sts	0x010C, r1
				g_faulttimes =0 ;
    2054:	10 92 0d 01 	sts	0x010D, r1
    2058:	1d c0       	rjmp	.+58     	; 0x2094 <MainOptions+0x1da>
				break;
			}
			else if (str_compare(str1,"UNMATCH"))
    205a:	ce 01       	movw	r24, r28
    205c:	02 96       	adiw	r24, 0x02	; 2
    205e:	2b ec       	ldi	r18, 0xCB	; 203
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	b9 01       	movw	r22, r18
    2064:	0e 94 53 10 	call	0x20a6	; 0x20a6 <str_compare>
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <MainOptions+0x1b4>
    206c:	47 cf       	rjmp	.-370    	; 0x1efc <MainOptions+0x42>
			{
				LCD_displayString("Wrong Pw ");
    206e:	89 ee       	ldi	r24, 0xE9	; 233
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayString>
				TIMER0_delay_ms(1000);
    2076:	28 ee       	ldi	r18, 0xE8	; 232
    2078:	33 e0       	ldi	r19, 0x03	; 3
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 10 16 	call	0x2c20	; 0x2c20 <TIMER0_delay_ms>
				g_faulttimes++;
    208a:	80 91 0d 01 	lds	r24, 0x010D
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	80 93 0d 01 	sts	0x010D, r24
		else
		{
			/* Do Nothing */
		}
	}
}
    2094:	65 96       	adiw	r28, 0x15	; 21
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <str_compare>:

uint8 str_compare(uint8 *str1 , uint8 *str2)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <str_compare+0x6>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <str_compare+0x8>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <str_compare+0xa>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	9b 83       	std	Y+3, r25	; 0x03
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    20b8:	7d 83       	std	Y+5, r23	; 0x05
    20ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0 ;
    20bc:	19 82       	std	Y+1, r1	; 0x01
    20be:	19 c0       	rjmp	.+50     	; 0x20f2 <str_compare+0x4c>
	while (str1[i] != '\0')
	{
		if ( str1[i] != str2 [i])
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	fc 01       	movw	r30, r24
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	40 81       	ld	r20, Z
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	9d 81       	ldd	r25, Y+5	; 0x05
    20dc:	fc 01       	movw	r30, r24
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	80 81       	ld	r24, Z
    20e4:	48 17       	cp	r20, r24
    20e6:	11 f0       	breq	.+4      	; 0x20ec <str_compare+0x46>
		{
			return 0 ;
    20e8:	1e 82       	std	Y+6, r1	; 0x06
    20ea:	10 c0       	rjmp	.+32     	; 0x210c <str_compare+0x66>
		}
		i++ ;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	89 83       	std	Y+1, r24	; 0x01
}

uint8 str_compare(uint8 *str1 , uint8 *str2)
{
	uint8 i = 0 ;
	while (str1[i] != '\0')
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	fc 01       	movw	r30, r24
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	80 81       	ld	r24, Z
    2104:	88 23       	and	r24, r24
    2106:	e1 f6       	brne	.-72     	; 0x20c0 <str_compare+0x1a>
		{
			return 0 ;
		}
		i++ ;
	}
	return 1 ;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	8e 83       	std	Y+6, r24	; 0x06
    210c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    210e:	26 96       	adiw	r28, 0x06	; 6
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2120:	1f 92       	push	r1
    2122:	0f 92       	push	r0
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	0f 92       	push	r0
    2128:	11 24       	eor	r1, r1
    212a:	2f 93       	push	r18
    212c:	3f 93       	push	r19
    212e:	4f 93       	push	r20
    2130:	5f 93       	push	r21
    2132:	6f 93       	push	r22
    2134:	7f 93       	push	r23
    2136:	8f 93       	push	r24
    2138:	9f 93       	push	r25
    213a:	af 93       	push	r26
    213c:	bf 93       	push	r27
    213e:	ef 93       	push	r30
    2140:	ff 93       	push	r31
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR)
    214a:	80 91 0e 01 	lds	r24, 0x010E
    214e:	90 91 0f 01 	lds	r25, 0x010F
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	29 f0       	breq	.+10     	; 0x2160 <__vector_9+0x40>
	{
		(*g_timer0_callBackPtr)();
    2156:	e0 91 0e 01 	lds	r30, 0x010E
    215a:	f0 91 0f 01 	lds	r31, 0x010F
    215e:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	ff 91       	pop	r31
    2166:	ef 91       	pop	r30
    2168:	bf 91       	pop	r27
    216a:	af 91       	pop	r26
    216c:	9f 91       	pop	r25
    216e:	8f 91       	pop	r24
    2170:	7f 91       	pop	r23
    2172:	6f 91       	pop	r22
    2174:	5f 91       	pop	r21
    2176:	4f 91       	pop	r20
    2178:	3f 91       	pop	r19
    217a:	2f 91       	pop	r18
    217c:	0f 90       	pop	r0
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	0f 90       	pop	r0
    2182:	1f 90       	pop	r1
    2184:	18 95       	reti

00002186 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2186:	1f 92       	push	r1
    2188:	0f 92       	push	r0
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	0f 92       	push	r0
    218e:	11 24       	eor	r1, r1
    2190:	2f 93       	push	r18
    2192:	3f 93       	push	r19
    2194:	4f 93       	push	r20
    2196:	5f 93       	push	r21
    2198:	6f 93       	push	r22
    219a:	7f 93       	push	r23
    219c:	8f 93       	push	r24
    219e:	9f 93       	push	r25
    21a0:	af 93       	push	r26
    21a2:	bf 93       	push	r27
    21a4:	ef 93       	push	r30
    21a6:	ff 93       	push	r31
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_callBackPtr != NULL_PTR)
    21b0:	80 91 0e 01 	lds	r24, 0x010E
    21b4:	90 91 0f 01 	lds	r25, 0x010F
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	29 f0       	breq	.+10     	; 0x21c6 <__vector_19+0x40>
	{
		(*g_timer0_callBackPtr)();
    21bc:	e0 91 0e 01 	lds	r30, 0x010E
    21c0:	f0 91 0f 01 	lds	r31, 0x010F
    21c4:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	ff 91       	pop	r31
    21cc:	ef 91       	pop	r30
    21ce:	bf 91       	pop	r27
    21d0:	af 91       	pop	r26
    21d2:	9f 91       	pop	r25
    21d4:	8f 91       	pop	r24
    21d6:	7f 91       	pop	r23
    21d8:	6f 91       	pop	r22
    21da:	5f 91       	pop	r21
    21dc:	4f 91       	pop	r20
    21de:	3f 91       	pop	r19
    21e0:	2f 91       	pop	r18
    21e2:	0f 90       	pop	r0
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	0f 90       	pop	r0
    21e8:	1f 90       	pop	r1
    21ea:	18 95       	reti

000021ec <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    21ec:	1f 92       	push	r1
    21ee:	0f 92       	push	r0
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	0f 92       	push	r0
    21f4:	11 24       	eor	r1, r1
    21f6:	2f 93       	push	r18
    21f8:	3f 93       	push	r19
    21fa:	4f 93       	push	r20
    21fc:	5f 93       	push	r21
    21fe:	6f 93       	push	r22
    2200:	7f 93       	push	r23
    2202:	8f 93       	push	r24
    2204:	9f 93       	push	r25
    2206:	af 93       	push	r26
    2208:	bf 93       	push	r27
    220a:	ef 93       	push	r30
    220c:	ff 93       	push	r31
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    2216:	80 91 10 01 	lds	r24, 0x0110
    221a:	90 91 11 01 	lds	r25, 0x0111
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	29 f0       	breq	.+10     	; 0x222c <__vector_8+0x40>
	{
		(*g_timer1_callBackPtr)();
    2222:	e0 91 10 01 	lds	r30, 0x0110
    2226:	f0 91 11 01 	lds	r31, 0x0111
    222a:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	ff 91       	pop	r31
    2232:	ef 91       	pop	r30
    2234:	bf 91       	pop	r27
    2236:	af 91       	pop	r26
    2238:	9f 91       	pop	r25
    223a:	8f 91       	pop	r24
    223c:	7f 91       	pop	r23
    223e:	6f 91       	pop	r22
    2240:	5f 91       	pop	r21
    2242:	4f 91       	pop	r20
    2244:	3f 91       	pop	r19
    2246:	2f 91       	pop	r18
    2248:	0f 90       	pop	r0
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	0f 90       	pop	r0
    224e:	1f 90       	pop	r1
    2250:	18 95       	reti

00002252 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2252:	1f 92       	push	r1
    2254:	0f 92       	push	r0
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	0f 92       	push	r0
    225a:	11 24       	eor	r1, r1
    225c:	2f 93       	push	r18
    225e:	3f 93       	push	r19
    2260:	4f 93       	push	r20
    2262:	5f 93       	push	r21
    2264:	6f 93       	push	r22
    2266:	7f 93       	push	r23
    2268:	8f 93       	push	r24
    226a:	9f 93       	push	r25
    226c:	af 93       	push	r26
    226e:	bf 93       	push	r27
    2270:	ef 93       	push	r30
    2272:	ff 93       	push	r31
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    227c:	80 91 10 01 	lds	r24, 0x0110
    2280:	90 91 11 01 	lds	r25, 0x0111
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	29 f0       	breq	.+10     	; 0x2292 <__vector_6+0x40>
	{
		(*g_timer1_callBackPtr)();
    2288:	e0 91 10 01 	lds	r30, 0x0110
    228c:	f0 91 11 01 	lds	r31, 0x0111
    2290:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	ff 91       	pop	r31
    2298:	ef 91       	pop	r30
    229a:	bf 91       	pop	r27
    229c:	af 91       	pop	r26
    229e:	9f 91       	pop	r25
    22a0:	8f 91       	pop	r24
    22a2:	7f 91       	pop	r23
    22a4:	6f 91       	pop	r22
    22a6:	5f 91       	pop	r21
    22a8:	4f 91       	pop	r20
    22aa:	3f 91       	pop	r19
    22ac:	2f 91       	pop	r18
    22ae:	0f 90       	pop	r0
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	0f 90       	pop	r0
    22b4:	1f 90       	pop	r1
    22b6:	18 95       	reti

000022b8 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    22b8:	1f 92       	push	r1
    22ba:	0f 92       	push	r0
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	0f 92       	push	r0
    22c0:	11 24       	eor	r1, r1
    22c2:	2f 93       	push	r18
    22c4:	3f 93       	push	r19
    22c6:	4f 93       	push	r20
    22c8:	5f 93       	push	r21
    22ca:	6f 93       	push	r22
    22cc:	7f 93       	push	r23
    22ce:	8f 93       	push	r24
    22d0:	9f 93       	push	r25
    22d2:	af 93       	push	r26
    22d4:	bf 93       	push	r27
    22d6:	ef 93       	push	r30
    22d8:	ff 93       	push	r31
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    22e2:	80 91 10 01 	lds	r24, 0x0110
    22e6:	90 91 11 01 	lds	r25, 0x0111
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	29 f0       	breq	.+10     	; 0x22f8 <__vector_7+0x40>
	{
		(*g_timer1_callBackPtr)();
    22ee:	e0 91 10 01 	lds	r30, 0x0110
    22f2:	f0 91 11 01 	lds	r31, 0x0111
    22f6:	09 95       	icall
	}
	else
	{
		/*Do Nothing */
	}
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	ff 91       	pop	r31
    22fe:	ef 91       	pop	r30
    2300:	bf 91       	pop	r27
    2302:	af 91       	pop	r26
    2304:	9f 91       	pop	r25
    2306:	8f 91       	pop	r24
    2308:	7f 91       	pop	r23
    230a:	6f 91       	pop	r22
    230c:	5f 91       	pop	r21
    230e:	4f 91       	pop	r20
    2310:	3f 91       	pop	r19
    2312:	2f 91       	pop	r18
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	0f 90       	pop	r0
    231a:	1f 90       	pop	r1
    231c:	18 95       	reti

0000231e <__vector_5>:
ISR(TIMER1_CAPT_vect)
{
    231e:	1f 92       	push	r1
    2320:	0f 92       	push	r0
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	0f 92       	push	r0
    2326:	11 24       	eor	r1, r1
    2328:	2f 93       	push	r18
    232a:	3f 93       	push	r19
    232c:	4f 93       	push	r20
    232e:	5f 93       	push	r21
    2330:	6f 93       	push	r22
    2332:	7f 93       	push	r23
    2334:	8f 93       	push	r24
    2336:	9f 93       	push	r25
    2338:	af 93       	push	r26
    233a:	bf 93       	push	r27
    233c:	ef 93       	push	r30
    233e:	ff 93       	push	r31
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_callBackPtr != NULL_PTR)
    2348:	80 91 10 01 	lds	r24, 0x0110
    234c:	90 91 11 01 	lds	r25, 0x0111
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	29 f0       	breq	.+10     	; 0x235e <__vector_5+0x40>
	{
		(*g_timer1_callBackPtr)();
    2354:	e0 91 10 01 	lds	r30, 0x0110
    2358:	f0 91 11 01 	lds	r31, 0x0111
    235c:	09 95       	icall
	else
	{
		/* Do Nothing */
	}

}
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	ff 91       	pop	r31
    2364:	ef 91       	pop	r30
    2366:	bf 91       	pop	r27
    2368:	af 91       	pop	r26
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	7f 91       	pop	r23
    2370:	6f 91       	pop	r22
    2372:	5f 91       	pop	r21
    2374:	4f 91       	pop	r20
    2376:	3f 91       	pop	r19
    2378:	2f 91       	pop	r18
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	0f 90       	pop	r0
    2380:	1f 90       	pop	r1
    2382:	18 95       	reti

00002384 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2384:	1f 92       	push	r1
    2386:	0f 92       	push	r0
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	0f 92       	push	r0
    238c:	11 24       	eor	r1, r1
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR)
    23ae:	80 91 12 01 	lds	r24, 0x0112
    23b2:	90 91 13 01 	lds	r25, 0x0113
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	29 f0       	breq	.+10     	; 0x23c4 <__vector_4+0x40>
		{
			(*g_timer2_callBackPtr)();
    23ba:	e0 91 12 01 	lds	r30, 0x0112
    23be:	f0 91 13 01 	lds	r31, 0x0113
    23c2:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	ff 91       	pop	r31
    23ca:	ef 91       	pop	r30
    23cc:	bf 91       	pop	r27
    23ce:	af 91       	pop	r26
    23d0:	9f 91       	pop	r25
    23d2:	8f 91       	pop	r24
    23d4:	7f 91       	pop	r23
    23d6:	6f 91       	pop	r22
    23d8:	5f 91       	pop	r21
    23da:	4f 91       	pop	r20
    23dc:	3f 91       	pop	r19
    23de:	2f 91       	pop	r18
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    23ea:	1f 92       	push	r1
    23ec:	0f 92       	push	r0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	0f 92       	push	r0
    23f2:	11 24       	eor	r1, r1
    23f4:	2f 93       	push	r18
    23f6:	3f 93       	push	r19
    23f8:	4f 93       	push	r20
    23fa:	5f 93       	push	r21
    23fc:	6f 93       	push	r22
    23fe:	7f 93       	push	r23
    2400:	8f 93       	push	r24
    2402:	9f 93       	push	r25
    2404:	af 93       	push	r26
    2406:	bf 93       	push	r27
    2408:	ef 93       	push	r30
    240a:	ff 93       	push	r31
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_callBackPtr != NULL_PTR)
    2414:	80 91 12 01 	lds	r24, 0x0112
    2418:	90 91 13 01 	lds	r25, 0x0113
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	29 f0       	breq	.+10     	; 0x242a <__vector_3+0x40>
		{
			(*g_timer2_callBackPtr)();
    2420:	e0 91 12 01 	lds	r30, 0x0112
    2424:	f0 91 13 01 	lds	r31, 0x0113
    2428:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	bf 91       	pop	r27
    2434:	af 91       	pop	r26
    2436:	9f 91       	pop	r25
    2438:	8f 91       	pop	r24
    243a:	7f 91       	pop	r23
    243c:	6f 91       	pop	r22
    243e:	5f 91       	pop	r21
    2440:	4f 91       	pop	r20
    2442:	3f 91       	pop	r19
    2444:	2f 91       	pop	r18
    2446:	0f 90       	pop	r0
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	0f 90       	pop	r0
    244c:	1f 90       	pop	r1
    244e:	18 95       	reti

00002450 <TIMER_init>:
 * 8- Compare Value
 */
/* INPUT : Structure Of TIMER_configType */
/* OUTPUT : NONE */
void TIMER_init(const TIMER_configType *configptr)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <TIMER_init+0x6>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <TIMER_init+0x8>
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
	/* Select TIMER ID */
	switch (configptr->timer_id)
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	80 81       	ld	r24, Z
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3c 83       	std	Y+4, r19	; 0x04
    246c:	2b 83       	std	Y+3, r18	; 0x03
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	91 05       	cpc	r25, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <TIMER_init+0x2a>
    2478:	b5 c0       	rjmp	.+362    	; 0x25e4 <TIMER_init+0x194>
    247a:	2b 81       	ldd	r18, Y+3	; 0x03
    247c:	3c 81       	ldd	r19, Y+4	; 0x04
    247e:	22 30       	cpi	r18, 0x02	; 2
    2480:	31 05       	cpc	r19, r1
    2482:	09 f4       	brne	.+2      	; 0x2486 <TIMER_init+0x36>
    2484:	e4 c1       	rjmp	.+968    	; 0x284e <TIMER_init+0x3fe>
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	09 f0       	breq	.+2      	; 0x2490 <TIMER_init+0x40>
    248e:	88 c2       	rjmp	.+1296   	; 0x29a0 <TIMER_init+0x550>
	{
	case TIMER0 :
		/* Select Timer0_Modes */
		if ( configptr->timer_mode == NORMAL)
    2490:	e9 81       	ldd	r30, Y+1	; 0x01
    2492:	fa 81       	ldd	r31, Y+2	; 0x02
    2494:	81 81       	ldd	r24, Z+1	; 0x01
    2496:	88 23       	and	r24, r24
    2498:	b1 f4       	brne	.+44     	; 0x24c6 <TIMER_init+0x76>
			/*Enable OverFlow Interrupt */
			#if TIMER0_OVF_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,TOIE0)
			#endif
			/* SET Non-PWM Pin */
			SET_BIT(TCCR0,FOC0);
    249a:	a3 e5       	ldi	r26, 0x53	; 83
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e3 e5       	ldi	r30, 0x53	; 83
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 68       	ori	r24, 0x80	; 128
    24a6:	8c 93       	st	X, r24
			/*CLEAR Waveform Generations Pins */
			CLEAR_BIT(TCCR0,WGM00);
    24a8:	a3 e5       	ldi	r26, 0x53	; 83
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e3 e5       	ldi	r30, 0x53	; 83
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8f 7b       	andi	r24, 0xBF	; 191
    24b4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    24b6:	a3 e5       	ldi	r26, 0x53	; 83
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e3 e5       	ldi	r30, 0x53	; 83
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	87 7f       	andi	r24, 0xF7	; 247
    24c2:	8c 93       	st	X, r24
    24c4:	64 c0       	rjmp	.+200    	; 0x258e <TIMER_init+0x13e>
		}
		else if (configptr->timer_mode == CTC)
    24c6:	e9 81       	ldd	r30, Y+1	; 0x01
    24c8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ca:	81 81       	ldd	r24, Z+1	; 0x01
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	89 f5       	brne	.+98     	; 0x2532 <TIMER_init+0xe2>
			/* Enable Compare  Interrupt */
			#if TIMER0_CTC_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,OCIE0);
			#endif
			/* Set PB3 Timer0 PIN As Output */
			SET_BIT(DDRB,PB3);
    24d0:	a7 e3       	ldi	r26, 0x37	; 55
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e7 e3       	ldi	r30, 0x37	; 55
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	88 60       	ori	r24, 0x08	; 8
    24dc:	8c 93       	st	X, r24
			/* SET Non-PWM Pin */
			SET_BIT(TCCR0, FOC0);
    24de:	a3 e5       	ldi	r26, 0x53	; 83
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e3 e5       	ldi	r30, 0x53	; 83
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	80 68       	ori	r24, 0x80	; 128
    24ea:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			CLEAR_BIT(TCCR0,WGM00);
    24ec:	a3 e5       	ldi	r26, 0x53	; 83
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e3 e5       	ldi	r30, 0x53	; 83
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8f 7b       	andi	r24, 0xBF	; 191
    24f8:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    24fa:	a3 e5       	ldi	r26, 0x53	; 83
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e3 e5       	ldi	r30, 0x53	; 83
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	88 60       	ori	r24, 0x08	; 8
    2506:	8c 93       	st	X, r24
			/* Check Operation Of CTC Mode */
			TCCR0 = (TCCR0 & 0xCF) | ((configptr->ctc_mode) << COM00);
    2508:	a3 e5       	ldi	r26, 0x53	; 83
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e3 e5       	ldi	r30, 0x53	; 83
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	28 2f       	mov	r18, r24
    2514:	2f 7c       	andi	r18, 0xCF	; 207
    2516:	e9 81       	ldd	r30, Y+1	; 0x01
    2518:	fa 81       	ldd	r31, Y+2	; 0x02
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	82 95       	swap	r24
    2522:	92 95       	swap	r25
    2524:	90 7f       	andi	r25, 0xF0	; 240
    2526:	98 27       	eor	r25, r24
    2528:	80 7f       	andi	r24, 0xF0	; 240
    252a:	98 27       	eor	r25, r24
    252c:	82 2b       	or	r24, r18
    252e:	8c 93       	st	X, r24
    2530:	2e c0       	rjmp	.+92     	; 0x258e <TIMER_init+0x13e>
		}
		else if (configptr->timer_mode == FAST_PWM)
    2532:	e9 81       	ldd	r30, Y+1	; 0x01
    2534:	fa 81       	ldd	r31, Y+2	; 0x02
    2536:	81 81       	ldd	r24, Z+1	; 0x01
    2538:	83 30       	cpi	r24, 0x03	; 3
    253a:	49 f5       	brne	.+82     	; 0x258e <TIMER_init+0x13e>
		{
			/* Set PB3 Timer0 PIN As Output */
			SET_BIT(DDRB, PB3);
    253c:	a7 e3       	ldi	r26, 0x37	; 55
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e7 e3       	ldi	r30, 0x37	; 55
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	88 60       	ori	r24, 0x08	; 8
    2548:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			SET_BIT(TCCR0, WGM00);
    254a:	a3 e5       	ldi	r26, 0x53	; 83
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e3 e5       	ldi	r30, 0x53	; 83
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	80 64       	ori	r24, 0x40	; 64
    2556:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    2558:	a3 e5       	ldi	r26, 0x53	; 83
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e3 e5       	ldi	r30, 0x53	; 83
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	88 60       	ori	r24, 0x08	; 8
    2564:	8c 93       	st	X, r24
			/* Check Operation Of PWM Mode */
			TCCR0 = (TCCR0 & 0xCF) | ((configptr->pwm_mode) << COM00);
    2566:	a3 e5       	ldi	r26, 0x53	; 83
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e3 e5       	ldi	r30, 0x53	; 83
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	28 2f       	mov	r18, r24
    2572:	2f 7c       	andi	r18, 0xCF	; 207
    2574:	e9 81       	ldd	r30, Y+1	; 0x01
    2576:	fa 81       	ldd	r31, Y+2	; 0x02
    2578:	83 81       	ldd	r24, Z+3	; 0x03
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	82 95       	swap	r24
    2580:	92 95       	swap	r25
    2582:	90 7f       	andi	r25, 0xF0	; 240
    2584:	98 27       	eor	r25, r24
    2586:	80 7f       	andi	r24, 0xF0	; 240
    2588:	98 27       	eor	r25, r24
    258a:	82 2b       	or	r24, r18
    258c:	8c 93       	st	X, r24
			/* Do Nothing */
		}

		/* Select Initial Value Of Timer0 */
		/* To Be Sure That Wont Add Value More Than TIMER0_MAX_VALUE */
		if (configptr->initial_value > TIMER0_MAX_VALUE)
    258e:	e9 81       	ldd	r30, Y+1	; 0x01
    2590:	fa 81       	ldd	r31, Y+2	; 0x02
    2592:	86 81       	ldd	r24, Z+6	; 0x06
    2594:	97 81       	ldd	r25, Z+7	; 0x07
    2596:	8f 3f       	cpi	r24, 0xFF	; 255
    2598:	91 05       	cpc	r25, r1
    259a:	09 f0       	breq	.+2      	; 0x259e <TIMER_init+0x14e>
    259c:	38 f4       	brcc	.+14     	; 0x25ac <TIMER_init+0x15c>
			/* Do Nothing */
		}
		else
		{
			/* Insert Initila Value To TCNT0 Register */
			TCNT0 = configptr->initial_value ;
    259e:	a2 e5       	ldi	r26, 0x52	; 82
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	86 81       	ldd	r24, Z+6	; 0x06
    25a8:	97 81       	ldd	r25, Z+7	; 0x07
    25aa:	8c 93       	st	X, r24
		}

		/* Select Compare Value Of Timer0 */
		/* To Be Sure That Wont Add Value More Than TIMER0_MAX_VALUE */
		if(configptr->compare_value > TIMER0_MAX_VALUE)
    25ac:	e9 81       	ldd	r30, Y+1	; 0x01
    25ae:	fa 81       	ldd	r31, Y+2	; 0x02
    25b0:	80 85       	ldd	r24, Z+8	; 0x08
    25b2:	91 85       	ldd	r25, Z+9	; 0x09
    25b4:	8f 3f       	cpi	r24, 0xFF	; 255
    25b6:	91 05       	cpc	r25, r1
    25b8:	09 f0       	breq	.+2      	; 0x25bc <TIMER_init+0x16c>
    25ba:	38 f4       	brcc	.+14     	; 0x25ca <TIMER_init+0x17a>
			/* Do Nothing */
		}
		else
		{
			/* Insert Compare Value To OCR0 Register */
			OCR0 = configptr->compare_value ;
    25bc:	ac e5       	ldi	r26, 0x5C	; 92
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e9 81       	ldd	r30, Y+1	; 0x01
    25c2:	fa 81       	ldd	r31, Y+2	; 0x02
    25c4:	80 85       	ldd	r24, Z+8	; 0x08
    25c6:	91 85       	ldd	r25, Z+9	; 0x09
    25c8:	8c 93       	st	X, r24
		}

		/*Select Prescaler Value */
		TCCR0 = (TCCR0 & 0xF8) | (configptr->timer_prescaler) ;
    25ca:	a3 e5       	ldi	r26, 0x53	; 83
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e3 e5       	ldi	r30, 0x53	; 83
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	98 2f       	mov	r25, r24
    25d6:	98 7f       	andi	r25, 0xF8	; 248
    25d8:	e9 81       	ldd	r30, Y+1	; 0x01
    25da:	fa 81       	ldd	r31, Y+2	; 0x02
    25dc:	85 81       	ldd	r24, Z+5	; 0x05
    25de:	89 2b       	or	r24, r25
    25e0:	8c 93       	st	X, r24
    25e2:	de c1       	rjmp	.+956    	; 0x29a0 <TIMER_init+0x550>

		break;

	case TIMER1 :
		/*Select Timer1_Mode */
		if (configptr->timer_mode == NORMAL)
    25e4:	e9 81       	ldd	r30, Y+1	; 0x01
    25e6:	fa 81       	ldd	r31, Y+2	; 0x02
    25e8:	81 81       	ldd	r24, Z+1	; 0x01
    25ea:	88 23       	and	r24, r24
    25ec:	99 f4       	brne	.+38     	; 0x2614 <TIMER_init+0x1c4>
		{
			#if TIMER1_OVF_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,TOIE1)
            #endif
			/*SET Non-PWM Pins & Select Normal Mode */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    25ee:	ef e4       	ldi	r30, 0x4F	; 79
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	8c e0       	ldi	r24, 0x0C	; 12
    25f4:	80 83       	st	Z, r24
			CLEAR_BIT(TCCR1B,WGM12);
    25f6:	ae e4       	ldi	r26, 0x4E	; 78
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	ee e4       	ldi	r30, 0x4E	; 78
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	87 7f       	andi	r24, 0xF7	; 247
    2602:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    2604:	ae e4       	ldi	r26, 0x4E	; 78
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	ee e4       	ldi	r30, 0x4E	; 78
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	8f 7e       	andi	r24, 0xEF	; 239
    2610:	8c 93       	st	X, r24
    2612:	fe c0       	rjmp	.+508    	; 0x2810 <TIMER_init+0x3c0>
		}
		else if (configptr->timer_mode == CTC)
    2614:	e9 81       	ldd	r30, Y+1	; 0x01
    2616:	fa 81       	ldd	r31, Y+2	; 0x02
    2618:	81 81       	ldd	r24, Z+1	; 0x01
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	09 f0       	breq	.+2      	; 0x2620 <TIMER_init+0x1d0>
    261e:	6b c0       	rjmp	.+214    	; 0x26f6 <TIMER_init+0x2a6>
			#endif
			#if TIMER1_CTCB_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,OCIE1B);
			#endif
			/* SET Timer1 Pins As Output */
			SET_BIT(DDRD,PD4); /* OC1B */
    2620:	a1 e3       	ldi	r26, 0x31	; 49
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e1 e3       	ldi	r30, 0x31	; 49
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 61       	ori	r24, 0x10	; 16
    262c:	8c 93       	st	X, r24
			SET_BIT(DDRD,PD5); /* OC1A */
    262e:	a1 e3       	ldi	r26, 0x31	; 49
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e1 e3       	ldi	r30, 0x31	; 49
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	80 62       	ori	r24, 0x20	; 32
    263a:	8c 93       	st	X, r24
			/*Clear All TCCR1A Register
			 * 1-Assume Its Normal CTC Mode
			 * 2- Non Pwm Signal
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    263c:	ef e4       	ldi	r30, 0x4F	; 79
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	8c e0       	ldi	r24, 0x0C	; 12
    2642:	80 83       	st	Z, r24

			/* Configure As CTC Mode */
			SET_BIT(TCCR1B, WGM12);
    2644:	ae e4       	ldi	r26, 0x4E	; 78
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ee e4       	ldi	r30, 0x4E	; 78
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	88 60       	ori	r24, 0x08	; 8
    2650:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2652:	ae e4       	ldi	r26, 0x4E	; 78
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ee e4       	ldi	r30, 0x4E	; 78
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	80 61       	ori	r24, 0x10	; 16
    265e:	8c 93       	st	X, r24
			if(configptr->ctc_mode == CTC_NORMAL)
    2660:	e9 81       	ldd	r30, Y+1	; 0x01
    2662:	fa 81       	ldd	r31, Y+2	; 0x02
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	88 23       	and	r24, r24
    2668:	09 f4       	brne	.+2      	; 0x266c <TIMER_init+0x21c>
    266a:	d2 c0       	rjmp	.+420    	; 0x2810 <TIMER_init+0x3c0>
			{
				/* Do Nothing */
			}
			else if (configptr->ctc_mode == CTC_TOGGLE)
    266c:	e9 81       	ldd	r30, Y+1	; 0x01
    266e:	fa 81       	ldd	r31, Y+2	; 0x02
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	79 f4       	brne	.+30     	; 0x2694 <TIMER_init+0x244>
			{
				SET_BIT(TCCR1A,COM1A0);
    2676:	af e4       	ldi	r26, 0x4F	; 79
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ef e4       	ldi	r30, 0x4F	; 79
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 64       	ori	r24, 0x40	; 64
    2682:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1B0);
    2684:	af e4       	ldi	r26, 0x4F	; 79
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ef e4       	ldi	r30, 0x4F	; 79
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	80 61       	ori	r24, 0x10	; 16
    2690:	8c 93       	st	X, r24
    2692:	be c0       	rjmp	.+380    	; 0x2810 <TIMER_init+0x3c0>
			}
			else if ( configptr->ctc_mode == CTC_CLEAR)
    2694:	e9 81       	ldd	r30, Y+1	; 0x01
    2696:	fa 81       	ldd	r31, Y+2	; 0x02
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	79 f4       	brne	.+30     	; 0x26bc <TIMER_init+0x26c>
			{
				SET_BIT(TCCR1A,COM1A1);
    269e:	af e4       	ldi	r26, 0x4F	; 79
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ef e4       	ldi	r30, 0x4F	; 79
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 68       	ori	r24, 0x80	; 128
    26aa:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1B1);
    26ac:	af e4       	ldi	r26, 0x4F	; 79
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	ef e4       	ldi	r30, 0x4F	; 79
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	80 62       	ori	r24, 0x20	; 32
    26b8:	8c 93       	st	X, r24
    26ba:	aa c0       	rjmp	.+340    	; 0x2810 <TIMER_init+0x3c0>
			}
			else
			{
				SET_BIT(TCCR1A, COM1A0);
    26bc:	af e4       	ldi	r26, 0x4F	; 79
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ef e4       	ldi	r30, 0x4F	; 79
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 64       	ori	r24, 0x40	; 64
    26c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    26ca:	af e4       	ldi	r26, 0x4F	; 79
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ef e4       	ldi	r30, 0x4F	; 79
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	80 61       	ori	r24, 0x10	; 16
    26d6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A1);
    26d8:	af e4       	ldi	r26, 0x4F	; 79
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ef e4       	ldi	r30, 0x4F	; 79
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	80 68       	ori	r24, 0x80	; 128
    26e4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    26e6:	af e4       	ldi	r26, 0x4F	; 79
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ef e4       	ldi	r30, 0x4F	; 79
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	80 62       	ori	r24, 0x20	; 32
    26f2:	8c 93       	st	X, r24
    26f4:	8d c0       	rjmp	.+282    	; 0x2810 <TIMER_init+0x3c0>
			}
		}
		else if (configptr->timer_mode == FAST_PWM)
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	09 f0       	breq	.+2      	; 0x2702 <TIMER_init+0x2b2>
    2700:	57 c0       	rjmp	.+174    	; 0x27b0 <TIMER_init+0x360>
		{
			/* SET Timer1 Pins As Output */
			SET_BIT(DDRD, PD4); /* OC1B */
    2702:	a1 e3       	ldi	r26, 0x31	; 49
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e1 e3       	ldi	r30, 0x31	; 49
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	80 61       	ori	r24, 0x10	; 16
    270e:	8c 93       	st	X, r24
			SET_BIT(DDRD, PD5); /* OC1A */
    2710:	a1 e3       	ldi	r26, 0x31	; 49
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e1 e3       	ldi	r30, 0x31	; 49
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 62       	ori	r24, 0x20	; 32
    271c:	8c 93       	st	X, r24

			/*Configure TCCR1A & TCCR1B Registers */
			/* Assume We Use FAST_PWM_NORMAL MODE */
			TCCR1A = (1<<WGM11);
    271e:	ef e4       	ldi	r30, 0x4F	; 79
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	80 83       	st	Z, r24
			SET_BIT(TCCR1B,WGM12);
    2726:	ae e4       	ldi	r26, 0x4E	; 78
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ee e4       	ldi	r30, 0x4E	; 78
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	88 60       	ori	r24, 0x08	; 8
    2732:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM13);
    2734:	ae e4       	ldi	r26, 0x4E	; 78
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	ee e4       	ldi	r30, 0x4E	; 78
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 61       	ori	r24, 0x10	; 16
    2740:	8c 93       	st	X, r24

			if (configptr->pwm_mode  == PWM_NORMAL)
    2742:	e9 81       	ldd	r30, Y+1	; 0x01
    2744:	fa 81       	ldd	r31, Y+2	; 0x02
    2746:	83 81       	ldd	r24, Z+3	; 0x03
    2748:	88 23       	and	r24, r24
    274a:	09 f4       	brne	.+2      	; 0x274e <TIMER_init+0x2fe>
    274c:	61 c0       	rjmp	.+194    	; 0x2810 <TIMER_init+0x3c0>
			{
				/* Do Nothing */
			}
			else if (configptr->pwm_mode == PWM_NON_INVERTING)
    274e:	e9 81       	ldd	r30, Y+1	; 0x01
    2750:	fa 81       	ldd	r31, Y+2	; 0x02
    2752:	83 81       	ldd	r24, Z+3	; 0x03
    2754:	82 30       	cpi	r24, 0x02	; 2
    2756:	79 f4       	brne	.+30     	; 0x2776 <TIMER_init+0x326>
			{
				SET_BIT(TCCR1A,COM1A1);
    2758:	af e4       	ldi	r26, 0x4F	; 79
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ef e4       	ldi	r30, 0x4F	; 79
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	80 68       	ori	r24, 0x80	; 128
    2764:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1B1);
    2766:	af e4       	ldi	r26, 0x4F	; 79
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ef e4       	ldi	r30, 0x4F	; 79
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	80 62       	ori	r24, 0x20	; 32
    2772:	8c 93       	st	X, r24
    2774:	4d c0       	rjmp	.+154    	; 0x2810 <TIMER_init+0x3c0>
			}
			else
			{
				SET_BIT(TCCR1A, COM1A1);
    2776:	af e4       	ldi	r26, 0x4F	; 79
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ef e4       	ldi	r30, 0x4F	; 79
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	80 68       	ori	r24, 0x80	; 128
    2782:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2784:	af e4       	ldi	r26, 0x4F	; 79
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ef e4       	ldi	r30, 0x4F	; 79
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	80 62       	ori	r24, 0x20	; 32
    2790:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1A0);
    2792:	af e4       	ldi	r26, 0x4F	; 79
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ef e4       	ldi	r30, 0x4F	; 79
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 64       	ori	r24, 0x40	; 64
    279e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B0);
    27a0:	af e4       	ldi	r26, 0x4F	; 79
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ef e4       	ldi	r30, 0x4F	; 79
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 61       	ori	r24, 0x10	; 16
    27ac:	8c 93       	st	X, r24
    27ae:	30 c0       	rjmp	.+96     	; 0x2810 <TIMER_init+0x3c0>
		{
			#if TIMER1_ICU_INTERRUPT_ENABLE == TRUE
			SET_BIT(TIMSK,TICIE1);
			#endif
			/* Configure ICU Pin As Input */
			CLEAR_BIT(DDRD,PD6); /*PD6 PIN */
    27b0:	a1 e3       	ldi	r26, 0x31	; 49
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e1 e3       	ldi	r30, 0x31	; 49
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 7b       	andi	r24, 0xBF	; 191
    27bc:	8c 93       	st	X, r24

			/* ICU Mode Always Run In Normal Mode Non Pwm */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    27be:	ef e4       	ldi	r30, 0x4F	; 79
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	8c e0       	ldi	r24, 0x0C	; 12
    27c4:	80 83       	st	Z, r24
			CLEAR_BIT(TCCR1B,WGM12);
    27c6:	ae e4       	ldi	r26, 0x4E	; 78
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	ee e4       	ldi	r30, 0x4E	; 78
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	87 7f       	andi	r24, 0xF7	; 247
    27d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    27d4:	ae e4       	ldi	r26, 0x4E	; 78
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ee e4       	ldi	r30, 0x4E	; 78
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8f 7e       	andi	r24, 0xEF	; 239
    27e0:	8c 93       	st	X, r24

			/*Edge Detection */
			TCCR1B = (TCCR1B & 0xBF) | ((configptr->detection_edge)<<6);
    27e2:	ae e4       	ldi	r26, 0x4E	; 78
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	ee e4       	ldi	r30, 0x4E	; 78
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	28 2f       	mov	r18, r24
    27ee:	2f 7b       	andi	r18, 0xBF	; 191
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	84 81       	ldd	r24, Z+4	; 0x04
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	00 24       	eor	r0, r0
    27fc:	96 95       	lsr	r25
    27fe:	87 95       	ror	r24
    2800:	07 94       	ror	r0
    2802:	96 95       	lsr	r25
    2804:	87 95       	ror	r24
    2806:	07 94       	ror	r0
    2808:	98 2f       	mov	r25, r24
    280a:	80 2d       	mov	r24, r0
    280c:	82 2b       	or	r24, r18
    280e:	8c 93       	st	X, r24
		/* To Be Sure That Wont Add Value More Than TIMER0_MAX_VALUE */
		if (configptr->initial_value > TIMER1_MAX_VALUE) {
			/* Do Nothing */
		} else {
			/* Insert Initila Value To TCNT0 Register */
			TCNT1 = configptr->initial_value;
    2810:	ac e4       	ldi	r26, 0x4C	; 76
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e9 81       	ldd	r30, Y+1	; 0x01
    2816:	fa 81       	ldd	r31, Y+2	; 0x02
    2818:	86 81       	ldd	r24, Z+6	; 0x06
    281a:	97 81       	ldd	r25, Z+7	; 0x07
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	9c 93       	st	X, r25
    2820:	8e 93       	st	-X, r24
		/* To Be Sure That Wont Add Value More Than TIMER1_MAX_VALUE */
		if (configptr->compare_value > TIMER1_MAX_VALUE) {
			/* Do Nothing */
		} else {
			/* Insert Compare Value To ICR1 Register */
			ICR1 = configptr->compare_value;
    2822:	a6 e4       	ldi	r26, 0x46	; 70
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	80 85       	ldd	r24, Z+8	; 0x08
    282c:	91 85       	ldd	r25, Z+9	; 0x09
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
		}

		/* Prescaler Of Timer */
		TCCR1B = (TCCR1B & 0xF8) | (configptr->timer_prescaler);
    2834:	ae e4       	ldi	r26, 0x4E	; 78
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ee e4       	ldi	r30, 0x4E	; 78
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	98 2f       	mov	r25, r24
    2840:	98 7f       	andi	r25, 0xF8	; 248
    2842:	e9 81       	ldd	r30, Y+1	; 0x01
    2844:	fa 81       	ldd	r31, Y+2	; 0x02
    2846:	85 81       	ldd	r24, Z+5	; 0x05
    2848:	89 2b       	or	r24, r25
    284a:	8c 93       	st	X, r24
    284c:	a9 c0       	rjmp	.+338    	; 0x29a0 <TIMER_init+0x550>

		break;

	case TIMER2:
		/* Select Timer2_Modes */
		if (configptr->timer_mode == NORMAL) {
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	81 81       	ldd	r24, Z+1	; 0x01
    2854:	88 23       	and	r24, r24
    2856:	b1 f4       	brne	.+44     	; 0x2884 <TIMER_init+0x434>
			/*Enable OverFlow Interrupt */
#if TIMER2_OVF_INTERRUPT_ENABLE == TRUE
					SET_BIT(TIMSK,TOIE2)
					#endif
			/* SET Non-PWM Pin */
			SET_BIT(TCCR2, FOC2);
    2858:	a5 e4       	ldi	r26, 0x45	; 69
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e5 e4       	ldi	r30, 0x45	; 69
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	80 68       	ori	r24, 0x80	; 128
    2864:	8c 93       	st	X, r24
			/*CLEAR Waveform Generations Pins */
			CLEAR_BIT(TCCR2, WGM20);
    2866:	a5 e4       	ldi	r26, 0x45	; 69
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e5 e4       	ldi	r30, 0x45	; 69
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8f 7b       	andi	r24, 0xBF	; 191
    2872:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, WGM21);
    2874:	a5 e4       	ldi	r26, 0x45	; 69
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e5 e4       	ldi	r30, 0x45	; 69
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	87 7f       	andi	r24, 0xF7	; 247
    2880:	8c 93       	st	X, r24
    2882:	64 c0       	rjmp	.+200    	; 0x294c <TIMER_init+0x4fc>
		} else if (configptr->timer_mode == CTC) {
    2884:	e9 81       	ldd	r30, Y+1	; 0x01
    2886:	fa 81       	ldd	r31, Y+2	; 0x02
    2888:	81 81       	ldd	r24, Z+1	; 0x01
    288a:	82 30       	cpi	r24, 0x02	; 2
    288c:	89 f5       	brne	.+98     	; 0x28f0 <TIMER_init+0x4a0>
			/* Enable Compare  Interrupt */
#if TIMER2_CTC_INTERRUPT_ENABLE == TRUE
					SET_BIT(TIMSK,OCIE2);
					#endif
			/* Set PD7 Timer2 PIN As Output */
			SET_BIT(DDRD, PD7);
    288e:	a1 e3       	ldi	r26, 0x31	; 49
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e1 e3       	ldi	r30, 0x31	; 49
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	80 68       	ori	r24, 0x80	; 128
    289a:	8c 93       	st	X, r24
			/* SET Non-PWM Pin */
			SET_BIT(TCCR2, FOC2);
    289c:	a5 e4       	ldi	r26, 0x45	; 69
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e5 e4       	ldi	r30, 0x45	; 69
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	80 68       	ori	r24, 0x80	; 128
    28a8:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			CLEAR_BIT(TCCR2, WGM20);
    28aa:	a5 e4       	ldi	r26, 0x45	; 69
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e5 e4       	ldi	r30, 0x45	; 69
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 7b       	andi	r24, 0xBF	; 191
    28b6:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    28b8:	a5 e4       	ldi	r26, 0x45	; 69
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e5 e4       	ldi	r30, 0x45	; 69
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	88 60       	ori	r24, 0x08	; 8
    28c4:	8c 93       	st	X, r24
			/* Check Operation Of CTC Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((configptr->ctc_mode) << COM20);
    28c6:	a5 e4       	ldi	r26, 0x45	; 69
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e5 e4       	ldi	r30, 0x45	; 69
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	28 2f       	mov	r18, r24
    28d2:	2f 7c       	andi	r18, 0xCF	; 207
    28d4:	e9 81       	ldd	r30, Y+1	; 0x01
    28d6:	fa 81       	ldd	r31, Y+2	; 0x02
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	82 95       	swap	r24
    28e0:	92 95       	swap	r25
    28e2:	90 7f       	andi	r25, 0xF0	; 240
    28e4:	98 27       	eor	r25, r24
    28e6:	80 7f       	andi	r24, 0xF0	; 240
    28e8:	98 27       	eor	r25, r24
    28ea:	82 2b       	or	r24, r18
    28ec:	8c 93       	st	X, r24
    28ee:	2e c0       	rjmp	.+92     	; 0x294c <TIMER_init+0x4fc>
		} else if (configptr->timer_mode == FAST_PWM) {
    28f0:	e9 81       	ldd	r30, Y+1	; 0x01
    28f2:	fa 81       	ldd	r31, Y+2	; 0x02
    28f4:	81 81       	ldd	r24, Z+1	; 0x01
    28f6:	83 30       	cpi	r24, 0x03	; 3
    28f8:	49 f5       	brne	.+82     	; 0x294c <TIMER_init+0x4fc>
			/* Set PD7 Timer2 PIN As Output */
			SET_BIT(DDRD, PD7);
    28fa:	a1 e3       	ldi	r26, 0x31	; 49
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e1 e3       	ldi	r30, 0x31	; 49
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	80 68       	ori	r24, 0x80	; 128
    2906:	8c 93       	st	X, r24
			/*Configure Waveform Generation Pins */
			SET_BIT(TCCR2, WGM20);
    2908:	a5 e4       	ldi	r26, 0x45	; 69
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e5 e4       	ldi	r30, 0x45	; 69
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 64       	ori	r24, 0x40	; 64
    2914:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    2916:	a5 e4       	ldi	r26, 0x45	; 69
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e5 e4       	ldi	r30, 0x45	; 69
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	88 60       	ori	r24, 0x08	; 8
    2922:	8c 93       	st	X, r24
			/* Check Operation Of PWM Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((configptr->pwm_mode) << COM20);
    2924:	a5 e4       	ldi	r26, 0x45	; 69
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e5 e4       	ldi	r30, 0x45	; 69
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	28 2f       	mov	r18, r24
    2930:	2f 7c       	andi	r18, 0xCF	; 207
    2932:	e9 81       	ldd	r30, Y+1	; 0x01
    2934:	fa 81       	ldd	r31, Y+2	; 0x02
    2936:	83 81       	ldd	r24, Z+3	; 0x03
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	82 95       	swap	r24
    293e:	92 95       	swap	r25
    2940:	90 7f       	andi	r25, 0xF0	; 240
    2942:	98 27       	eor	r25, r24
    2944:	80 7f       	andi	r24, 0xF0	; 240
    2946:	98 27       	eor	r25, r24
    2948:	82 2b       	or	r24, r18
    294a:	8c 93       	st	X, r24
			/* Do Nothing */
		}

		/* Select Initial Value Of Timer2 */
		/* To Be Sure That Wont Add Value More Than TIMER2_MAX_VALUE */
		if (configptr->initial_value > TIMER2_MAX_VALUE) {
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	86 81       	ldd	r24, Z+6	; 0x06
    2952:	97 81       	ldd	r25, Z+7	; 0x07
    2954:	8f 3f       	cpi	r24, 0xFF	; 255
    2956:	91 05       	cpc	r25, r1
    2958:	09 f0       	breq	.+2      	; 0x295c <TIMER_init+0x50c>
    295a:	38 f4       	brcc	.+14     	; 0x296a <TIMER_init+0x51a>
			/* Do Nothing */
		} else {
			/* Insert Initila Value To TCNT2 Register */
			TCNT2 = configptr->initial_value;
    295c:	a4 e4       	ldi	r26, 0x44	; 68
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e9 81       	ldd	r30, Y+1	; 0x01
    2962:	fa 81       	ldd	r31, Y+2	; 0x02
    2964:	86 81       	ldd	r24, Z+6	; 0x06
    2966:	97 81       	ldd	r25, Z+7	; 0x07
    2968:	8c 93       	st	X, r24
		}

		/* Select Compare Value Of Timer2 */
		/* To Be Sure That Wont Add Value More Than TIMER2_MAX_VALUE */
		if (configptr->compare_value > TIMER2_MAX_VALUE) {
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	80 85       	ldd	r24, Z+8	; 0x08
    2970:	91 85       	ldd	r25, Z+9	; 0x09
    2972:	8f 3f       	cpi	r24, 0xFF	; 255
    2974:	91 05       	cpc	r25, r1
    2976:	09 f0       	breq	.+2      	; 0x297a <TIMER_init+0x52a>
    2978:	38 f4       	brcc	.+14     	; 0x2988 <TIMER_init+0x538>
			/* Do Nothing */
		} else {
			/* Insert Compare Value To OCR0 Register */
			OCR2 = configptr->compare_value;
    297a:	a3 e4       	ldi	r26, 0x43	; 67
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	80 85       	ldd	r24, Z+8	; 0x08
    2984:	91 85       	ldd	r25, Z+9	; 0x09
    2986:	8c 93       	st	X, r24
		}

		/*Select Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | (configptr->timer_prescaler);
    2988:	a5 e4       	ldi	r26, 0x45	; 69
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e4       	ldi	r30, 0x45	; 69
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	98 2f       	mov	r25, r24
    2994:	98 7f       	andi	r25, 0xF8	; 248
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	85 81       	ldd	r24, Z+5	; 0x05
    299c:	89 2b       	or	r24, r25
    299e:	8c 93       	st	X, r24

		break;

	}
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <TIMER_deinit>:
 * 1- Deinit Any Timer
 */
/* Input : Variable Of TIMER_timerID */
/* Output : None */
void TIMER_deinit(TIMER_timerID timer_id)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <TIMER_deinit+0x6>
    29b4:	0f 92       	push	r0
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_id)
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	3b 83       	std	Y+3, r19	; 0x03
    29c4:	2a 83       	std	Y+2, r18	; 0x02
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	91 05       	cpc	r25, r1
    29ce:	99 f0       	breq	.+38     	; 0x29f6 <TIMER_deinit+0x48>
    29d0:	2a 81       	ldd	r18, Y+2	; 0x02
    29d2:	3b 81       	ldd	r19, Y+3	; 0x03
    29d4:	22 30       	cpi	r18, 0x02	; 2
    29d6:	31 05       	cpc	r19, r1
    29d8:	21 f1       	breq	.+72     	; 0x2a22 <TIMER_deinit+0x74>
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	9b 81       	ldd	r25, Y+3	; 0x03
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	49 f5       	brne	.+82     	; 0x2a34 <TIMER_deinit+0x86>
	{
	case TIMER0 :
		TCCR0 = 0 ;
    29e2:	e3 e5       	ldi	r30, 0x53	; 83
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    29e8:	e2 e5       	ldi	r30, 0x52	; 82
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	10 82       	st	Z, r1
		OCR0 = 0 ;
    29ee:	ec e5       	ldi	r30, 0x5C	; 92
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	10 82       	st	Z, r1
    29f4:	1f c0       	rjmp	.+62     	; 0x2a34 <TIMER_deinit+0x86>
		break ;
	case TIMER1 :
		TCCR1A = 0 ;
    29f6:	ef e4       	ldi	r30, 0x4F	; 79
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	10 82       	st	Z, r1
		TCCR1B = 0 ;
    29fc:	ee e4       	ldi	r30, 0x4E	; 78
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	10 82       	st	Z, r1
		TCNT1 = 0 ;
    2a02:	ec e4       	ldi	r30, 0x4C	; 76
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	11 82       	std	Z+1, r1	; 0x01
    2a08:	10 82       	st	Z, r1
		ICR1 = 0 ;
    2a0a:	e6 e4       	ldi	r30, 0x46	; 70
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	11 82       	std	Z+1, r1	; 0x01
    2a10:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TICIE1);
    2a12:	a9 e5       	ldi	r26, 0x59	; 89
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e9 e5       	ldi	r30, 0x59	; 89
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8f 7d       	andi	r24, 0xDF	; 223
    2a1e:	8c 93       	st	X, r24
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <TIMER_deinit+0x86>
		break;
	case TIMER2 :
		TCCR2 = 0 ;
    2a22:	e5 e4       	ldi	r30, 0x45	; 69
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	10 82       	st	Z, r1
		TCNT2 = 0 ;
    2a28:	e4 e4       	ldi	r30, 0x44	; 68
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	10 82       	st	Z, r1
		OCR2 = 0 ;
    2a2e:	e3 e4       	ldi	r30, 0x43	; 67
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	10 82       	st	Z, r1
		break ;
	}
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <TIMER_SetCallBack>:
 * 			2- Ptr2Func
 */
/*Output : None */

void TIMER_SetCallBack(TIMER_timerID timer_id ,void (*ptr2func)(void))
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <TIMER_SetCallBack+0x6>
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <TIMER_SetCallBack+0x8>
    2a48:	0f 92       	push	r0
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	7b 83       	std	Y+3, r23	; 0x03
    2a52:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer_id)
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	3d 83       	std	Y+5, r19	; 0x05
    2a5c:	2c 83       	std	Y+4, r18	; 0x04
    2a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a60:	9d 81       	ldd	r25, Y+5	; 0x05
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	91 05       	cpc	r25, r1
    2a66:	81 f0       	breq	.+32     	; 0x2a88 <TIMER_SetCallBack+0x48>
    2a68:	2c 81       	ldd	r18, Y+4	; 0x04
    2a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a6c:	22 30       	cpi	r18, 0x02	; 2
    2a6e:	31 05       	cpc	r19, r1
    2a70:	91 f0       	breq	.+36     	; 0x2a96 <TIMER_SetCallBack+0x56>
    2a72:	8c 81       	ldd	r24, Y+4	; 0x04
    2a74:	9d 81       	ldd	r25, Y+5	; 0x05
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	a1 f4       	brne	.+40     	; 0x2aa2 <TIMER_SetCallBack+0x62>
	{
	case TIMER0 :
		g_timer0_callBackPtr = ptr2func ;
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7e:	90 93 0f 01 	sts	0x010F, r25
    2a82:	80 93 0e 01 	sts	0x010E, r24
    2a86:	0d c0       	rjmp	.+26     	; 0x2aa2 <TIMER_SetCallBack+0x62>
		break ;
	case TIMER1 :
		g_timer1_callBackPtr = ptr2func ;
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	90 93 11 01 	sts	0x0111, r25
    2a90:	80 93 10 01 	sts	0x0110, r24
    2a94:	06 c0       	rjmp	.+12     	; 0x2aa2 <TIMER_SetCallBack+0x62>
		break;
	case TIMER2 :
		g_timer2_callBackPtr = ptr2func ;
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9a:	90 93 13 01 	sts	0x0113, r25
    2a9e:	80 93 12 01 	sts	0x0112, r24
		break ;
	}
}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <TIMER1_icuChangeEdgeDetection>:
/*DESCRIPTION
 * Change TIMER1_Icu Detectig Edge */
/* INPUT : 1- Variable Of TIMER1_icuDetectionEdge */
/* OUTPUT : NONE */
void TIMER1_icuChangeEdgeDetection(TIMER1_icuDetectionEdge edge)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | (edge<<6) ;
    2abe:	ae e4       	ldi	r26, 0x4E	; 78
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	ee e4       	ldi	r30, 0x4E	; 78
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	28 2f       	mov	r18, r24
    2aca:	2f 7b       	andi	r18, 0xBF	; 191
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	88 2f       	mov	r24, r24
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	00 24       	eor	r0, r0
    2ad4:	96 95       	lsr	r25
    2ad6:	87 95       	ror	r24
    2ad8:	07 94       	ror	r0
    2ada:	96 95       	lsr	r25
    2adc:	87 95       	ror	r24
    2ade:	07 94       	ror	r0
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	80 2d       	mov	r24, r0
    2ae4:	82 2b       	or	r24, r18
    2ae6:	8c 93       	st	X, r24
}
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <TIMER1_icuGetInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 TIMER1_icuGetInputCaptureValue(void)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    2af8:	e6 e4       	ldi	r30, 0x46	; 70
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <TIMER1_clearInitialValue>:
/*
 * Description: Function to clear the Initial Value Of Timer1
 */
void TIMER1_clearInitialValue(void)
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2b0e:	ec e4       	ldi	r30, 0x4C	; 76
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	11 82       	std	Z+1, r1	; 0x01
    2b14:	10 82       	st	Z, r1
}
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <TIMER_changeCompareValue>:
 * Change Compare Value Of Timer
 */
/* Input : Timer_id , Compare Value */
/* OUTPUT : NONE */
void TIMER_changeCompareValue(TIMER_timerID timer_id , uint16 compare_value)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <TIMER_changeCompareValue+0x6>
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <TIMER_changeCompareValue+0x8>
    2b24:	0f 92       	push	r0
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	7b 83       	std	Y+3, r23	; 0x03
    2b2e:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer_id)
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	3d 83       	std	Y+5, r19	; 0x05
    2b38:	2c 83       	std	Y+4, r18	; 0x04
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	91 05       	cpc	r25, r1
    2b42:	a1 f0       	breq	.+40     	; 0x2b6c <TIMER_changeCompareValue+0x50>
    2b44:	2c 81       	ldd	r18, Y+4	; 0x04
    2b46:	3d 81       	ldd	r19, Y+5	; 0x05
    2b48:	22 30       	cpi	r18, 0x02	; 2
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	b1 f0       	breq	.+44     	; 0x2b7a <TIMER_changeCompareValue+0x5e>
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	9d 81       	ldd	r25, Y+5	; 0x05
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	e1 f4       	brne	.+56     	; 0x2b8e <TIMER_changeCompareValue+0x72>
	{
	case TIMER0 :
		if (compare_value > TIMER0_MAX_VALUE)
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <TIMER_changeCompareValue+0x46>
    2b60:	b0 f4       	brcc	.+44     	; 0x2b8e <TIMER_changeCompareValue+0x72>
		{
			/* Do Nothing */
		}
		else
		{
			OCR0 = compare_value ;
    2b62:	ec e5       	ldi	r30, 0x5C	; 92
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	80 83       	st	Z, r24
    2b6a:	11 c0       	rjmp	.+34     	; 0x2b8e <TIMER_changeCompareValue+0x72>
		break ;
	case TIMER1 :
		if (compare_value > TIMER1_MAX_VALUE) {
			/* Do Nothing */
		} else {
			ICR1 = compare_value;
    2b6c:	e6 e4       	ldi	r30, 0x46	; 70
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
    2b78:	0a c0       	rjmp	.+20     	; 0x2b8e <TIMER_changeCompareValue+0x72>
		}
		break;
	case TIMER2 :
		if (compare_value > TIMER2_MAX_VALUE) {
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b80:	91 05       	cpc	r25, r1
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <TIMER_changeCompareValue+0x6a>
    2b84:	20 f4       	brcc	.+8      	; 0x2b8e <TIMER_changeCompareValue+0x72>
			/* Do Nothing */
		} else {
			OCR2 = compare_value;
    2b86:	e3 e4       	ldi	r30, 0x43	; 67
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	80 83       	st	Z, r24
		}
		break;
	}
}
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <TIMER_changeInitialValue>:
 * Change Initial Value
 */
/* Input : Timer_id , Initial  Value */
/* OUTPUT : NONE */
void TIMER_changeInitialValue(TIMER_timerID timer_id , uint16 initial_value)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <TIMER_changeInitialValue+0x6>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <TIMER_changeInitialValue+0x8>
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	7b 83       	std	Y+3, r23	; 0x03
    2bb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer_id)
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	3d 83       	std	Y+5, r19	; 0x05
    2bba:	2c 83       	std	Y+4, r18	; 0x04
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	a1 f0       	breq	.+40     	; 0x2bee <TIMER_changeInitialValue+0x50>
    2bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	31 05       	cpc	r19, r1
    2bce:	b1 f0       	breq	.+44     	; 0x2bfc <TIMER_changeInitialValue+0x5e>
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	e1 f4       	brne	.+56     	; 0x2c10 <TIMER_changeInitialValue+0x72>
		{
		case TIMER0 :
			if (initial_value > TIMER0_MAX_VALUE)
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	9b 81       	ldd	r25, Y+3	; 0x03
    2bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bde:	91 05       	cpc	r25, r1
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <TIMER_changeInitialValue+0x46>
    2be2:	b0 f4       	brcc	.+44     	; 0x2c10 <TIMER_changeInitialValue+0x72>
			{
				/* Do Nothing */
			}
			else
			{
				TCNT0 = initial_value ;
    2be4:	e2 e5       	ldi	r30, 0x52	; 82
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	80 83       	st	Z, r24
    2bec:	11 c0       	rjmp	.+34     	; 0x2c10 <TIMER_changeInitialValue+0x72>
			break ;
		case TIMER1 :
			if (initial_value > TIMER1_MAX_VALUE) {
				/* Do Nothing */
			} else {
				TCNT1 = initial_value;
    2bee:	ec e4       	ldi	r30, 0x4C	; 76
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	0a c0       	rjmp	.+20     	; 0x2c10 <TIMER_changeInitialValue+0x72>
			}
			break;
		case TIMER2 :
			if (initial_value > TIMER2_MAX_VALUE) {
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	8f 3f       	cpi	r24, 0xFF	; 255
    2c02:	91 05       	cpc	r25, r1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <TIMER_changeInitialValue+0x6a>
    2c06:	20 f4       	brcc	.+8      	; 0x2c10 <TIMER_changeInitialValue+0x72>
				/* Do Nothing */
			} else {
				TCNT2 = initial_value;
    2c08:	e4 e4       	ldi	r30, 0x44	; 68
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	80 83       	st	Z, r24
			}
			break;
		}
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <TIMER0_delay_ms>:
 *  2- Disable Timer After Delay
 *  3- We Should Initialize Timer0 To Be CTC Mode 0CO Disable
 */
#if TIMER0_CTC_INTERRUPT_ENABLE == FALSE
void TIMER0_delay_ms(uint64 time_in_ms)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	eb 97       	sbiw	r28, 0x3b	; 59
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	29 87       	std	Y+9, r18	; 0x09
    2c36:	3a 87       	std	Y+10, r19	; 0x0a
    2c38:	4b 87       	std	Y+11, r20	; 0x0b
    2c3a:	5c 87       	std	Y+12, r21	; 0x0c
    2c3c:	6d 87       	std	Y+13, r22	; 0x0d
    2c3e:	7e 87       	std	Y+14, r23	; 0x0e
    2c40:	8f 87       	std	Y+15, r24	; 0x0f
    2c42:	98 8b       	std	Y+16, r25	; 0x10
	uint64 i = 0;
    2c44:	19 82       	std	Y+1, r1	; 0x01
    2c46:	1a 82       	std	Y+2, r1	; 0x02
    2c48:	1b 82       	std	Y+3, r1	; 0x03
    2c4a:	1c 82       	std	Y+4, r1	; 0x04
    2c4c:	1d 82       	std	Y+5, r1	; 0x05
    2c4e:	1e 82       	std	Y+6, r1	; 0x06
    2c50:	1f 82       	std	Y+7, r1	; 0x07
    2c52:	18 86       	std	Y+8, r1	; 0x08

	/* Set Initial Value */
	TCNT0 = 0 ;
    2c54:	e2 e5       	ldi	r30, 0x52	; 82
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	10 82       	st	Z, r1
	/* Set Compare Value As  125-1 = 124*/
	OCR0 = 124 ;
    2c5a:	ec e5       	ldi	r30, 0x5C	; 92
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	8c e7       	ldi	r24, 0x7C	; 124
    2c60:	80 83       	st	Z, r24

	/* Change Clock To Be FCPU_64 */
	TCCR0 = (TCCR0 & 0xF8) | (0x03);
    2c62:	a3 e5       	ldi	r26, 0x53	; 83
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e3 e5       	ldi	r30, 0x53	; 83
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 7f       	andi	r24, 0xF8	; 248
    2c6e:	83 60       	ori	r24, 0x03	; 3
    2c70:	8c 93       	st	X, r24

	for (i=0 ; i <time_in_ms ; i++)
    2c72:	19 82       	std	Y+1, r1	; 0x01
    2c74:	1a 82       	std	Y+2, r1	; 0x02
    2c76:	1b 82       	std	Y+3, r1	; 0x03
    2c78:	1c 82       	std	Y+4, r1	; 0x04
    2c7a:	1d 82       	std	Y+5, r1	; 0x05
    2c7c:	1e 82       	std	Y+6, r1	; 0x06
    2c7e:	1f 82       	std	Y+7, r1	; 0x07
    2c80:	18 86       	std	Y+8, r1	; 0x08
    2c82:	f4 c0       	rjmp	.+488    	; 0x2e6c <TIMER0_delay_ms+0x24c>
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));
    2c84:	e8 e5       	ldi	r30, 0x58	; 88
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	82 70       	andi	r24, 0x02	; 2
    2c90:	90 70       	andi	r25, 0x00	; 0
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	b9 f3       	breq	.-18     	; 0x2c84 <TIMER0_delay_ms+0x64>
		SET_BIT(TIFR,OCF0);
    2c96:	a8 e5       	ldi	r26, 0x58	; 88
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e8 e5       	ldi	r30, 0x58	; 88
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	82 60       	ori	r24, 0x02	; 2
    2ca2:	8c 93       	st	X, r24
	OCR0 = 124 ;

	/* Change Clock To Be FCPU_64 */
	TCCR0 = (TCCR0 & 0xF8) | (0x03);

	for (i=0 ; i <time_in_ms ; i++)
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	89 8b       	std	Y+17, r24	; 0x11
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	9a 8b       	std	Y+18, r25	; 0x12
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb2:	9c 8b       	std	Y+20, r25	; 0x14
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	8d 8b       	std	Y+21, r24	; 0x15
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	9e 8b       	std	Y+22, r25	; 0x16
    2cbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cbe:	8f 8b       	std	Y+23, r24	; 0x17
    2cc0:	98 85       	ldd	r25, Y+8	; 0x08
    2cc2:	98 8f       	std	Y+24, r25	; 0x18
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	89 8f       	std	Y+25, r24	; 0x19
    2cc8:	1a 8e       	std	Y+26, r1	; 0x1a
    2cca:	1b 8e       	std	Y+27, r1	; 0x1b
    2ccc:	1c 8e       	std	Y+28, r1	; 0x1c
    2cce:	1d 8e       	std	Y+29, r1	; 0x1d
    2cd0:	1e 8e       	std	Y+30, r1	; 0x1e
    2cd2:	1f 8e       	std	Y+31, r1	; 0x1f
    2cd4:	18 a2       	std	Y+32, r1	; 0x20
    2cd6:	99 89       	ldd	r25, Y+17	; 0x11
    2cd8:	89 8d       	ldd	r24, Y+25	; 0x19
    2cda:	98 0f       	add	r25, r24
    2cdc:	99 a3       	std	Y+33, r25	; 0x21
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	99 a7       	std	Y+41, r25	; 0x29
    2ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce4:	99 89       	ldd	r25, Y+17	; 0x11
    2ce6:	89 17       	cp	r24, r25
    2ce8:	08 f0       	brcs	.+2      	; 0x2cec <TIMER0_delay_ms+0xcc>
    2cea:	19 a6       	std	Y+41, r1	; 0x29
    2cec:	8a 89       	ldd	r24, Y+18	; 0x12
    2cee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cf0:	89 0f       	add	r24, r25
    2cf2:	8a a3       	std	Y+34, r24	; 0x22
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	8a a7       	std	Y+42, r24	; 0x2a
    2cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfa:	8a 89       	ldd	r24, Y+18	; 0x12
    2cfc:	98 17       	cp	r25, r24
    2cfe:	08 f0       	brcs	.+2      	; 0x2d02 <TIMER0_delay_ms+0xe2>
    2d00:	1a a6       	std	Y+42, r1	; 0x2a
    2d02:	99 a5       	ldd	r25, Y+41	; 0x29
    2d04:	8a a1       	ldd	r24, Y+34	; 0x22
    2d06:	98 0f       	add	r25, r24
    2d08:	9b a7       	std	Y+43, r25	; 0x2b
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	9c a7       	std	Y+44, r25	; 0x2c
    2d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d10:	9a a1       	ldd	r25, Y+34	; 0x22
    2d12:	89 17       	cp	r24, r25
    2d14:	08 f0       	brcs	.+2      	; 0x2d18 <TIMER0_delay_ms+0xf8>
    2d16:	1c a6       	std	Y+44, r1	; 0x2c
    2d18:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d1c:	89 2b       	or	r24, r25
    2d1e:	8a a7       	std	Y+42, r24	; 0x2a
    2d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d22:	8a a3       	std	Y+34, r24	; 0x22
    2d24:	9b 89       	ldd	r25, Y+19	; 0x13
    2d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d28:	98 0f       	add	r25, r24
    2d2a:	9b a3       	std	Y+35, r25	; 0x23
    2d2c:	91 e0       	ldi	r25, 0x01	; 1
    2d2e:	9d a7       	std	Y+45, r25	; 0x2d
    2d30:	8b a1       	ldd	r24, Y+35	; 0x23
    2d32:	9b 89       	ldd	r25, Y+19	; 0x13
    2d34:	89 17       	cp	r24, r25
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <TIMER0_delay_ms+0x11a>
    2d38:	1d a6       	std	Y+45, r1	; 0x2d
    2d3a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d3c:	9b a1       	ldd	r25, Y+35	; 0x23
    2d3e:	89 0f       	add	r24, r25
    2d40:	8e a7       	std	Y+46, r24	; 0x2e
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	8f a7       	std	Y+47, r24	; 0x2f
    2d46:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d48:	8b a1       	ldd	r24, Y+35	; 0x23
    2d4a:	98 17       	cp	r25, r24
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <TIMER0_delay_ms+0x130>
    2d4e:	1f a6       	std	Y+47, r1	; 0x2f
    2d50:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d54:	98 2b       	or	r25, r24
    2d56:	9d a7       	std	Y+45, r25	; 0x2d
    2d58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d5a:	9b a3       	std	Y+35, r25	; 0x23
    2d5c:	8c 89       	ldd	r24, Y+20	; 0x14
    2d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d60:	89 0f       	add	r24, r25
    2d62:	8c a3       	std	Y+36, r24	; 0x24
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	88 ab       	std	Y+48, r24	; 0x30
    2d68:	9c a1       	ldd	r25, Y+36	; 0x24
    2d6a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d6c:	98 17       	cp	r25, r24
    2d6e:	08 f0       	brcs	.+2      	; 0x2d72 <TIMER0_delay_ms+0x152>
    2d70:	18 aa       	std	Y+48, r1	; 0x30
    2d72:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d74:	8c a1       	ldd	r24, Y+36	; 0x24
    2d76:	98 0f       	add	r25, r24
    2d78:	99 ab       	std	Y+49, r25	; 0x31
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	9a ab       	std	Y+50, r25	; 0x32
    2d7e:	89 a9       	ldd	r24, Y+49	; 0x31
    2d80:	9c a1       	ldd	r25, Y+36	; 0x24
    2d82:	89 17       	cp	r24, r25
    2d84:	08 f0       	brcs	.+2      	; 0x2d88 <TIMER0_delay_ms+0x168>
    2d86:	1a aa       	std	Y+50, r1	; 0x32
    2d88:	88 a9       	ldd	r24, Y+48	; 0x30
    2d8a:	9a a9       	ldd	r25, Y+50	; 0x32
    2d8c:	89 2b       	or	r24, r25
    2d8e:	88 ab       	std	Y+48, r24	; 0x30
    2d90:	89 a9       	ldd	r24, Y+49	; 0x31
    2d92:	8c a3       	std	Y+36, r24	; 0x24
    2d94:	9d 89       	ldd	r25, Y+21	; 0x15
    2d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d98:	98 0f       	add	r25, r24
    2d9a:	9d a3       	std	Y+37, r25	; 0x25
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	9b ab       	std	Y+51, r25	; 0x33
    2da0:	8d a1       	ldd	r24, Y+37	; 0x25
    2da2:	9d 89       	ldd	r25, Y+21	; 0x15
    2da4:	89 17       	cp	r24, r25
    2da6:	08 f0       	brcs	.+2      	; 0x2daa <TIMER0_delay_ms+0x18a>
    2da8:	1b aa       	std	Y+51, r1	; 0x33
    2daa:	88 a9       	ldd	r24, Y+48	; 0x30
    2dac:	9d a1       	ldd	r25, Y+37	; 0x25
    2dae:	89 0f       	add	r24, r25
    2db0:	8c ab       	std	Y+52, r24	; 0x34
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	8d ab       	std	Y+53, r24	; 0x35
    2db6:	9c a9       	ldd	r25, Y+52	; 0x34
    2db8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dba:	98 17       	cp	r25, r24
    2dbc:	08 f0       	brcs	.+2      	; 0x2dc0 <TIMER0_delay_ms+0x1a0>
    2dbe:	1d aa       	std	Y+53, r1	; 0x35
    2dc0:	9b a9       	ldd	r25, Y+51	; 0x33
    2dc2:	8d a9       	ldd	r24, Y+53	; 0x35
    2dc4:	98 2b       	or	r25, r24
    2dc6:	9b ab       	std	Y+51, r25	; 0x33
    2dc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dca:	9d a3       	std	Y+37, r25	; 0x25
    2dcc:	8e 89       	ldd	r24, Y+22	; 0x16
    2dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd0:	89 0f       	add	r24, r25
    2dd2:	8e a3       	std	Y+38, r24	; 0x26
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	8e ab       	std	Y+54, r24	; 0x36
    2dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dda:	8e 89       	ldd	r24, Y+22	; 0x16
    2ddc:	98 17       	cp	r25, r24
    2dde:	08 f0       	brcs	.+2      	; 0x2de2 <TIMER0_delay_ms+0x1c2>
    2de0:	1e aa       	std	Y+54, r1	; 0x36
    2de2:	9b a9       	ldd	r25, Y+51	; 0x33
    2de4:	8e a1       	ldd	r24, Y+38	; 0x26
    2de6:	98 0f       	add	r25, r24
    2de8:	9f ab       	std	Y+55, r25	; 0x37
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	98 af       	std	Y+56, r25	; 0x38
    2dee:	8f a9       	ldd	r24, Y+55	; 0x37
    2df0:	9e a1       	ldd	r25, Y+38	; 0x26
    2df2:	89 17       	cp	r24, r25
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <TIMER0_delay_ms+0x1d8>
    2df6:	18 ae       	std	Y+56, r1	; 0x38
    2df8:	8e a9       	ldd	r24, Y+54	; 0x36
    2dfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2dfc:	89 2b       	or	r24, r25
    2dfe:	8e ab       	std	Y+54, r24	; 0x36
    2e00:	8f a9       	ldd	r24, Y+55	; 0x37
    2e02:	8e a3       	std	Y+38, r24	; 0x26
    2e04:	9f 89       	ldd	r25, Y+23	; 0x17
    2e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e08:	98 0f       	add	r25, r24
    2e0a:	9f a3       	std	Y+39, r25	; 0x27
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	99 af       	std	Y+57, r25	; 0x39
    2e10:	8f a1       	ldd	r24, Y+39	; 0x27
    2e12:	9f 89       	ldd	r25, Y+23	; 0x17
    2e14:	89 17       	cp	r24, r25
    2e16:	08 f0       	brcs	.+2      	; 0x2e1a <TIMER0_delay_ms+0x1fa>
    2e18:	19 ae       	std	Y+57, r1	; 0x39
    2e1a:	8e a9       	ldd	r24, Y+54	; 0x36
    2e1c:	9f a1       	ldd	r25, Y+39	; 0x27
    2e1e:	89 0f       	add	r24, r25
    2e20:	8a af       	std	Y+58, r24	; 0x3a
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	8b af       	std	Y+59, r24	; 0x3b
    2e26:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e28:	8f a1       	ldd	r24, Y+39	; 0x27
    2e2a:	98 17       	cp	r25, r24
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <TIMER0_delay_ms+0x210>
    2e2e:	1b ae       	std	Y+59, r1	; 0x3b
    2e30:	99 ad       	ldd	r25, Y+57	; 0x39
    2e32:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e34:	98 2b       	or	r25, r24
    2e36:	99 af       	std	Y+57, r25	; 0x39
    2e38:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e3a:	9f a3       	std	Y+39, r25	; 0x27
    2e3c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e3e:	98 a1       	ldd	r25, Y+32	; 0x20
    2e40:	89 0f       	add	r24, r25
    2e42:	88 a7       	std	Y+40, r24	; 0x28
    2e44:	89 ad       	ldd	r24, Y+57	; 0x39
    2e46:	98 a5       	ldd	r25, Y+40	; 0x28
    2e48:	89 0f       	add	r24, r25
    2e4a:	88 a7       	std	Y+40, r24	; 0x28
    2e4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	9a a1       	ldd	r25, Y+34	; 0x22
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	8b a1       	ldd	r24, Y+35	; 0x23
    2e56:	8b 83       	std	Y+3, r24	; 0x03
    2e58:	9c a1       	ldd	r25, Y+36	; 0x24
    2e5a:	9c 83       	std	Y+4, r25	; 0x04
    2e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5e:	8d 83       	std	Y+5, r24	; 0x05
    2e60:	9e a1       	ldd	r25, Y+38	; 0x26
    2e62:	9e 83       	std	Y+6, r25	; 0x06
    2e64:	8f a1       	ldd	r24, Y+39	; 0x27
    2e66:	8f 83       	std	Y+7, r24	; 0x07
    2e68:	98 a5       	ldd	r25, Y+40	; 0x28
    2e6a:	98 87       	std	Y+8, r25	; 0x08
    2e6c:	98 89       	ldd	r25, Y+16	; 0x10
    2e6e:	88 85       	ldd	r24, Y+8	; 0x08
    2e70:	89 17       	cp	r24, r25
    2e72:	08 f4       	brcc	.+2      	; 0x2e76 <TIMER0_delay_ms+0x256>
    2e74:	07 cf       	rjmp	.-498    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2e76:	98 89       	ldd	r25, Y+16	; 0x10
    2e78:	88 85       	ldd	r24, Y+8	; 0x08
    2e7a:	98 17       	cp	r25, r24
    2e7c:	d9 f5       	brne	.+118    	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2e7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e80:	8f 81       	ldd	r24, Y+7	; 0x07
    2e82:	89 17       	cp	r24, r25
    2e84:	08 f4       	brcc	.+2      	; 0x2e88 <TIMER0_delay_ms+0x268>
    2e86:	fe ce       	rjmp	.-516    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e8c:	98 17       	cp	r25, r24
    2e8e:	91 f5       	brne	.+100    	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	8e 81       	ldd	r24, Y+6	; 0x06
    2e94:	89 17       	cp	r24, r25
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <TIMER0_delay_ms+0x27a>
    2e98:	f5 ce       	rjmp	.-534    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9e:	98 17       	cp	r25, r24
    2ea0:	49 f5       	brne	.+82     	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2ea2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea6:	89 17       	cp	r24, r25
    2ea8:	08 f4       	brcc	.+2      	; 0x2eac <TIMER0_delay_ms+0x28c>
    2eaa:	ec ce       	rjmp	.-552    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2eac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	98 17       	cp	r25, r24
    2eb2:	01 f5       	brne	.+64     	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2eb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb8:	89 17       	cp	r24, r25
    2eba:	08 f4       	brcc	.+2      	; 0x2ebe <TIMER0_delay_ms+0x29e>
    2ebc:	e3 ce       	rjmp	.-570    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec2:	98 17       	cp	r25, r24
    2ec4:	b9 f4       	brne	.+46     	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2ec6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	89 17       	cp	r24, r25
    2ecc:	08 f4       	brcc	.+2      	; 0x2ed0 <TIMER0_delay_ms+0x2b0>
    2ece:	da ce       	rjmp	.-588    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	98 17       	cp	r25, r24
    2ed6:	71 f4       	brne	.+28     	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	89 17       	cp	r24, r25
    2ede:	08 f4       	brcc	.+2      	; 0x2ee2 <TIMER0_delay_ms+0x2c2>
    2ee0:	d1 ce       	rjmp	.-606    	; 0x2c84 <TIMER0_delay_ms+0x64>
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	98 17       	cp	r25, r24
    2ee8:	29 f4       	brne	.+10     	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2eea:	99 85       	ldd	r25, Y+9	; 0x09
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	89 17       	cp	r24, r25
    2ef0:	08 f4       	brcc	.+2      	; 0x2ef4 <TIMER0_delay_ms+0x2d4>
    2ef2:	c8 ce       	rjmp	.-624    	; 0x2c84 <TIMER0_delay_ms+0x64>
		while(BIT_IS_CLEAR(TIFR,OCF0));
		SET_BIT(TIFR,OCF0);
	}

	/* Disbale Clock */
	TCCR0  &= 0xF8 ;
    2ef4:	a3 e5       	ldi	r26, 0x53	; 83
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e3 e5       	ldi	r30, 0x53	; 83
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 7f       	andi	r24, 0xF8	; 248
    2f00:	8c 93       	st	X, r24
}
    2f02:	eb 96       	adiw	r28, 0x3b	; 59
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <USART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init( const USART_configType *configptr)
{
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <USART_init+0x6>
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <USART_init+0x8>
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f24:	1a 82       	std	Y+2, r1	; 0x02
    2f26:	19 82       	std	Y+1, r1	; 0x01
	/* Using Double Trasmission Speed */
	UCSRA = (1<<U2X);
    2f28:	eb e2       	ldi	r30, 0x2B	; 43
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	80 83       	st	Z, r24
	#if EMPTY_INTERRUPT_ENABLE == TRUE
	SET_BIT(UCSRA,UDRIE);
	#endif

	/* Enable TX & RX */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2f30:	aa e2       	ldi	r26, 0x2A	; 42
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	ea e2       	ldi	r30, 0x2A	; 42
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	88 61       	ori	r24, 0x18	; 24
    2f3c:	8c 93       	st	X, r24

	/* To Write In  UCSRC Register  Should Set USRSEL */
	SET_BIT(UCSRC,URSEL);
    2f3e:	a0 e4       	ldi	r26, 0x40	; 64
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e0 e4       	ldi	r30, 0x40	; 64
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	80 68       	ori	r24, 0x80	; 128
    2f4a:	8c 93       	st	X, r24
	 * Clock  Polarity At Synchronous Mode only
	 * Is Rising In Tx Falling In Rx
	 * if U Want to Change It Change UCPOL Bit
	 */

	if (configptr ->mode == SYNCHRONOUS)
    2f4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	79 f4       	brne	.+30     	; 0x2f74 <USART_init+0x60>
	{
		SET_BIT(UCSRC,UMSEL);
    2f56:	a0 e4       	ldi	r26, 0x40	; 64
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e0 e4       	ldi	r30, 0x40	; 64
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	80 64       	ori	r24, 0x40	; 64
    2f62:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCPOL);
    2f64:	a0 e4       	ldi	r26, 0x40	; 64
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e0 e4       	ldi	r30, 0x40	; 64
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8e 7f       	andi	r24, 0xFE	; 254
    2f70:	8c 93       	st	X, r24
    2f72:	0e c0       	rjmp	.+28     	; 0x2f90 <USART_init+0x7c>

	}
	else
	{
		CLEAR_BIT(UCSRC,UMSEL);
    2f74:	a0 e4       	ldi	r26, 0x40	; 64
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e0 e4       	ldi	r30, 0x40	; 64
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	8f 7b       	andi	r24, 0xBF	; 191
    2f80:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCPOL);
    2f82:	a0 e4       	ldi	r26, 0x40	; 64
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e0 e4       	ldi	r30, 0x40	; 64
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8e 7f       	andi	r24, 0xFE	; 254
    2f8e:	8c 93       	st	X, r24
	}

	/* Parity Mode Selection */

	UCSRC = (UCSRC & 0xCF) | ((configptr->parity_mode) << 4);
    2f90:	a0 e4       	ldi	r26, 0x40	; 64
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e0 e4       	ldi	r30, 0x40	; 64
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	2f 7c       	andi	r18, 0xCF	; 207
    2f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa2:	83 81       	ldd	r24, Z+3	; 0x03
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	82 95       	swap	r24
    2faa:	92 95       	swap	r25
    2fac:	90 7f       	andi	r25, 0xF0	; 240
    2fae:	98 27       	eor	r25, r24
    2fb0:	80 7f       	andi	r24, 0xF0	; 240
    2fb2:	98 27       	eor	r25, r24
    2fb4:	82 2b       	or	r24, r18
    2fb6:	8c 93       	st	X, r24

	/* Select Number Of Stop Bits */

	if (configptr->stop_bit == BIT_1)
    2fb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fba:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbc:	84 81       	ldd	r24, Z+4	; 0x04
    2fbe:	88 23       	and	r24, r24
    2fc0:	41 f4       	brne	.+16     	; 0x2fd2 <USART_init+0xbe>
	{
		CLEAR_BIT(UCSRC,USBS);
    2fc2:	a0 e4       	ldi	r26, 0x40	; 64
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e0 e4       	ldi	r30, 0x40	; 64
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	87 7f       	andi	r24, 0xF7	; 247
    2fce:	8c 93       	st	X, r24
    2fd0:	07 c0       	rjmp	.+14     	; 0x2fe0 <USART_init+0xcc>
	}
	else
	{
		SET_BIT(UCSRC,USBS);
    2fd2:	a0 e4       	ldi	r26, 0x40	; 64
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e0 e4       	ldi	r30, 0x40	; 64
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 60       	ori	r24, 0x08	; 8
    2fde:	8c 93       	st	X, r24
	}

	/* Character Size Of Data */

	if (configptr->data_size == BIT_9)
    2fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe4:	85 81       	ldd	r24, Z+5	; 0x05
    2fe6:	87 30       	cpi	r24, 0x07	; 7
    2fe8:	79 f4       	brne	.+30     	; 0x3008 <USART_init+0xf4>
	{
		SET_BIT(UCSRB,UCSZ2);
    2fea:	aa e2       	ldi	r26, 0x2A	; 42
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	ea e2       	ldi	r30, 0x2A	; 42
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	84 60       	ori	r24, 0x04	; 4
    2ff6:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF9) | (0x3<<1);
    2ff8:	a0 e4       	ldi	r26, 0x40	; 64
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e0 e4       	ldi	r30, 0x40	; 64
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	86 60       	ori	r24, 0x06	; 6
    3004:	8c 93       	st	X, r24
    3006:	17 c0       	rjmp	.+46     	; 0x3036 <USART_init+0x122>
	}
	else
	{
		CLEAR_BIT(UCSRB,UCSZ2);
    3008:	aa e2       	ldi	r26, 0x2A	; 42
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	ea e2       	ldi	r30, 0x2A	; 42
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	8b 7f       	andi	r24, 0xFB	; 251
    3014:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF9) | ((configptr->data_size) << 1);
    3016:	a0 e4       	ldi	r26, 0x40	; 64
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e0 e4       	ldi	r30, 0x40	; 64
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	28 2f       	mov	r18, r24
    3022:	29 7f       	andi	r18, 0xF9	; 249
    3024:	eb 81       	ldd	r30, Y+3	; 0x03
    3026:	fc 81       	ldd	r31, Y+4	; 0x04
    3028:	85 81       	ldd	r24, Z+5	; 0x05
    302a:	88 2f       	mov	r24, r24
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	82 2b       	or	r24, r18
    3034:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (configptr->baud_rate * 8UL))) - 1);
    3036:	eb 81       	ldd	r30, Y+3	; 0x03
    3038:	fc 81       	ldd	r31, Y+4	; 0x04
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	cc 01       	movw	r24, r24
    3040:	a0 e0       	ldi	r26, 0x00	; 0
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	aa 1f       	adc	r26, r26
    304a:	bb 1f       	adc	r27, r27
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	aa 1f       	adc	r26, r26
    3052:	bb 1f       	adc	r27, r27
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	aa 1f       	adc	r26, r26
    305a:	bb 1f       	adc	r27, r27
    305c:	9c 01       	movw	r18, r24
    305e:	ad 01       	movw	r20, r26
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	92 e1       	ldi	r25, 0x12	; 18
    3064:	aa e7       	ldi	r26, 0x7A	; 122
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__udivmodsi4>
    3070:	da 01       	movw	r26, r20
    3072:	c9 01       	movw	r24, r18
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    307a:	e0 e4       	ldi	r30, 0x40	; 64
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	89 2f       	mov	r24, r25
    3084:	99 27       	eor	r25, r25
    3086:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3088:	e9 e2       	ldi	r30, 0x29	; 41
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	80 83       	st	Z, r24
}
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <USART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(const uint8 data)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	0f 92       	push	r0
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	89 83       	std	Y+1, r24	; 0x01
	#if TX_INTERRUPT_ENABLE == TRUE
	UDR = data ;
	#else
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    30aa:	eb e2       	ldi	r30, 0x2B	; 43
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	80 72       	andi	r24, 0x20	; 32
    30b6:	90 70       	andi	r25, 0x00	; 0
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	b9 f3       	breq	.-18     	; 0x30aa <USART_sendByte+0xc>
	UDR = data ;
    30bc:	ec e2       	ldi	r30, 0x2C	; 44
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	80 83       	st	Z, r24
	 UDR = data ;
	 while(BIT_IS_CLEAR(UCSRA,TXC));
	 SET_BIT(UCSRA,TXC);
	 ***********************************************************************/
	#endif
}
    30c4:	0f 90       	pop	r0
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <USART_recieveByte>:
 * Description :
 * Functional responsible for receive byte from another UART device.
 * if there are Any Frame Or Priority Error This Function Will Return 0
 */
uint8 USART_recieveByte(void)
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	0f 92       	push	r0
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
	/* Check For Frame Error */
	if (BIT_IS_SET(UCSRA,FE))
    30d6:	eb e2       	ldi	r30, 0x2B	; 43
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	80 81       	ld	r24, Z
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	80 71       	andi	r24, 0x10	; 16
    30e2:	90 70       	andi	r25, 0x00	; 0
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	11 f0       	breq	.+4      	; 0x30ec <USART_recieveByte+0x20>
	{
		return 0 ;
    30e8:	19 82       	std	Y+1, r1	; 0x01
    30ea:	14 c0       	rjmp	.+40     	; 0x3114 <USART_recieveByte+0x48>
	else
	{
		/* Do Nothing */
	}
	/* Check For Parity Error */
	if (BIT_IS_SET(UCSRA,PE))
    30ec:	eb e2       	ldi	r30, 0x2B	; 43
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	88 2f       	mov	r24, r24
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	84 70       	andi	r24, 0x04	; 4
    30f8:	90 70       	andi	r25, 0x00	; 0
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	11 f0       	breq	.+4      	; 0x3102 <USART_recieveByte+0x36>
	{
		return 0 ;
    30fe:	19 82       	std	Y+1, r1	; 0x01
    3100:	09 c0       	rjmp	.+18     	; 0x3114 <USART_recieveByte+0x48>
		/* Do Nothing */
	}
#if RX_INTERRUPT_ENABLE == TRUE
	return UDR ;
#else
	while (BIT_IS_CLEAR(UCSRA,RXC));
    3102:	eb e2       	ldi	r30, 0x2B	; 43
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	88 23       	and	r24, r24
    310a:	dc f7       	brge	.-10     	; 0x3102 <USART_recieveByte+0x36>
	return UDR ;
    310c:	ec e2       	ldi	r30, 0x2C	; 44
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	89 81       	ldd	r24, Y+1	; 0x01
#endif
}
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(const uint8 *Str)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	00 d0       	rcall	.+0      	; 0x3124 <USART_sendString+0x6>
    3124:	0f 92       	push	r0
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	9b 83       	std	Y+3, r25	; 0x03
    312c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    312e:	19 82       	std	Y+1, r1	; 0x01
    3130:	0e c0       	rjmp	.+28     	; 0x314e <USART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		USART_sendByte(Str[i]);
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	9b 81       	ldd	r25, Y+3	; 0x03
    313c:	fc 01       	movw	r30, r24
    313e:	e2 0f       	add	r30, r18
    3140:	f3 1f       	adc	r31, r19
    3142:	80 81       	ld	r24, Z
    3144:	0e 94 4f 18 	call	0x309e	; 0x309e <USART_sendByte>
		i++;
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	8f 5f       	subi	r24, 0xFF	; 255
    314c:	89 83       	std	Y+1, r24	; 0x01
void USART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	fc 01       	movw	r30, r24
    315a:	e2 0f       	add	r30, r18
    315c:	f3 1f       	adc	r31, r19
    315e:	80 81       	ld	r24, Z
    3160:	88 23       	and	r24, r24
    3162:	39 f7       	brne	.-50     	; 0x3132 <USART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <USART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_receiveString(uint8 *Str)
{
    3170:	0f 93       	push	r16
    3172:	1f 93       	push	r17
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	00 d0       	rcall	.+0      	; 0x317a <USART_receiveString+0xa>
    317a:	0f 92       	push	r0
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	9b 83       	std	Y+3, r25	; 0x03
    3182:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3184:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_recieveByte();
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	9b 81       	ldd	r25, Y+3	; 0x03
    3190:	8c 01       	movw	r16, r24
    3192:	02 0f       	add	r16, r18
    3194:	13 1f       	adc	r17, r19
    3196:	0e 94 66 18 	call	0x30cc	; 0x30cc <USART_recieveByte>
    319a:	f8 01       	movw	r30, r16
    319c:	80 83       	st	Z, r24
    319e:	0f c0       	rjmp	.+30     	; 0x31be <USART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	9b 81       	ldd	r25, Y+3	; 0x03
    31b0:	8c 01       	movw	r16, r24
    31b2:	02 0f       	add	r16, r18
    31b4:	13 1f       	adc	r17, r19
    31b6:	0e 94 66 18 	call	0x30cc	; 0x30cc <USART_recieveByte>
    31ba:	f8 01       	movw	r30, r16
    31bc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = USART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	fc 01       	movw	r30, r24
    31ca:	e2 0f       	add	r30, r18
    31cc:	f3 1f       	adc	r31, r19
    31ce:	80 81       	ld	r24, Z
    31d0:	83 32       	cpi	r24, 0x23	; 35
    31d2:	31 f7       	brne	.-52     	; 0x31a0 <USART_receiveString+0x30>
		i++;
		Str[i] = USART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	fc 01       	movw	r30, r24
    31e0:	e2 0f       	add	r30, r18
    31e2:	f3 1f       	adc	r31, r19
    31e4:	10 82       	st	Z, r1
}
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	cf 91       	pop	r28
    31ee:	df 91       	pop	r29
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	08 95       	ret

000031f6 <__udivmodsi4>:
    31f6:	a1 e2       	ldi	r26, 0x21	; 33
    31f8:	1a 2e       	mov	r1, r26
    31fa:	aa 1b       	sub	r26, r26
    31fc:	bb 1b       	sub	r27, r27
    31fe:	fd 01       	movw	r30, r26
    3200:	0d c0       	rjmp	.+26     	; 0x321c <__udivmodsi4_ep>

00003202 <__udivmodsi4_loop>:
    3202:	aa 1f       	adc	r26, r26
    3204:	bb 1f       	adc	r27, r27
    3206:	ee 1f       	adc	r30, r30
    3208:	ff 1f       	adc	r31, r31
    320a:	a2 17       	cp	r26, r18
    320c:	b3 07       	cpc	r27, r19
    320e:	e4 07       	cpc	r30, r20
    3210:	f5 07       	cpc	r31, r21
    3212:	20 f0       	brcs	.+8      	; 0x321c <__udivmodsi4_ep>
    3214:	a2 1b       	sub	r26, r18
    3216:	b3 0b       	sbc	r27, r19
    3218:	e4 0b       	sbc	r30, r20
    321a:	f5 0b       	sbc	r31, r21

0000321c <__udivmodsi4_ep>:
    321c:	66 1f       	adc	r22, r22
    321e:	77 1f       	adc	r23, r23
    3220:	88 1f       	adc	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	1a 94       	dec	r1
    3226:	69 f7       	brne	.-38     	; 0x3202 <__udivmodsi4_loop>
    3228:	60 95       	com	r22
    322a:	70 95       	com	r23
    322c:	80 95       	com	r24
    322e:	90 95       	com	r25
    3230:	9b 01       	movw	r18, r22
    3232:	ac 01       	movw	r20, r24
    3234:	bd 01       	movw	r22, r26
    3236:	cf 01       	movw	r24, r30
    3238:	08 95       	ret

0000323a <__prologue_saves__>:
    323a:	2f 92       	push	r2
    323c:	3f 92       	push	r3
    323e:	4f 92       	push	r4
    3240:	5f 92       	push	r5
    3242:	6f 92       	push	r6
    3244:	7f 92       	push	r7
    3246:	8f 92       	push	r8
    3248:	9f 92       	push	r9
    324a:	af 92       	push	r10
    324c:	bf 92       	push	r11
    324e:	cf 92       	push	r12
    3250:	df 92       	push	r13
    3252:	ef 92       	push	r14
    3254:	ff 92       	push	r15
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	ca 1b       	sub	r28, r26
    3264:	db 0b       	sbc	r29, r27
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	f8 94       	cli
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	09 94       	ijmp

00003272 <__epilogue_restores__>:
    3272:	2a 88       	ldd	r2, Y+18	; 0x12
    3274:	39 88       	ldd	r3, Y+17	; 0x11
    3276:	48 88       	ldd	r4, Y+16	; 0x10
    3278:	5f 84       	ldd	r5, Y+15	; 0x0f
    327a:	6e 84       	ldd	r6, Y+14	; 0x0e
    327c:	7d 84       	ldd	r7, Y+13	; 0x0d
    327e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3280:	9b 84       	ldd	r9, Y+11	; 0x0b
    3282:	aa 84       	ldd	r10, Y+10	; 0x0a
    3284:	b9 84       	ldd	r11, Y+9	; 0x09
    3286:	c8 84       	ldd	r12, Y+8	; 0x08
    3288:	df 80       	ldd	r13, Y+7	; 0x07
    328a:	ee 80       	ldd	r14, Y+6	; 0x06
    328c:	fd 80       	ldd	r15, Y+5	; 0x05
    328e:	0c 81       	ldd	r16, Y+4	; 0x04
    3290:	1b 81       	ldd	r17, Y+3	; 0x03
    3292:	aa 81       	ldd	r26, Y+2	; 0x02
    3294:	b9 81       	ldd	r27, Y+1	; 0x01
    3296:	ce 0f       	add	r28, r30
    3298:	d1 1d       	adc	r29, r1
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	ed 01       	movw	r28, r26
    32a6:	08 95       	ret

000032a8 <itoa>:
    32a8:	fb 01       	movw	r30, r22
    32aa:	9f 01       	movw	r18, r30
    32ac:	e8 94       	clt
    32ae:	42 30       	cpi	r20, 0x02	; 2
    32b0:	c4 f0       	brlt	.+48     	; 0x32e2 <itoa+0x3a>
    32b2:	45 32       	cpi	r20, 0x25	; 37
    32b4:	b4 f4       	brge	.+44     	; 0x32e2 <itoa+0x3a>
    32b6:	4a 30       	cpi	r20, 0x0A	; 10
    32b8:	29 f4       	brne	.+10     	; 0x32c4 <itoa+0x1c>
    32ba:	97 fb       	bst	r25, 7
    32bc:	1e f4       	brtc	.+6      	; 0x32c4 <itoa+0x1c>
    32be:	90 95       	com	r25
    32c0:	81 95       	neg	r24
    32c2:	9f 4f       	sbci	r25, 0xFF	; 255
    32c4:	64 2f       	mov	r22, r20
    32c6:	77 27       	eor	r23, r23
    32c8:	0e 94 85 19 	call	0x330a	; 0x330a <__udivmodhi4>
    32cc:	80 5d       	subi	r24, 0xD0	; 208
    32ce:	8a 33       	cpi	r24, 0x3A	; 58
    32d0:	0c f0       	brlt	.+2      	; 0x32d4 <itoa+0x2c>
    32d2:	89 5d       	subi	r24, 0xD9	; 217
    32d4:	81 93       	st	Z+, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	a1 f7       	brne	.-24     	; 0x32c4 <itoa+0x1c>
    32dc:	16 f4       	brtc	.+4      	; 0x32e2 <itoa+0x3a>
    32de:	5d e2       	ldi	r21, 0x2D	; 45
    32e0:	51 93       	st	Z+, r21
    32e2:	10 82       	st	Z, r1
    32e4:	c9 01       	movw	r24, r18
    32e6:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <strrev>

000032ea <strrev>:
    32ea:	dc 01       	movw	r26, r24
    32ec:	fc 01       	movw	r30, r24
    32ee:	67 2f       	mov	r22, r23
    32f0:	71 91       	ld	r23, Z+
    32f2:	77 23       	and	r23, r23
    32f4:	e1 f7       	brne	.-8      	; 0x32ee <strrev+0x4>
    32f6:	32 97       	sbiw	r30, 0x02	; 2
    32f8:	04 c0       	rjmp	.+8      	; 0x3302 <strrev+0x18>
    32fa:	7c 91       	ld	r23, X
    32fc:	6d 93       	st	X+, r22
    32fe:	70 83       	st	Z, r23
    3300:	62 91       	ld	r22, -Z
    3302:	ae 17       	cp	r26, r30
    3304:	bf 07       	cpc	r27, r31
    3306:	c8 f3       	brcs	.-14     	; 0x32fa <strrev+0x10>
    3308:	08 95       	ret

0000330a <__udivmodhi4>:
    330a:	aa 1b       	sub	r26, r26
    330c:	bb 1b       	sub	r27, r27
    330e:	51 e1       	ldi	r21, 0x11	; 17
    3310:	07 c0       	rjmp	.+14     	; 0x3320 <__udivmodhi4_ep>

00003312 <__udivmodhi4_loop>:
    3312:	aa 1f       	adc	r26, r26
    3314:	bb 1f       	adc	r27, r27
    3316:	a6 17       	cp	r26, r22
    3318:	b7 07       	cpc	r27, r23
    331a:	10 f0       	brcs	.+4      	; 0x3320 <__udivmodhi4_ep>
    331c:	a6 1b       	sub	r26, r22
    331e:	b7 0b       	sbc	r27, r23

00003320 <__udivmodhi4_ep>:
    3320:	88 1f       	adc	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	5a 95       	dec	r21
    3326:	a9 f7       	brne	.-22     	; 0x3312 <__udivmodhi4_loop>
    3328:	80 95       	com	r24
    332a:	90 95       	com	r25
    332c:	bc 01       	movw	r22, r24
    332e:	cd 01       	movw	r24, r26
    3330:	08 95       	ret

00003332 <_exit>:
    3332:	f8 94       	cli

00003334 <__stop_program>:
    3334:	ff cf       	rjmp	.-2      	; 0x3334 <__stop_program>
